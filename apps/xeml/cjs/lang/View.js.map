{"version":3,"sources":["../../src/lang/View.js"],"sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable } = require('./GemlUtils');\n\nconst Dataset = require('./Dataset');\n\n/**\n * Geml view class.\n * @class View\n */\nclass View extends Clonable {\n\n    isList = false;\n\n    /**          \n     * @param {Linker} linker\n     * @param {string} name - View name\n     * @param {object} gemlModule - Source ool module\n     * @param {object} info - View info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n        /**\n         * Linker to process this view\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this view\n         * @member {string}\n         */\n        this.name = name;\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Start linking this view\n     * @returns {View}\n     */\n    link() {\n        pre: !this.linked;\n\n        if (this.info.dataset) {\n            this.dataset = this.linker.loadDoc(this.gemlModule, this.info.dataset);\n        } else {\n            assert: this.info.entity, 'Invalid view syntax!';\n            \n            let mainEntity = this.linker.getReferencedEntity(this.gemlModule, this.info.entity);\n            \n            this.dataset = new Dataset(this.linker, mainEntity.name, this.gemlModule, { mainEntity: mainEntity.name });\n            this.dataset.link();\n        }\n\n        if (this.info.isList) {\n            this.isList = true;\n        }\n\n        if (!_.isEmpty(this.info.accept)) {\n            this.params = this.info.accept.concat();\n        }\n\n        if (!_.isEmpty(this.info.selectBy)) {\n            this.selectBy = this.info.selectBy.concat();\n        }\n\n        if (!_.isEmpty(this.info.groupBy)) {\n            this.groupBy = this.info.groupBy.concat();\n        }\n\n        if (!_.isEmpty(this.info.orderBy)) {\n            this.orderBy = this.info.orderBy.concat();\n        }\n\n        if (this.info.skip) {\n            this.skip = _.isPlainObject(this.info.skip) ? Object.assign({}, this.info.skip) : this.info.skip;\n        }\n\n        if (this.info.limit) {\n            this.limit = _.isPlainObject(this.info.limit) ? Object.assign({}, this.info.limit) : this.info.limit;\n        }\n\n        this.linked = true;\n\n        return this;\n    }\n\n    inferTypeInfo(inSchema) {\n        if (!_.isEmpty(this.params)) {\n            let inferredParams = [];\n\n            this.params.forEach(param => {\n                if (GemlUtils.isMemberAccess(param.type)) {\n                    let [ entityName, fieldName ] = param.type.split('.');\n\n                    if (!inSchema.hasEntity(entityName)) {\n                        throw new Error(`Parameter \"${param.name}\" references to an entity \"${entityName}\" which is not belong to the schema.`);\n                    }\n\n                    let entity = inSchema.entities[entityName];\n                    //console.dir(entity.toJSON(), {depth: 8, colors: true});\n\n                    let field = entity.getEntityAttribute(fieldName);\n                    inferredParams.push(Object.assign(_.omit(_.toPlainObject(field), ['isReference', 'optional', 'displayName']), {name: param.name}));\n                } else {\n                    const [ typeInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, param);\n                    inferredParams.push(typeInfo);\n                }\n            });\n\n            this.params = inferredParams;\n        }\n    }\n\n    getDocumentHierarchy(inSchema) {\n        return inSchema.getDocumentHierachy(this.gemlModule, this.dataset.name);\n    }\n\n    /**\n     * Clone the view     \n     * @returns {View}\n     */\n    clone() {\n        super.clone();\n        \n        let view = new View(this.linker, this.name, this.gemlModule, this.info);\n\n        deepCloneField(this, view, 'dataset');\n        deepCloneField(this, view, 'params');\n        deepCloneField(this, view, 'selectBy');\n        deepCloneField(this, view, 'groupBy');\n        deepCloneField(this, view, 'orderBy');\n        deepCloneField(this, view, 'skip');\n        deepCloneField(this, view, 'limit');\n\n        view.isList = this.isList;\n        view.linked = true;\n\n        return view;\n    }\n    \n    /**\n     * Translate the view into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,\n            dataset: this.dataset.toJSON(),\n            isList: this.isList,\n            params: this.params,\n            selectBy: this.selectBy,\n            groupBy: this.groupBy,\n            orderBy: this.orderBy,\n            skip: this.skip,\n            limit: this.limit\n        };\n    }\n}\n\nmodule.exports = View;"],"names":["_","require","generateDisplayName","deepCloneField","Clonable","Dataset","View","link","pre","linked","info","dataset","linker","loadDoc","gemlModule","assert","entity","mainEntity","getReferencedEntity","name","isList","isEmpty","accept","params","concat","selectBy","groupBy","orderBy","skip","isPlainObject","Object","assign","limit","inferTypeInfo","inSchema","inferredParams","forEach","param","GemlUtils","isMemberAccess","type","entityName","fieldName","split","hasEntity","Error","entities","field","getEntityAttribute","push","omit","toPlainObject","typeInfo","baseInfo","trackBackType","getDocumentHierarchy","getDocumentHierachy","clone","view","toJSON","constructor","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}