{"version":3,"sources":["../../../src/lang/__test__/Json2Geml.spec.js"],"sourcesContent":["'use strict';\n\nconst { fs, glob } = require('@genx/sys');\nconst path = require('path');\nconst winston = require('winston');\n\nconst SOURCE_PATH = path.resolve(__dirname, '../../../test/unitGemlGen');\nconst ENT_SOURCE_PATH = path.join(SOURCE_PATH, 'entities');\nconst GemlCodeGen = require('../GemlCodeGen');\nconst Linker = require('../Linker');\n\ndescribe('unit:lang:GemlCodeGen', function () {    \n    let logger = winston.createLogger({\n        \"level\": \"info\",\n        \"transports\": [\n            new winston.transports.Console({                            \n                \"format\": winston.format.combine(winston.format.colorize(), winston.format.simple())\n            })\n        ]\n    });\n\n    after(function () {        \n        const files = glob.sync(path.join(ENT_SOURCE_PATH, '*.geml'));\n        files.forEach(f => fs.removeSync(f));\n    });\n\n    it('Generate entities', function () {                \n        let files = fs.readdirSync(ENT_SOURCE_PATH);\n\n        files.forEach(f => {\n            if (f.endsWith('.json')) {\n                let json = fs.readJsonSync(path.join(ENT_SOURCE_PATH, f), 'utf8') //linker.loadModule(f);\n                \n                let content = GemlCodeGen.transform(json);\n                fs.writeFileSync(path.join(ENT_SOURCE_PATH, f.substr(0, f.length - 5)), content, 'utf8');\n            }\n        });        \n    });\n\n    it('Linking from generated', function () {\n        let linker = new Linker(logger, { gemlPath: SOURCE_PATH, schemas: { test: {} } });\n        linker.link('test.geml');\n\n        linker.schemas.should.have.keys('test');\n        linker.schemas.test.entities.should.have.keys('user', 'profile', 'gender', 'group', 'usergroup');\n    });\n});"],"names":["fs","glob","require","path","winston","SOURCE_PATH","resolve","__dirname","ENT_SOURCE_PATH","join","GemlCodeGen","Linker","describe","logger","createLogger","transports","Console","format","combine","colorize","simple","after","files","sync","forEach","f","removeSync","it","readdirSync","endsWith","json","readJsonSync","content","transform","writeFileSync","substr","length","linker","gemlPath","schemas","test","link","should","have","keys","entities"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;AAEA,MAAM,EAAEA,EAAE,EAAEC,IAAI,EAAE,GAAGC,QAAQ;AAC7B,MAAMC,OAAOD,QAAQ;AACrB,MAAME,UAAUF,QAAQ;AAExB,MAAMG,cAAcF,KAAKG,OAAO,CAACC,WAAW;AAC5C,MAAMC,kBAAkBL,KAAKM,IAAI,CAACJ,aAAa;AAC/C,MAAMK,cAAcR,QAAQ;AAC5B,MAAMS,SAAST,QAAQ;AAEvBU,SAAS,yBAAyB;IAC9B,IAAIC,SAAST,QAAQU,YAAY,CAAC;QAC9B,SAAS;QACT,cAAc;YACV,IAAIV,QAAQW,UAAU,CAACC,OAAO,CAAC;gBAC3B,UAAUZ,QAAQa,MAAM,CAACC,OAAO,CAACd,QAAQa,MAAM,CAACE,QAAQ,IAAIf,QAAQa,MAAM,CAACG,MAAM;YACrF;SACH;IACL;IAEAC,MAAM;QACF,MAAMC,QAAQrB,KAAKsB,IAAI,CAACpB,KAAKM,IAAI,CAACD,iBAAiB;QACnDc,MAAME,OAAO,CAACC,CAAAA,IAAKzB,GAAG0B,UAAU,CAACD;IACrC;IAEAE,GAAG,qBAAqB;QACpB,IAAIL,QAAQtB,GAAG4B,WAAW,CAACpB;QAE3Bc,MAAME,OAAO,CAACC,CAAAA;YACV,IAAIA,EAAEI,QAAQ,CAAC,UAAU;gBACrB,IAAIC,OAAO9B,GAAG+B,YAAY,CAAC5B,KAAKM,IAAI,CAACD,iBAAiBiB,IAAI,QAAQ,uBAAuB;;gBAEzF,IAAIO,UAAUtB,YAAYuB,SAAS,CAACH;gBACpC9B,GAAGkC,aAAa,CAAC/B,KAAKM,IAAI,CAACD,iBAAiBiB,EAAEU,MAAM,CAAC,GAAGV,EAAEW,MAAM,GAAG,KAAKJ,SAAS;YACrF;QACJ;IACJ;IAEAL,GAAG,0BAA0B;QACzB,IAAIU,SAAS,IAAI1B,OAAOE,QAAQ;YAAEyB,UAAUjC;YAAakC,SAAS;gBAAEC,MAAM,CAAC;YAAE;QAAE;QAC/EH,OAAOI,IAAI,CAAC;QAEZJ,OAAOE,OAAO,CAACG,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC;QAChCP,OAAOE,OAAO,CAACC,IAAI,CAACK,QAAQ,CAACH,MAAM,CAACC,IAAI,CAACC,IAAI,CAAC,QAAQ,WAAW,UAAU,SAAS;IACxF;AACJ"}