{"version":3,"sources":["../../../src/lang/__test__/Linker.spec.js"],"sourcesContent":["'use strict';\n\nconst winston = require('winston');\nconst path = require('path');\nconst Linker = require('../Linker');\n\nconst SOURCE_PATH = path.resolve(__dirname, '../../../test/data/unit/linker');\n\ndescribe('unit:lang:Linker', function () {    \n    let linker;\n\n    let logger = winston.createLogger({\n        \"level\": \"info\",\n        \"transports\": [\n            new winston.transports.Console({                            \n                \"format\": winston.format.combine(winston.format.colorize(), winston.format.simple())\n            })\n        ]\n    });\n\n    beforeEach(function () {\n        linker = new Linker(logger, { gemlPath: SOURCE_PATH, schemas: { product: {}, manyToMany: {} } /*, saveIntermediate: true */ });\n    });\n\n    describe('load module', function () {\n        it('compile product schema', function () {\n            let mod = linker.loadModule('product.geml');\n\n            let expected =\n            {\n                \"namespace\": [\n                    path.join(SOURCE_PATH, 'entities', 'organization.geml'),\n                    path.join(SOURCE_PATH, 'entities', 'product.geml'),\n                    path.join(SOURCE_PATH, 'entities', 'types.geml'),\n                    path.join(SOURCE_PATH, 'entities', 'user.geml')\n                ],\n                \"schema\": {\n                    \"product\": {\n                        \"entities\": [\n                            { \"entity\": \"product\" },\n                            { \"entity\": \"user\" }\n                        ]\n                    }\n                },\n                \"id\": \"./product.geml\",\n                \"name\": \"product\"\n            };\n            should.exists(mod);            \n            mod.should.be.eql(expected);\n        });\n        \n        it('compile product entity', function () {\n            let mod = linker.loadModule('entities/product.geml');\n\n            let expected =\n            {\n                \"namespace\": [\n                    path.join(SOURCE_PATH, 'entities', 'types.geml'),\n                ],\n                entity: {\n                    product: {\n                      features: [\n                        'autoId',\n                        { name: 'atLeastOneNotNull', args: [ [ 'name', 'email' ] ] }\n                      ],\n                      fields: {\n                        name: { name: 'name', type: 'name' },\n                        email: { name: 'email', type: 'email' },\n                        desc: { name: 'desc', type: 'desc', comment: 'Description' },\n                        attr: {\n                          name: 'attr',\n                          type: 'nonEmptyText',\n                          modifiers: [\n                            {\n                              oolType: 'Activator',\n                              name: 'defaultGenerator',\n                              args: [ { oolType: 'ObjectReference', name: 'latest.email' } ]\n                            },\n                            { oolType: 'Processor', name: 'processBeforeValidation' },\n                            { oolType: 'Validator', name: 'isSomething' },\n                            {\n                              oolType: 'Processor',\n                              name: 'someProcess',\n                              args: [ 'text' ]\n                            }\n                          ]\n                        }\n                      }\n                    }\n                  },\n                  id: './entities/product.geml',\n                  name: 'product'\n            };\n            should.exists(mod);                        \n            mod.should.be.eql(expected);\n        });\n    });\n\n    describe('load element', function () {\n        it('load product entity from schema', function () {\n            let schemaMod = linker.loadModule('product.geml');\n            let refId = 'entity:product<-' + schemaMod.id;\n\n            let productMod = linker.loadModule('entities/product.geml');\n            let selfId = 'entity:product@' + productMod.id;\n\n            linker._elementsCache.should.not.have.key(refId);\n            linker._elementsCache.should.not.have.key(selfId);\n\n            let productEntity = linker.loadElement(schemaMod, 'entity', 'product');\n            should.exists(productEntity);\n            productEntity.name.should.eql('product');\n\n            linker._elementsCache.should.have.key(refId);\n            linker._elementsCache.should.have.key(selfId);\n\n            linker._elementsCache[refId].should.eql(productEntity);\n            linker._elementsCache[selfId].should.eql(productEntity);\n        });\n    });\n\n    describe('link a schema', function () {\n        it('linker.link', function () {\n            linker.link('product.geml', 'product');\n            linker.schemas.should.have.key('product')\n            let linked = linker.schemas['product'].toJSON();\n            linked.displayName.should.equal('Product');\n            linked.entities.should.have.key('product');\n\n            let product = linked.entities['product'];\n            product.should.have.key('name', 'displayName', 'fields', 'key');\n            product.name.should.equal('product');\n            product.displayName.should.equal('Product');\n            product.fields.should.have.key('id', 'name', 'email', 'desc');\n            product.key.should.equal('id');\n        });\n    });\n\n    describe('manyToMany', function () {\n        it('linker.link', function () {\n            linker.link('manyToMany.geml', 'manyToMany');\n            linker.schemas.should.have.key('manyToMany')\n            let linked = linker.schemas['manyToMany'].toJSON();\n            \n            linked.entities.should.have.key('company', 'companyRelation', 'companyRelationType');\n\n            let company = linker.schemas['manyToMany'].entities['company'];\n\n            company.should.have.key('name', 'displayName', 'fields', 'key', 'info');\n        });\n    });\n});"],"names":["winston","require","path","Linker","SOURCE_PATH","resolve","__dirname","describe","linker","logger","createLogger","transports","Console","format","combine","colorize","simple","beforeEach","gemlPath","schemas","product","manyToMany","it","mod","loadModule","expected","join","should","exists","be","eql","entity","features","name","args","fields","type","email","desc","comment","attr","modifiers","oolType","id","schemaMod","refId","productMod","selfId","_elementsCache","not","have","key","productEntity","loadElement","link","linked","toJSON","displayName","equal","entities","company"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}