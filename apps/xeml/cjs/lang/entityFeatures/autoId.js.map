{"version":3,"sources":["../../../src/lang/entityFeatures/autoId.js"],"sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\n\nconst FEATURE_NAME = 'autoId';\n\n/**\n * A rule specifies the id of entity is automatically generated.\n * @module EntityFeature_AutoId\n */\n\n/**\n * Initialize the feature\n * @param {Entity} entity - Entity to apply this feature\n * @param {array} options - Auto id field options\n * @property {string} [options.name='id'] - Field name\n * @property {string} [options.type='integer'] - Field type\n */\nfunction feature(entity, args = []) {\n    let typeInfo = {\n        name: 'id',\n        type: 'integer',\n        auto: true,        \n        writeOnce: true\n    };\n\n    let [ options ] = args;\n\n    let featureExtra = {};\n\n    if (options) {\n        if (typeof options === 'string') {\n            options = { name: options };\n        }        \n\n        if (options.type) {\n            switch (options.type) {\n                case 'integer':\n                    if (options.startFrom) {\n                        featureExtra.startFrom = options.startFrom;\n                    }\n                break;\n\n                case 'uuid':\n                    typeInfo['type'] = 'text';\n                    typeInfo['fixedLength'] = 36;\n                    typeInfo['generator'] = 'uuid';\n                break;\n\n                case 'shortid':\n                    typeInfo['type'] = 'text';\n                    typeInfo['maxLength'] = 20;\n                    typeInfo['generator'] = 'shortid';\n                break;\n\n                case 'uniqid':\n                    typeInfo['type'] = 'text';                    \n\n                    if (options.prefix) {\n                        if (typeof options.prefix !== 'string') {\n                            throw new Error(`\"prefix\" option should be a string. Entity: ${entity.name}, feature: autoId`);\n                        }    \n\n                        typeInfo['fixedLength'] = 17 + options.prefix.length;\n                        typeInfo['generator'] = [ 'uniqid', options.prefix ];\n                    } else {\n                        typeInfo['fixedLength'] = 17;\n                        typeInfo['generator'] = 'uniqid';\n                    }                    \n                break;\n\n                case 'hyperid':\n                    typeInfo['type'] = 'text';                                           \n\n                    let args = [ 'hyperid' ];\n                    let opt = {};\n                    let prefixLength;\n\n                    if (options.prefix) {\n                        prefixLength = options.prefix.length;\n                        opt.prefix = options.prefix;\n                    } else {\n                        prefixLength = 0;\n                    }\n\n                    if (options.fixedLength) {\n                        opt.fixedLength = options.fixedLength;\n                        typeInfo['fixedLength'] = 33 + prefixLength;\n                    } else {\n                        typeInfo['maxLength'] = 40 + prefixLength;\n                    }\n\n                    if (options.urlSafe) {\n                        opt.urlSafe = options.urlSafe;\n                    }\n\n                    if (!_.isEmpty(opt)) {\n                        args.push(opt);\n                    }\n\n                    typeInfo['generator'] = args.length > 1 ? args : args[0];\n                break;\n\n                default:\n                    throw new Error(`Unsupported autoId type: ${options.type}. Entity: ${entity.name}`);\n            }\n        } else {\n            if (options.startFrom) {\n                featureExtra.startFrom = options.startFrom;\n            }\n        } \n        \n        if (options.name) {\n            typeInfo.name = options.name;\n        }\n    }\n\n    let fieldName = typeInfo.name;\n\n    entity.addFeature(FEATURE_NAME, {\n        field: fieldName,\n        ...featureExtra        \n    }).once('beforeAddingFields', () => {\n        entity.addField(fieldName, typeInfo)\n            .setKey(fieldName);\n    });\n}\n\nmodule.exports = feature;"],"names":["_","require","FEATURE_NAME","feature","entity","args","typeInfo","name","type","auto","writeOnce","options","featureExtra","startFrom","prefix","Error","length","opt","prefixLength","fixedLength","urlSafe","isEmpty","push","fieldName","addFeature","field","once","addField","setKey","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}