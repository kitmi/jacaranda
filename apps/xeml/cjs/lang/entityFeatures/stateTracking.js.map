{"version":3,"sources":["../../../src/lang/entityFeatures/stateTracking.js"],"sourcesContent":["\"use strict\";\n\nconst { naming } = require('@genx/july');\n\nconst FEATURE_NAME = 'stateTracking';\n\nconst FIELD_NAME_SUFFIX = 'Timestamp';\n\nfunction timestampFieldNaming(field, state) {\n    return field + naming.pascalCase(state) + FIELD_NAME_SUFFIX;\n}\n\n/**\n * A rule specifies the change of state will be tracked automatically.\n * @module EntityFeature_StateTracking\n */\n\n/**\n * Initialize the feature\n * @param {Entity} entity - Entity to apply this feature\n * @param {object} options - Tracking field options\n * @property {string} options.field - State field to track\n * @property {bool} [options.reversible=false] - Specify whether the field can be set to a previous state again\n */\nfunction feature(entity, args = []) {\n    let [ options ] = args;\n    \n    if (!options) {\n        throw new Error('Missing field options!');\n    }\n\n    if (typeof options === 'string') {\n        options = { field: options };\n    }\n\n    if (!options.field) {\n        throw new Error('Missing field name in options!');\n    }\n\n    let stateSetTimestamp = {\n        type: 'datetime',\n        optional: true,\n        auto: true\n    };\n\n    if (!options.reversible) {\n        stateSetTimestamp.writeOnce = true;\n    }\n\n    entity.once('afterAddingFields', () => {\n        if (!entity.hasField(options.field)) {\n            throw new Error('Field \"' + options.field + '\" does not exist!');\n        }\n\n        let fieldInfo = entity.fields[options.field];\n\n        if (fieldInfo.type !== 'enum') {\n            throw new Error('Only enum field can be used with stateTracking feature!');\n        }\n\n        let stateMapping = {};\n\n        fieldInfo.values.forEach(state => {\n            let fieldName = timestampFieldNaming(options.field, state);\n\n            entity.addField(fieldName, stateSetTimestamp);\n            stateMapping[state] = fieldName;\n        });\n\n        entity.addFeature(FEATURE_NAME, {\n            field: options.field,\n            stateMapping\n        }, true);\n    });\n}\n\nmodule.exports = feature;"],"names":["naming","require","FEATURE_NAME","FIELD_NAME_SUFFIX","timestampFieldNaming","field","state","pascalCase","feature","entity","args","options","Error","stateSetTimestamp","type","optional","auto","reversible","writeOnce","once","hasField","fieldInfo","fields","stateMapping","values","forEach","fieldName","addField","addFeature","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;AAEA,MAAM,EAAEA,MAAM,EAAE,GAAGC,QAAQ;AAE3B,MAAMC,eAAe;AAErB,MAAMC,oBAAoB;AAE1B,SAASC,qBAAqBC,KAAK,EAAEC,KAAK;IACtC,OAAOD,QAAQL,OAAOO,UAAU,CAACD,SAASH;AAC9C;AAEA;;;CAGC,GAED;;;;;;CAMC,GACD,SAASK,QAAQC,MAAM,EAAEC,OAAO,EAAE;IAC9B,IAAI,CAAEC,QAAS,GAAGD;IAElB,IAAI,CAACC,SAAS;QACV,MAAM,IAAIC,MAAM;IACpB;IAEA,IAAI,OAAOD,YAAY,UAAU;QAC7BA,UAAU;YAAEN,OAAOM;QAAQ;IAC/B;IAEA,IAAI,CAACA,QAAQN,KAAK,EAAE;QAChB,MAAM,IAAIO,MAAM;IACpB;IAEA,IAAIC,oBAAoB;QACpBC,MAAM;QACNC,UAAU;QACVC,MAAM;IACV;IAEA,IAAI,CAACL,QAAQM,UAAU,EAAE;QACrBJ,kBAAkBK,SAAS,GAAG;IAClC;IAEAT,OAAOU,IAAI,CAAC,qBAAqB;QAC7B,IAAI,CAACV,OAAOW,QAAQ,CAACT,QAAQN,KAAK,GAAG;YACjC,MAAM,IAAIO,MAAM,YAAYD,QAAQN,KAAK,GAAG;QAChD;QAEA,IAAIgB,YAAYZ,OAAOa,MAAM,CAACX,QAAQN,KAAK,CAAC;QAE5C,IAAIgB,UAAUP,IAAI,KAAK,QAAQ;YAC3B,MAAM,IAAIF,MAAM;QACpB;QAEA,IAAIW,eAAe,CAAC;QAEpBF,UAAUG,MAAM,CAACC,OAAO,CAACnB,CAAAA;YACrB,IAAIoB,YAAYtB,qBAAqBO,QAAQN,KAAK,EAAEC;YAEpDG,OAAOkB,QAAQ,CAACD,WAAWb;YAC3BU,YAAY,CAACjB,MAAM,GAAGoB;QAC1B;QAEAjB,OAAOmB,UAAU,CAAC1B,cAAc;YAC5BG,OAAOM,QAAQN,KAAK;YACpBkB;QACJ,GAAG;IACP;AACJ;AAEAM,OAAOC,OAAO,GAAGtB"}