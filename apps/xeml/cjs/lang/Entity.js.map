{"version":3,"sources":["../../src/lang/Entity.js"],"sourcesContent":["\"use strict\";\n\nconst EventEmitter = require('events');\nconst path = require('path');\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable, entityNaming } = require('./GemlUtils');\n\nconst Field = require('./Field');\nconst { Types: { FunctionalQualifiers } } = require('@genx/data');\n\n/**\n * Entity event listener\n * @callback Entity.eventListener\n * returns {*}\n */\n\n/**\n * Geml entity\n * @class Entity\n */\nclass Entity extends Clonable {\n    static overrideEntityMeta(sourceInfo, overrideInfo) {\n        if (overrideInfo.features) {\n            sourceInfo.features = [\n                ...(sourceInfo.features ?? []),\n                ...overrideInfo.features\n            ];\n        }\n\n        if (overrideInfo.fields) {\n            sourceInfo.fields = {\n                ...sourceInfo.fields,\n                ...overrideInfo.fields\n            };\n        }        \n\n        if (overrideInfo.associations) {\n            sourceInfo.associations = [...(sourceInfo.associations ?? []), ...overrideInfo.associations ];\n        }\n\n        if (overrideInfo.indexes) {\n            sourceInfo.indexes = [...(sourceInfo.indexes ?? []), ...overrideInfo.indexes ];\n        }\n\n        if (overrideInfo.inputs) {\n            sourceInfo.inputs = {\n                ...sourceInfo.inputs,\n                ...overrideInfo.inputs\n            };\n        }  \n    }\n\n\n    /**\n     * Fields of the entity, map of <fieldName, fieldObject>\n     * @member {object.<string, Field>}\n     */\n    fields = {};\n\n    /**\n     * Referenced types\n     */\n    types = {};\n\n    /**     \n     * @param {Linker} linker\n     * @param {string} name\n     * @param {*} gemlModule\n     * @param {object} info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n\n        this._events = new EventEmitter();\n\n        /**\n         * Linker to process this entity\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = entityNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Listen on an event\n     * @param {string} eventName\n     * @param {Entity.eventListener} listener\n     * @returns {EventEmitter}\n     */\n    once(eventName, listener) {\n        return this._events.once(eventName, listener);\n    }\n\n    /**\n     * Start linking this entity\n     * @returns {Entity}\n     */\n    link() {\n        pre: !this.linked;\n\n        //1.inherit from base entity if any\n        //2.initialize features\n        //3.add fields        \n        //4.api\n\n        //indexes will processed after processing foreign relationship\n\n        this.linker.log('debug', 'Linking entity [' + this.name + '] ...');\n\n        if (this.info.code) {\n            this.code = this.info.code || this.name;\n        }\n\n        if (this.info.base) {\n            //inherit fields, processed features, key and indexes\n            let baseClasses = _.castArray(this.info.base);\n            baseClasses.reverse().forEach(base => {\n                let baseEntity = this.linker.loadEntity(this.gemlModule, base);\n                assert: baseEntity.linked;\n\n                this._inherit(baseEntity);\n            });            \n\n            this.baseClasses = baseClasses;\n        }\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        /**\n         * @fires Entity#featuresMixingIn\n         */\n        this._events.emit('featuresMixingIn');\n\n        // load features\n        if (this.info.features) {\n            this.info.features.forEach(feature => {\n                let featureName;\n\n                if (typeof feature === 'string') {\n                    featureName = feature;\n                } else {\n                    featureName = feature.name;\n                }\n\n                let fn;\n                \n                try {\n                    fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));\n                } catch (err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        throw new Error(`Unknown feature \"${featureName}\" reference in entity \"${this.name}\"`);\n                    }\n                }\n                fn(this, this.linker.translateOolValue(this.gemlModule, feature.args));\n            });\n        }\n\n        /**\n         * @fires Entity#beforeAddingFields\n         */\n        this._events.emit('beforeAddingFields');\n\n        // process fields\n        if (this.info.fields) {\n            _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));\n        }\n\n        /**\n         * @fires Entity#afterAddingFields\n         */\n        this._events.emit('afterAddingFields');   \n\n        if (this.info.key) {\n            this.key = this.info.key;\n\n            if (Array.isArray(this.key) && this.key.length === 1) {\n                this.key = this.key[0];\n            }\n        }\n\n        if (this.info.inputs) {\n            this.inputs = this.info.inputs;\n        }\n\n        /**\n         * @fires Entity#beforeAddingInterfaces\n         */\n        this._events.emit('beforeAddingInterfaces');        \n        \n        if (!_.isEmpty(this.info.interfaces)) {\n            this.interfaces = _.cloneDeep(this.info.interfaces);\n\n            _.forOwn(this.interfaces, (intf) => {\n                if (!_.isEmpty(intf.accept)) {\n                    intf.accept = _.map(intf.accept, param => {                        \n                        const [ typeInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, param);\n                        if (baseInfo != null) {\n                            this.addUsedType(param.type, baseInfo.gemlModule.id);\n                        }                        \n                        return typeInfo;\n\n                    });\n                }\n            });\n        }\n\n        /**\n         * @fires Entity#afterAddingInterfaces\n         */\n        this._events.emit('afterAddingInterfaces');        \n\n        this.linked = true;\n\n        return this;\n    }\n\n    addUsedType(type, typeLocation) {\n        const existing = this.types[type];\n        if (existing == null) {\n            this.types[type] = typeLocation;\n        } else {\n            if (existing !== typeLocation) {\n                //should never happen\n                throw new Error('Different used types appear in the same entity!');\n            }\n        }\n    }\n\n    /**\n     * Check whether the entity has an index on the given fields\n     * @param {array} fields\n     * @returns {boolean}\n     */\n    hasIndexOn(fields) {\n        fields = fields.concat();\n        fields.sort();\n\n        return _.findIndex(this.indexes, index => {\n                return _.findIndex(index.fields, (f, idx) => (fields.length <= idx || fields[idx] !== f)) === -1;\n            }) != -1;\n    }\n\n    /**\n     * Add all indexes\n     */\n    addIndexes() {\n        if (this.info.indexes) {\n            _.each(this.info.indexes, index => {\n                this.addIndex(index);\n            });\n        }\n    }\n\n    /**\n     * Add an index\n     * @param {object} index\n     * @property {array} index.fields - Fields of the index\n     * @property {bool} index.unique - Flag of uniqueness of the index\n     * @returns {Entity}\n     */\n    addIndex(index) {\n        if (!this.indexes) {\n            this.indexes = [];\n        }\n\n        index = _.cloneDeep(index);\n\n        assert: index.fields;\n\n        if (!_.isArray(index.fields)) {\n            index.fields = [ index.fields ];\n        }\n\n        let fields = index.fields; \n\n        index.fields = _.map(fields, field => {\n\n            let normalizedField = field;//_.camelCase(field);\n\n            if (!this.hasField(normalizedField)) {\n\n                throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);\n            }\n\n            return normalizedField;\n        });\n\n        index.fields.sort();\n\n        if (this.hasIndexOn(index.fields)) {\n            throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);\n        }\n\n        this.indexes.push(index);\n\n        return this;\n    }\n\n    /**\n     * Get a field object by field name or entity meta accesor (e.g. $key, $feature).\n     * @param fieldId\n     * @returns {Field}\n     */\n    getEntityAttribute(fieldId) {\n        if (fieldId[0] === '$') {\n            let token = fieldId.substr(1);\n\n            switch (token) {\n                case \"key\":\n                    if (Array.isArray(this.key)) {\n                        throw new Error('Combination key not support for accesor \"$key\".');\n                    }\n                    return this.fields[this.key];\n\n                case 'feature':\n                    return this.features;\n\n                default:\n                    throw new Error(`Filed accessor \"${token}\" not supported!`);\n            }\n        } else {\n            if (!this.hasField(fieldId)) {\n                throw new Error(`Field \"${fieldId}\" not exists in entity \"${this.name}\".`)\n            }\n\n            return this.fields[fieldId];\n        }\n    }\n\n    /**\n     * Check whether the entity has a field with given name\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasField(name) {\n        if (Array.isArray(name)) {\n            return _.every(name, fn => this.hasField(fn));\n        }\n\n        return name in this.fields;\n    }\n\n    /**\n     * Add association, dbms-specific\n     * @param {*} name \n     * @param {*} props \n     * @example\n     * e.g. mysql\n     *  entity - Associated entity name\n     *  join - Join type, e.g. INNER, LEFT, RIGHT, OUTER\n     *  exclude - Exclude in output columns\n     *  alias - Alias \n     *  on - On conditions\n     *  dataset - Sub query\n     *  assocs - Child associations\n     *  optional - Optional\n     *  'default' - Default value\n     *  list - Is a list\n     */\n    addAssociation(name, props) {\n        if (!this.associations) {\n            this.associations = {};\n        }    \n\n        if (name in this.associations) {\n            throw new Error(`Association \"${name}\" already exists in entity \"${this.name}\". Props: ` + JSON.stringify(props));\n        }\n\n        this.associations[name] = props;\n    }\n\n    /**\n     * Add a association field.\n     * @param {string} name\n     * @param {Entity} destEntity\n     * @param {Field} destField\n     */\n    addAssocField(name, destEntity, destField, extraProps) {\n        let localField = this.fields[name];\n\n        if (localField) {            \n            throw new Error(`Field \"${name}\" already exists in entity \"${this.name}\".`);\n        }\n\n        let destFieldInfo = _.omit(destField.toJSON(), FunctionalQualifiers);\n        Object.assign(destFieldInfo, extraProps);       \n\n        this.addField(name, destFieldInfo);    \n        //this.fields[name].displayName = fieldNaming(prefixNaming(destEntity.name, destField.name));   \n    }\n\n    /**\n     * Add a field into the entity\n     * @param {string} name\n     * @param {object} rawInfo\n     * @returns {Entity}\n     */\n    addField(name, rawInfo) {        \n        if (this.hasField(name)) {\n            throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);\n        }\n\n        assert: rawInfo.type;\n\n        let field;\n\n        if (rawInfo instanceof Field) {\n            field = rawInfo.clone();\n            field.name = name; // todo: displayName\n        } else {            \n            let [ fullRawInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, rawInfo);      \n            if (baseInfo != null) {      \n                this.addUsedType(rawInfo.type, baseInfo.gemlModule.id);\n            }\n\n            field = new Field(name, fullRawInfo);\n            field.link();\n        }                \n        \n        this.fields[name] = field;\n\n        if (!this.key) {\n            //make the first field as the default key\n            this.key = name;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a feature into the entity, e.g. auto increment id\n     * @param {string} name\n     * @param {*} feature\n     * @param {bool} [allowMultiple=false] - Allow multiple occurrence\n     * @returns {Entity}\n     */\n    addFeature(name, feature, allowMultiple) {\n        if (!this.features) {\n            this.features = {};\n        }\n\n        if (allowMultiple) {\n            if (!this.features[name]) {\n                this.features[name] = [];\n            }\n\n            this.features[name].push(feature);\n        } else {\n            if (name in this.features) {\n                throw new Error(`Duplicate feature found: ${name}. An entity can only have one \"${name}\" feature only. Entity: ${this.name}`);\n            }\n\n            this.features[name] = feature;\n        }\n\n        return this;\n    }\n\n    hasFeature(name) {\n        return this.features && (name in this.features);\n    }\n\n    /**\n     * Set key name\n     * @param {string|array.<string>} name - Field name to be used as the key\n     * @returns {Entity}\n     */\n    setKey(name) {\n        this.key = name;\n        return this;\n    }\n\n    getReferencedEntity(entityName) {\n        return this.linker.loadEntity(this.gemlModule, entityName);    \n    }\n\n    /**\n     * Returns the association info if there is connection to the given destination entity.\n     */\n    getReferenceTo(entityName, includes, excludes) {\n        return this.info.associations && _.find(\n            this.info.associations, assoc => {\n                if (includes) {\n                    if (_.find(includes, (value, prop) => typeof value === 'function' ? !value(assoc[prop]) : !_.isEqual(assoc[prop], value))) return false;\n                }\n\n                if (excludes) {\n                    if (excludes.association && assoc === excludes.association) return false;\n                    if (excludes.type && assoc.type === excludes.type) return false;\n                    if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;\n                    if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;\n                    if (excludes.props && _.find(excludes.props, prop => assoc[prop])) return false;\n                }\n\n                return assoc.destEntity === entityName;\n            }\n        );\n    }\n\n    /**\n     * Get key field \n     * @returns {*}\n     */\n    getKeyField() {\n        return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];\n    }\n\n    /**\n     * Clone the entity\n     * @param {Map} [stack] - Reference stack to avoid recurrence copy\n     * @returns {Entity}\n     */\n    clone() {        \n        super.clone();\n\n        let entity = new Entity(this.linker, this.name, this.gemlModule, this.info);        \n\n        deepCloneField(this, entity, 'code');\n        deepCloneField(this, entity, 'displayName');\n        deepCloneField(this, entity, 'comment');\n        deepCloneField(this, entity, 'features');\n        deepCloneField(this, entity, 'fields');\n        deepCloneField(this, entity, 'types');    \n        deepCloneField(this, entity, 'associations');        \n        deepCloneField(this, entity, 'key');        \n        deepCloneField(this, entity, 'indexes');    \n        deepCloneField(this, entity, 'inputs');        \n        deepCloneField(this, entity, 'interfaces');\n\n        entity.linked = true;\n\n        return entity;\n    }\n \n    /**\n     * Translate the entity into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,     \n            code: this.code,            \n            displayName: this.displayName,\n            comment: this.comment,            \n            ...(this.baseClasses ? { baseClasses: this.baseClasses } : {}),\n            features: this.features,            \n            types: this.types,  \n            fields: _.mapValues(this.fields, field => field.toJSON()),\n            associations: this.associations,\n            key: this.key,\n            indexes: this.indexes\n        };\n    }\n\n    _inherit(baseEntity) {  \n        let overrideInfo = {};\n\n        if (baseEntity.baseClasses) {\n            let baseClasses = baseEntity.baseClasses;\n\n            if (this.baseClasses) {\n                this.baseClasses = _.uniq(baseClasses.concat(this.baseClasses));\n            } else {\n                this.baseClasses = baseClasses.concat();\n            }\n        }\n\n        if (!_.isEmpty(baseEntity.info.features)) {\n            let baseFeatures = _.cloneDeep(baseEntity.info.features);          \n            \n            if (this.info.features) {\n                overrideInfo.features = baseFeatures.concat(this.info.features);\n            } else {\n                overrideInfo.features = baseFeatures;\n            }\n        }        \n        \n        if (!_.isEmpty(baseEntity.info.fields)) {\n            let fields = _.cloneDeep(baseEntity.info.fields);\n            overrideInfo.fields = { ...fields, ...this.info.fields };\n        }\n        \n        if (baseEntity.info.key) {\n            overrideInfo.key = baseEntity.info.key;\n        }         \n        \n        if (baseEntity.info.indexes) {\n            let indexes = _.cloneDeep(baseEntity.info.indexes);\n            let uniqueIndexes = indexes.filter(index => index.unique);\n\n            if (this.info.indexes) {\n                this.info.indexes.forEach(index => {\n                    //if unique scope changed\n                    if (index.unique) {\n                        uniqueIndexes.forEach(inheritedIndex => {                            \n                            const fields1 = _.castArray(index.fields);\n                            const fields2 = _.castArray(inheritedIndex.fields);\n\n                            if (_.intersection(fields1, fields2).length === fields2.length) {\n                                //fully included\n                                const pos = indexes.indexOf(inheritedIndex);\n                                if (pos !== -1) {\n                                    indexes.splice(pos, 1);\n                                }                                \n                            }\n                        });\n                    }\n                })\n\n                indexes = indexes.concat(this.info.indexes);\n            }\n\n            overrideInfo.indexes = indexes;\n        }        \n\n        if (baseEntity.info.associations) {\n            let assocs = _.cloneDeep(baseEntity.info.associations);\n\n            assocs = assocs.map(assoc => {\n                if (assoc.destEntity === baseEntity.name) {\n                    return {\n                        ...assoc,\n                        destEntity: this.name\n                    };\n                }\n\n                return assoc;\n            });        \n\n            if (this.info.associations) {\n                assocs = assocs.concat(this.info.associations);\n            }       \n            \n            overrideInfo.associations = assocs;\n        }     \n\n        if (baseEntity.inputs) {\n            overrideInfo.inputs = { ...baseEntity.inputs, ...this.info.inputs };\n        }\n\n        if (!_.isEmpty(overrideInfo)) {                    \n            this.info = { ...this.info, ...overrideInfo };\n        }\n    }\n}\n\nmodule.exports = Entity;"],"names":["EventEmitter","require","path","_","generateDisplayName","deepCloneField","Clonable","entityNaming","Field","Types","FunctionalQualifiers","Entity","overrideEntityMeta","sourceInfo","overrideInfo","features","fields","associations","indexes","inputs","once","eventName","listener","_events","link","pre","linked","linker","log","name","info","code","base","baseClasses","castArray","reverse","forEach","baseEntity","loadEntity","gemlModule","assert","_inherit","comment","displayName","emit","feature","featureName","fn","resolve","__dirname","err","Error","translateOolValue","args","each","fieldInfo","fieldName","addField","key","Array","isArray","length","isEmpty","interfaces","cloneDeep","forOwn","intf","accept","map","param","typeInfo","baseInfo","trackBackType","addUsedType","type","id","typeLocation","existing","types","hasIndexOn","concat","sort","findIndex","index","f","idx","addIndexes","addIndex","field","normalizedField","hasField","join","push","getEntityAttribute","fieldId","token","substr","every","addAssociation","props","JSON","stringify","addAssocField","destEntity","destField","extraProps","localField","destFieldInfo","omit","toJSON","Object","assign","rawInfo","clone","fullRawInfo","addFeature","allowMultiple","hasFeature","setKey","getReferencedEntity","entityName","getReferenceTo","includes","excludes","find","assoc","value","prop","isEqual","association","indexOf","getKeyField","kf","entity","mapValues","uniq","baseFeatures","uniqueIndexes","filter","unique","inheritedIndex","fields1","fields2","intersection","pos","splice","assocs","constructor","module","exports"],"rangeMappingsmappings":"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"}