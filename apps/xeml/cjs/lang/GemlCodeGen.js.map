{"version":3,"sources":["../../src/lang/GemlCodeGen.js"],"sourcesContent":["\"use strict\";\n\nconst { _, quote } = require('@genx/july');\nconst { generateDisplayName } = require('./GemlUtils');\nconst { isNothing, isQuotedWith } = require('../utils/lang');\n\nconst KW_NAMESPACE = 'import';\nconst KW_SCHEMA = 'schema';\nconst KW_ENTITIES = 'entities';\nconst KW_ENTITY_AS_ALIAS = 'as';\nconst KW_TYPE_DEFINE = 'type';\nconst KW_ENTITY = 'entity';\nconst KW_CODE = 'code';\nconst KW_COMMENT = '--';\nconst KW_WITH_FEATURE = 'with';\nconst KW_FIELDS = 'has';\nconst KW_ASSOCIATIONS = 'associations';\nconst KW_KEY = 'key';\nconst KW_INDEXES = 'index';\n\nconst { Types } = require('@genx/data');\nconst GemlTypes = require('./GemlTypes');\n\nclass GemlCodeGen {\n    static transform(json, options) {\n        let codeGen = new GemlCodeGen(options);\n        return codeGen.generate(json);\n    }\n\n    indented = 0;\n    content = '';\n\n    constructor(options) {\n        this.options = options;\n    }\n\n    generate(json) {\n        this.generateObject(json);\n\n        return this.content;\n    }\n\n    appendLine(line) {\n        if (line) {\n            if (arguments.length > 1) {\n                line = [ ...arguments].join(' ');\n            }\n\n            this.content += (this.indented > 0 ? _.repeat(' ', this.indented) : '') + line + '\\n';\n        } else {\n            this.content += '\\n';\n        }\n        return this;\n    }\n\n    indent() {\n        this.indented += 2;\n        return this;\n    }\n\n    dedent() {\n        this.indented -= 2;\n        return this;\n        post: this.indented >= 0, 'Unexpected indented state.';\n    }\n\n    generateObject(obj) {\n        _.forOwn(obj, (v,k) => {\n            let generateMethod = 'generate_' + k;\n\n            if (generateMethod in this) {\n                return this[generateMethod](v);\n            }\n\n            throw new Error('to be implemented, object: ' + k);\n        });\n    }\n\n    generate_namespace(namespaces) {\n        pre: {\n            Array.isArray(namespaces), 'Invalid namespaces.';\n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        if (namespaces.length > 0) {\n            this.appendLine(KW_NAMESPACE).indent();\n\n            namespaces.forEach(ns => {\n                this.appendLine(quote(ns, \"'\"));\n            });\n\n            this.dedent().appendLine();\n        }\n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    generate_schema(schema) {\n        pre: {            \n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        _.forOwn(schema, (schemaInfo, name) => {\n            this.appendLine(KW_SCHEMA, quote(name, \"'\")).indent();\n\n            if (schemaInfo.entities) {\n                this.appendLine(KW_ENTITIES).indent();\n\n                schemaInfo.entities.forEach(entityEntry => {\n                    if (entityEntry.alias) {\n                        this.appendLine(entityEntry.entity, KW_ENTITY_AS_ALIAS, entityEntry.alias);\n                    } else {\n                        this.appendLine(entityEntry.entity);\n                    }\n                });\n\n                this.dedent().appendLine();\n            }\n\n            this.dedent();\n        });        \n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    generate_type(types) {\n        pre: {\n            _.isPlainObject(types), 'Invalid types.';\n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        if (!_.isEmpty(types)) {\n            this.appendLine(KW_TYPE_DEFINE).indent();\n\n            _.forOwn(types, (type, name) => {\n                let lineInfo = [ name, ':', type.type ];\n\n                this._translateType(type, lineInfo);\n\n                this.appendLine(...lineInfo);\n            });\n\n            this.dedent().appendLine();\n        }\n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    generate_field_comment(entityName, colName) {\n        let colNameFullSnake = _.trimStart(_.snakeCase(colName), '_');\n        let  [ colNameFirstWord, colNameRest ] = colNameFullSnake.split('_', 2);\n\n        let result;\n\n        let entityNameFullSnake = _.trim(_.snakeCase(entityName), '_');\n        if (_.endsWith(entityNameFullSnake, colNameFirstWord)) {\n            result = entityNameFullSnake;\n            \n            if (colNameRest) {\n                result += '_' + colNameRest;\n            }\n        } else {\n            result = entityNameFullSnake + '_' + colNameFullSnake;\n        }\n\n        return generateDisplayName(result);\n    }\n\n    generate_entity(entities) {\n        pre: {\n            _.isPlainObject(entities), 'Invalid entities.';\n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        _.forOwn(entities, (entity, enityName) => {\n            this.appendLine(KW_ENTITY, enityName).indent();\n\n            if (entity.code) {\n                this.appendLine(KW_CODE, quote(entity.code));\n            }\n\n            this.appendLine(KW_COMMENT, quote(entity.comment || generateDisplayName(enityName)));\n\n            let hasAutoId = false;\n\n            if (!_.isEmpty(entity.features)) {\n                this.appendLine(KW_WITH_FEATURE).indent();\n\n                entity.features.forEach(feature => {\n                    if (typeof feature === 'string') {\n                        feature = { name: feature };\n                    }\n\n                    if (feature.name === 'autoId') {\n                        hasAutoId = true;\n                    }\n\n                    if (feature.args) {\n                        this.appendLine(feature.name + '(' + feature.args.map(a => JSON.stringify(a)).join(', ') + ')');\n                    } else {\n                        this.appendLine(feature.name);\n                    }\n                });\n\n                this.dedent();\n            }\n\n            if (!_.isEmpty(entity.fields)) {\n                this.appendLine().appendLine(KW_FIELDS).indent();\n\n                _.forOwn(entity.fields, (field, name) => {\n                    assert: field.type;                    \n\n                    let lineInfo = [];\n                    lineInfo.push(Types.Builtin.has(name) ? quote(name) : name);                    \n                    \n                    if (field.type !== name) {\n                        lineInfo.push(':');\n                        lineInfo.push(field.type);\n                    }                  \n\n                    this._translateType(field, lineInfo);\n\n                    lineInfo.push(KW_COMMENT + ' ' + quote(field.comment || this.generate_field_comment(enityName, name)));\n\n                    this.appendLine(...lineInfo);\n                });\n\n                this.dedent();\n            }\n\n            if (!_.isEmpty(entity.associations)) {\n                this.appendLine().appendLine(KW_ASSOCIATIONS).indent();\n\n                entity.associations.forEach(({ type, srcField, destEntity, connectedBy }) => {\n                    if (srcField) {\n                        this.appendLine(type, quote(destEntity, \"'\"), 'as', quote(srcField, \"'\"));\n                    } else if (connectedBy) {\n                        this.appendLine(type, quote(destEntity, \"'\"), 'connectedBy', quote(connectedBy, \"'\"));\n                    } else {\n                        this.appendLine(type, quote(destEntity, \"'\"));\n                    }                    \n                });\n\n                this.dedent();\n            }\n\n            if (entity.key && !hasAutoId) {\n                let key = (Array.isArray(entity.key) && entity.key.length === 1) ? entity.key[0] : entity.key;\n                if (Array.isArray(key)) {\n                    this.appendLine().appendLine(KW_KEY, '[ ' + key.join(', ') + ' ]');\n                } else {\n                    this.appendLine().appendLine(KW_KEY, key);\n                }                \n            }\n\n            if (!_.isEmpty(entity.indexes)) {\n                this.appendLine().appendLine(KW_INDEXES).indent();\n\n                entity.indexes.forEach(i => {\n                    let indexInfo = [];\n\n                    if (Array.isArray(i.fields)) {\n                        indexInfo.push('[' + i.fields.join(', ') + ']');\n                    } else {\n                        indexInfo.push(i.fields);\n                    }\n\n                    if (i.unique) {\n                        indexInfo.push('is');\n                        indexInfo.push('unique');\n                    }\n\n                    this.appendLine(...indexInfo);\n                });\n\n                this.dedent();\n            }\n\n            this.dedent();\n        });\n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    _translateType(field, lineInfo) {\n        let extraTypeInfo = _.omit(field, ['type', 'modifiers', 'name']);\n        //let typeMeta = Types[field.type];\n        _.forOwn(extraTypeInfo, (v, k) => {\n            //if (!typeMeta.qualifiers.includes(k)) {\n            //    throw new Error(`\"${k}\" is not a valid qualifier for type \"${field.type}\".`);\n            //}\n            if (k === 'comment') return;\n\n            if (typeof v === 'boolean' || isNothing(v)) {\n                if (v) {\n                    lineInfo.push(k);\n                }\n            } else {\n                v = _.castArray(v);\n                lineInfo.push(k + '(' + this._translateArgs(v) + ')');\n            }\n        });\n\n        if (field.modifiers) {\n            this._translatePipedValue(lineInfo, field);\n        }        \n    }\n\n    _translatePipedValue(lineInfo, value) {        \n        if (value.modifiers) {\n            value.modifiers.forEach(v => {\n                switch (v.oolType) {\n                    case GemlTypes.Lang.VALIDATOR:\n                    lineInfo.push('|~' + this._translateModifier(v));\n                    break;\n\n                    case GemlTypes.Lang.PROCESSOR:\n                    lineInfo.push('|>' + this._translateModifier(v));\n                    break;\n\n                    case GemlTypes.Lang.ACTIVATOR:\n                    lineInfo.push('|=' + this._translateModifier(v));\n                    break;\n\n                    default:\n                        throw new Error(`Unknown modifier type: \"${v.oolType}\"!`);\n                }                                \n            });\n        } \n    }\n\n    _translateModifier(f) {\n        let r = f.name;\n\n        if (!_.isEmpty(f.args)) {\n            r += '(';\n\n            r += this._translateArgs(f.args);\n\n            r += ')';\n        }\n\n        return r;\n    }\n\n    _translateArgs(args) {\n        return args.map(a => this._translateArg(a)).join(', ');\n    }\n\n    _translateArg(a) {\n        if (_.isPlainObject(a) && a.hasOwnProperty('oolType')) {\n            if (a.oolType === 'PipedValue') {\n                let pipeline = [ this._translateArg(a.value) ];\n\n                if (a.modifiers) {\n                    this._translatePipedValue(pipeline, a);\n                }\n\n                return pipeline.join(' ');\n            } else if (a.oolType === 'ObjectReference') {\n                return '@' + a.name;\n            } else {\n                throw new Error('Not supported oolType: ' + a.oolType);\n            }\n        } \n\n        if (typeof a === 'string' && isQuotedWith(a, '/')) return a;\n        \n        return JSON.stringify(a);\n    }\n}\n\nmodule.exports = GemlCodeGen;"],"names":["_","quote","require","generateDisplayName","isNothing","isQuotedWith","KW_NAMESPACE","KW_SCHEMA","KW_ENTITIES","KW_ENTITY_AS_ALIAS","KW_TYPE_DEFINE","KW_ENTITY","KW_CODE","KW_COMMENT","KW_WITH_FEATURE","KW_FIELDS","KW_ASSOCIATIONS","KW_KEY","KW_INDEXES","Types","GemlTypes","GemlCodeGen","transform","json","options","codeGen","generate","generateObject","content","appendLine","line","arguments","length","join","indented","repeat","indent","dedent","post","obj","forOwn","v","k","generateMethod","Error","generate_namespace","namespaces","pre","Array","isArray","forEach","ns","generate_schema","schema","schemaInfo","name","entities","entityEntry","alias","entity","generate_type","types","isPlainObject","isEmpty","type","lineInfo","_translateType","generate_field_comment","entityName","colName","colNameFullSnake","trimStart","snakeCase","colNameFirstWord","colNameRest","split","result","entityNameFullSnake","trim","endsWith","generate_entity","enityName","code","comment","hasAutoId","features","feature","args","map","a","JSON","stringify","fields","field","assert","push","Builtin","has","associations","srcField","destEntity","connectedBy","key","indexes","i","indexInfo","unique","extraTypeInfo","omit","castArray","_translateArgs","modifiers","_translatePipedValue","value","oolType","Lang","VALIDATOR","_translateModifier","PROCESSOR","ACTIVATOR","f","r","_translateArg","hasOwnProperty","pipeline","constructor","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}