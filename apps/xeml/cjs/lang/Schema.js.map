{"version":3,"sources":["../../src/lang/Schema.js"],"sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable, schemaNaming } = require('./GemlUtils');\n\n/**\n * Geml schema class.\n * @class Schema\n */\nclass Schema extends Clonable {\n    /**\n     * Types in this schema, map of <typeName, typeInfo>\n     * @member {object.<String, Object>}\n     */\n     types = {};\n\n    /**\n     * Entities in this schema, map of <entityName, entityObject>\n     * @member {object.<string, Entity>}\n     */\n    entities = {};\n\n    /**\n     * Datasets, dataset = entity + relations + projection\n     * @member {object}\n     */\n    datasets = {};\n\n    /**\n     * Views, view = dataset + filters \n     * @member {object}\n     */\n    views = {};    \n\n    /**     \n     * @param {Linker} linker\n     * @param {string} name     \n     * @param {object} info\n     */\n    constructor(linker, name, info) {\n        super();\n\n        /**\n         * Linker to process this schema\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = schemaNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = this.linker.entryModule;\n\n        /**\n         * Raw metadata\n         * @member {object}\n         */\n        this.info = info;       \n    }\n\n    /**\n     * Start linking this schema\n     * @returns {Schema}\n     */\n    link() {\n        pre: !this.linked;\n\n        this.linker.log('verbose', 'Linking schema [' + this.name + '] ...');\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        //1st round, get direct output entities\n        this.info.entities || (this.info.entities = []);\n\n        this.info.entities.forEach(entityEntry => {            \n            let entity = this.linker.loadEntity(this.gemlModule, entityEntry.entity);\n            if (!entity.linked) {\n                throw new Error(`Entity [${entity.name}] not linked after loading.`);\n            }\n\n            this.addEntity(entity);\n        });\n\n        if (!_.isEmpty(this.info.views)) {\n            this.info.views.forEach(viewName => {\n                let view = this.linker.loadView(this.gemlModule, viewName);\n                if (!view.linked) {\n                    throw new Error(`View [${entity.name}] not linked after loading.`);\n                }\n\n                this.addView(view);\n            });\n        }\n\n        this.linked = true;\n\n        return this;\n    }\n\n    /**\n     * Add an type into the schema\n     * @param {*} type \n     * @param {*} typeLocation \n     * @returns \n     */\n    addType(type, typeLocation) {\n        const existing = this.types[type];\n        if (existing == null) {\n            this.types[type] = typeLocation;\n        } else {\n            if (existing !== typeLocation) {\n                //should never happen\n                throw new Error('Different used types appear in the same entity!');\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Check whether a entity with given name is in the schema\n     * @param {string} entityName\n     * @returns {boolean}\n     */\n    hasEntity(entityName) {\n        return (entityName in this.entities);\n    }\n\n    /**\n     * Add an entity into the schema\n     * @param {Entity} entity\n     * @returns {Schema}\n     */\n    addEntity(entity) {\n        if (this.hasEntity(entity.name)) {\n            throw new Error(`Entity name [${entity.name}] conflicts in schema [${this.name}].`);\n        }\n\n        this.entities[entity.name] = entity;\n\n        _.each(entity.types, (info, type) => this.addType(type, info));\n\n        return this;\n    }\n\n    /**\n     * Check whether a view with given name is in the schema\n     * @param {string} viewName\n     * @returns {boolean}\n     */\n    hasView(viewName) {\n        return (viewName in this.views);\n    }\n\n    /**\n     * Add a view into the schema\n     * @param {View} view \n     * @returns {Schema}\n     */\n    addView(view) {\n        pre: !this.hasView(view.name), `View name [${view.name}] conflicts in schema [${this.name}].`;\n\n        this.views[view.name] = view;\n\n        return this;\n    }\n\n    /**\n     * Get a document hierarchy\n     * @param {object} fromModule\n     * @param {string} datasetName\n     * @returns {object}\n     */\n    getDocumentHierachy(fromModule, datasetName) {\n        if (datasetName in this.datasets) {\n            return this.datasets[datasetName];\n        }\n\n        let dataset = this.linker.loadDataset(fromModule, datasetName);\n        return (this.datasets[datasetName] = dataset.buildHierarchy(this));\n    }\n\n    /**\n     * Get the referenced entity, add it into schema if not in schema\n     * @param {object} refererModule\n     * @param {string} entityName\n     * @returns {Entity}\n     */\n    getReferencedEntity(refererModule, entityName) {\n        let entity = this.linker.loadEntity(refererModule, entityName);\n\n        if (!this.hasEntity(entity.name)) {\n            throw new Error(`Entity \"${entity.name}\" not exists in schema \"${this.name}\".`);\n        }\n\n        return entity;\n    }\n\n    /**\n     * \n     * @param {*} refererModule \n     * @param {*} entityName \n     */\n    ensureGetEntity(refererModule, entityName, newlyAdded) {\n        if (this.hasEntity(entityName)) return this.entities[entityName];\n\n        let entity = this.linker.loadEntity(refererModule, entityName, false);\n\n        if (entity) {\n            this.addEntity(entity);   \n\n            if (newlyAdded) {\n                newlyAdded.push(entity.name);\n                this.linker.log('debug', `New entity \"${entity.name}\" added by association.`);\n            }\n        }\n\n        return entity;\n    }\n\n    /**\n     * Clone the schema\n     * @returns {Schema}\n     */\n    clone() {\n        super.clone();\n        \n        let schema = new Schema(this.linker, this.name, this.info);\n        \n        deepCloneField(this, schema, 'displayName');\n        deepCloneField(this, schema, 'comment');        \n        deepCloneField(this, schema, 'entities');   \n        deepCloneField(this, schema, 'types');        \n        deepCloneField(this, schema, 'datasets');\n        deepCloneField(this, schema, 'views');        \n\n        schema.linked = true;\n\n        return schema;\n    }\n\n    /**\n     * Translate the schema into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            displayName: this.displayName,\n            comment: this.comment,        \n            entities: _.mapValues(this.entities, entity => entity.toJSON()),   \n            types: this.types,         \n            datasets: _.mapValues(this.datasets, dataset => dataset.toJSON()), \n            views: _.mapValues(this.views, view => view.toJSON()) \n        };\n    }\n}\n\nmodule.exports = Schema;"],"names":["_","require","generateDisplayName","deepCloneField","Clonable","schemaNaming","Schema","link","pre","linked","linker","log","name","info","comment","displayName","entities","forEach","entityEntry","entity","loadEntity","gemlModule","Error","addEntity","isEmpty","views","viewName","view","loadView","addView","addType","type","typeLocation","existing","types","hasEntity","entityName","each","hasView","getDocumentHierachy","fromModule","datasetName","datasets","dataset","loadDataset","buildHierarchy","getReferencedEntity","refererModule","ensureGetEntity","newlyAdded","push","clone","schema","toJSON","mapValues","constructor","entryModule","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}