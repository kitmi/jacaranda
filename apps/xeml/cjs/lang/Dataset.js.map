{"version":3,"sources":["../../src/lang/Dataset.js"],"sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst { deepCloneField, Clonable, isDotSeparateName } = require('./GemlUtils');\n\n/**\n * Geml dataset class.\n * @class Dataset\n */\nclass Dataset extends Clonable {\n    /**     \n     * @param {Linker} linker\n     * @param {string} name - Dataset name\n     * @param {object} gemlModule - Source ool module\n     * @param {object} info - Dataset info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n        \n        /**\n         * Linker to process this document\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this document\n         * @member {string}\n         */\n        this.name = _.camelCase(name);\n\n        /**\n         * Owner oolong module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;\n    }\n\n    /**\n     * Start linking this dataset\n     * @returns {Dataset}\n     */\n    link() {\n        pre: !this.linked;\n\n        if (this.info.entity) {\n            let entity = this.linker.getReferencedEntity(this.gemlModule, this.info.entity);\n            this.mainEntity = entity.name;\n        } else {\n            let dataset = this.linker.loadDataset(this.gemlModule, this.info.dataset);\n            assert: dataset.linked;\n\n            this.mainEntity = dataset.mainEntity;\n            this.joinWith = _.cloneDeep(dataset.joinWith);\n        }\n        \n        if (!_.isEmpty(this.info.joinWith)) {\n            if (!this.joinWith) {\n                this.joinWith = _.cloneDeep(this.info.joinWith);\n            } else {\n                this.joinWith = this.joinWith.concat(this.info.joinWith);\n            }\n        }\n\n        this.linked = true;\n\n        return this;\n    }\n\n    buildHierarchy(inSchema) {\n        return this._flattenDataset(inSchema, this);\n    }\n\n    _flattenDataset(inSchema, dataset) {\n        let hierarchy = {};\n        let leftEntity = inSchema.entities[dataset.mainEntity];\n\n        if (dataset.joinWith) {\n            dataset.joinWith.forEach(joining => {\n                let leftField, rightEntity, rightField;\n\n                if (isDotSeparateName(joining.on.left)) {\n                    let lastPos = joining.on.left.lastIndexOf('.');\n                    let fieldRef = joining.on.left.substr(lastPos+1);\n                    let entityRef = joining.on.left.substr(0, lastPos);\n\n                    if (entityRef === leftEntity.name) {\n                        leftField = leftEntity.getEntityAttribute(fieldRef);\n                    } else {\n                        throw new Error(`Unsupported syntax of left side joining field \"${joining.on.left}\".`);\n                    }\n\n                } else {\n                    //field of leftEntity\n                    leftField = leftEntity.getEntityAttribute(joining.on.left);\n                }\n\n                if (joining.dataset) {\n                    let rightHierarchy = inSchema.getDocumentHierachy(this.gemlModule, joining.dataset);\n\n                    if (isDotSeparateName(joining.on.right)) {\n                        let parts = joining.on.right.split('.');\n                        if (parts.length > 2) {\n                            throw new Error('Joining a document should only referencing to a field of its main entity.');\n                        }\n\n                        let [ entityRef, fieldRef ] = parts;\n\n                        if (entityRef !== rightHierarchy.entity) {\n\n                            throw new Error(`Referenced field \"${joining.on.right}\" not found while linking to document \"${joining.dataset}\".`);\n                        }\n\n                        assert: !hierarchy[leftField.name], 'Duplicate joinings on the same field of the left side entity.';\n\n                        rightEntity = inSchema.entities[entityRef];\n                        rightField = rightEntity.getEntityAttribute(fieldRef);\n\n                        hierarchy[leftField.name] = Object.assign({}, rightHierarchy, {\n                            linkWithField: rightField.name\n                        });\n\n                        return;\n                    }\n\n                    //joining.on.right is field name of the main entity\n                    rightEntity = inSchema.entities[joining.dataset.mainEntity];\n                } else {\n                    rightEntity = inSchema.entities[joining.entity];\n\n                    if (isDotSeparateName(joining.on.right)) {\n                        throw new Error(`Referenced field \"${joining.on.right}\" not found while linking to entity \"${joining.entity}\".`);\n                    }\n                }\n\n                //field of rightEntity\n                rightField = rightEntity.getEntityAttribute(joining.on.right);\n\n                assert: !hierarchy[leftField.name], 'Duplicate joinings on the same field of the left side entity.';\n\n                hierarchy[leftField.name] = {\n                    oolType: 'DocumentHierarchyNode',\n                    entity: rightEntity.name,\n                    linkWithField: rightField.name\n                };\n            });\n        }\n\n        return {\n            oolType: 'DocumentHierarchyNode',\n            entity: leftEntity.name,\n            subDocuments: hierarchy\n        };\n    }\n\n    /**\n     * Clone the document\n     * @returns {Dataset}\n     */\n    clone() {\n        super.clone();\n\n        let dataset = new Dataset(this.linker, this.name, this.gemlModule, this.info);\n\n        dataset.mainEntity = this.mainEntity;\n        deepCloneField(this, dataset, 'joinWith');\n\n        dataset.linked = true;\n\n        return dataset;\n    }\n\n\n    /**\n     * Translate the document into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,\n            mainEntity: this.mainEntity.toJSON(),\n            joinWith: this.joinWith\n        };\n    }\n}\n\nmodule.exports = Dataset;"],"names":["_","require","deepCloneField","Clonable","isDotSeparateName","Dataset","link","pre","linked","info","entity","linker","getReferencedEntity","gemlModule","mainEntity","name","dataset","loadDataset","assert","joinWith","cloneDeep","isEmpty","concat","buildHierarchy","inSchema","_flattenDataset","hierarchy","leftEntity","entities","forEach","joining","leftField","rightEntity","rightField","on","left","lastPos","lastIndexOf","fieldRef","substr","entityRef","getEntityAttribute","Error","rightHierarchy","getDocumentHierachy","right","parts","split","length","Object","assign","linkWithField","oolType","subDocuments","clone","toJSON","constructor","camelCase","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}