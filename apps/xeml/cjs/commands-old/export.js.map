{"version":3,"sources":["../../src/commands-old/export.js"],"sourcesContent":["const path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst { throwIfFileNotExist, getDateNamedDir } = require('../utils/helpers');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @property {object} context.export   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} export`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);\n\n    let schemaName = app.option('schema');\n    let override = app.option('override');\n\n    let db = app.db(schemaName);\n    \n    let basePath = path.join(context.manifestPath, 'export');\n\n    let exportOutput = getDateNamedDir(basePath, undefined, override);   \n\n    const Migrator = require(`../migration/${db.connector.driver}`);\n    const migrator = new Migrator(app, context, db);\n\n    if (!context.export) {\n        throw new Error('Config \"geml.export\" for is required.');\n    }\n\n    if (typeof context.export === \"string\") {\n        const exportFilePath = path.resolve(app.options.configPath, context.export);\n        context.export = fs.readJsonSync(exportFilePath, \"utf8\");\n    } else if (Array.isArray(context.export)) {\n        let all = [];\n        \n        await eachAsync_(context.export, async (exportFile) => {\n            const exportFilePath = path.resolve(app.options.configPath, exportFile);\n            const exportConfig = fs.readJsonSync(exportFilePath, \"utf8\");\n            const items = await migrator.export_(exportConfig, exportOutput, true); \n            all = all.concat(items);\n        });\n\n        migrator.writeIndexFile(exportOutput, all);\n\n        return all;\n    }\n\n    return migrator.export_(context.export, exportOutput);     \n};\n"],"names":["path","require","_","eachAsync_","fs","throwIfFileNotExist","getDateNamedDir","module","exports","app","context","log","name","gemlPath","schemaName","option","override","db","basePath","join","manifestPath","exportOutput","undefined","Migrator","connector","driver","migrator","export","Error","exportFilePath","resolve","options","configPath","readJsonSync","Array","isArray","all","exportFile","exportConfig","items","export_","concat","writeIndexFile"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,CAAC,EAAEC,UAAU,EAAE,GAAGF,QAAQ;AAClC,MAAM,EAAEG,EAAE,EAAE,GAAGH,QAAQ;AACvB,MAAM,EAAEI,mBAAmB,EAAEC,eAAe,EAAE,GAAGL,QAAQ;AAEzD;;;;;;;;;;;;;CAaC,GACDM,OAAOC,OAAO,GAAG,OAAOC,KAAKC;IACzBD,IAAIE,GAAG,CAAC,WAAW,CAAC,EAAEF,IAAIG,IAAI,CAAC,OAAO,CAAC;IAEvCP,oBAAoB,YAAYK,QAAQG,QAAQ;IAEhD,IAAIC,aAAaL,IAAIM,MAAM,CAAC;IAC5B,IAAIC,WAAWP,IAAIM,MAAM,CAAC;IAE1B,IAAIE,KAAKR,IAAIQ,EAAE,CAACH;IAEhB,IAAII,WAAWlB,KAAKmB,IAAI,CAACT,QAAQU,YAAY,EAAE;IAE/C,IAAIC,eAAef,gBAAgBY,UAAUI,WAAWN;IAExD,MAAMO,WAAWtB,QAAQ,CAAC,aAAa,EAAEgB,GAAGO,SAAS,CAACC,MAAM,CAAC,CAAC;IAC9D,MAAMC,WAAW,IAAIH,SAASd,KAAKC,SAASO;IAE5C,IAAI,CAACP,QAAQiB,MAAM,EAAE;QACjB,MAAM,IAAIC,MAAM;IACpB;IAEA,IAAI,OAAOlB,QAAQiB,MAAM,KAAK,UAAU;QACpC,MAAME,iBAAiB7B,KAAK8B,OAAO,CAACrB,IAAIsB,OAAO,CAACC,UAAU,EAAEtB,QAAQiB,MAAM;QAC1EjB,QAAQiB,MAAM,GAAGvB,GAAG6B,YAAY,CAACJ,gBAAgB;IACrD,OAAO,IAAIK,MAAMC,OAAO,CAACzB,QAAQiB,MAAM,GAAG;QACtC,IAAIS,MAAM,EAAE;QAEZ,MAAMjC,WAAWO,QAAQiB,MAAM,EAAE,OAAOU;YACpC,MAAMR,iBAAiB7B,KAAK8B,OAAO,CAACrB,IAAIsB,OAAO,CAACC,UAAU,EAAEK;YAC5D,MAAMC,eAAelC,GAAG6B,YAAY,CAACJ,gBAAgB;YACrD,MAAMU,QAAQ,MAAMb,SAASc,OAAO,CAACF,cAAcjB,cAAc;YACjEe,MAAMA,IAAIK,MAAM,CAACF;QACrB;QAEAb,SAASgB,cAAc,CAACrB,cAAce;QAEtC,OAAOA;IACX;IAEA,OAAOV,SAASc,OAAO,CAAC9B,QAAQiB,MAAM,EAAEN;AAC5C"}