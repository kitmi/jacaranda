{"version":3,"sources":["../../src/commands-old/clean.js"],"sourcesContent":["const path = require('path');\nconst { _, naming, eachAsync_ } = require('@genx/july');\nconst del = require('del');\nconst { throwIfFileNotExist } = require('../utils/helpers');\nconst Linker = require('../lang/Linker');\n\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} clean`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);\n\n    const schemaObjects = Linker.buildSchemaObjects(app, context);\n\n    const jsonOnly = app.option('json-only');\n    \n    const jsonFiles = path.join(context.gemlPath, '**/*.json');\n    await del(jsonFiles);\n    app.log('info', `Deleted intermediate files.`);   \n\n    if (!jsonOnly) {\n        return eachAsync_(schemaObjects, async (schema, schemaName) => {      \n            app.log('verbose', `Removing auto-generated files of schema \"${schemaName}\" ...`);   \n\n            await del([\n                path.join(context.manifestPath, schemaName,  '*.js'),\n                path.join(context.manifestPath, schemaName,  '*.json'),\n                path.join(context.modelPath, naming.pascalCase(schemaName) + '.js'),\n                path.join(context.modelPath, schemaName, 'base', '*.js'),\n                path.join(context.modelPath, schemaName, 'inputs', '*.js'),\n                path.join(context.modelPath, schemaName, 'types', '*.js'),\n            ]);\n\n            app.log('info', `Removed auto-generated files of schema \"${schemaName}\".`);           \n        });            \n    }\n};\n"],"names":["path","require","_","naming","eachAsync_","del","throwIfFileNotExist","Linker","module","exports","app","context","log","name","gemlPath","schemaObjects","buildSchemaObjects","jsonOnly","option","jsonFiles","join","schema","schemaName","manifestPath","modelPath","pascalCase"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,CAAC,EAAEC,MAAM,EAAEC,UAAU,EAAE,GAAGH,QAAQ;AAC1C,MAAMI,MAAMJ,QAAQ;AACpB,MAAM,EAAEK,mBAAmB,EAAE,GAAGL,QAAQ;AACxC,MAAMM,SAASN,QAAQ;AAGvB;;;;;;;;;;;;CAYC,GACDO,OAAOC,OAAO,GAAG,OAAOC,KAAKC;IACzBD,IAAIE,GAAG,CAAC,WAAW,CAAC,EAAEF,IAAIG,IAAI,CAAC,MAAM,CAAC;IAEtCP,oBAAoB,YAAYK,QAAQG,QAAQ;IAEhD,MAAMC,gBAAgBR,OAAOS,kBAAkB,CAACN,KAAKC;IAErD,MAAMM,WAAWP,IAAIQ,MAAM,CAAC;IAE5B,MAAMC,YAAYnB,KAAKoB,IAAI,CAACT,QAAQG,QAAQ,EAAE;IAC9C,MAAMT,IAAIc;IACVT,IAAIE,GAAG,CAAC,QAAQ,CAAC,2BAA2B,CAAC;IAE7C,IAAI,CAACK,UAAU;QACX,OAAOb,WAAWW,eAAe,OAAOM,QAAQC;YAC5CZ,IAAIE,GAAG,CAAC,WAAW,CAAC,yCAAyC,EAAEU,WAAW,KAAK,CAAC;YAEhF,MAAMjB,IAAI;gBACNL,KAAKoB,IAAI,CAACT,QAAQY,YAAY,EAAED,YAAa;gBAC7CtB,KAAKoB,IAAI,CAACT,QAAQY,YAAY,EAAED,YAAa;gBAC7CtB,KAAKoB,IAAI,CAACT,QAAQa,SAAS,EAAErB,OAAOsB,UAAU,CAACH,cAAc;gBAC7DtB,KAAKoB,IAAI,CAACT,QAAQa,SAAS,EAAEF,YAAY,QAAQ;gBACjDtB,KAAKoB,IAAI,CAACT,QAAQa,SAAS,EAAEF,YAAY,UAAU;gBACnDtB,KAAKoB,IAAI,CAACT,QAAQa,SAAS,EAAEF,YAAY,SAAS;aACrD;YAEDZ,IAAIE,GAAG,CAAC,QAAQ,CAAC,wCAAwC,EAAEU,WAAW,EAAE,CAAC;QAC7E;IACJ;AACJ"}