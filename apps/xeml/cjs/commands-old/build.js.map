{"version":3,"sources":["../../src/commands-old/build.js"],"sourcesContent":["const path = require('path');\nconst { fs } = require(\"@genx/sys\");\nconst { _, eachAsync_ } = require('@genx/july');\nconst { throwIfFileNotExist, getSchemaConnectors } = require('../utils/helpers');\nconst Linker = require('../lang/Linker');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} build`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);    \n\n    const schemaObjects = Linker.buildSchemaObjects(app, context);\n\n    if (_.isEmpty(context.schemas)) {\n        throw new Error(`Missing schema data source setting. Please run \"${app.name} connect\" to configure data source first.`);\n    }\n\n    let schemaToConnector = getSchemaConnectors(app, context.schemas);\n\n    return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {      \n        app.log('verbose', `Processing schema \"${schemaName}\" ...`);   \n        \n        let schema = schemaObjects[schemaName];\n\n        if (!schema) {\n            throw new Error(`Schema \"${schemaName}\" not found in model source.\"`);\n        }\n\n        let connector = schemaToConnector[schemaName];\n\n        let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);\n        let dbModeler = new DbModeler(context, schema.linker, connector, deploymentSetting.extraOptions);\n        let refinedSchema = dbModeler.modeling(schema, schemaToConnector);\n\n        if (context.saveIntermediate) {\n            let jsFile = path.resolve(context.gemlPath, schemaName + \".model.json\");\n            fs.writeFileSync(jsFile, JSON.stringify(refinedSchema.toJSON(), null, 4));\n        }\n\n        const DaoModeler = require('../modeler/Dao');\n        let daoModeler = new DaoModeler(context, schema.linker, connector);\n\n        return daoModeler.modeling_(refinedSchema);\n    });            \n};\n"],"names":["path","require","fs","_","eachAsync_","throwIfFileNotExist","getSchemaConnectors","Linker","module","exports","app","context","log","name","gemlPath","schemaObjects","buildSchemaObjects","isEmpty","schemas","Error","schemaToConnector","deploymentSetting","schemaName","schema","connector","DbModeler","driver","dbModeler","linker","extraOptions","refinedSchema","modeling","saveIntermediate","jsFile","resolve","writeFileSync","JSON","stringify","toJSON","DaoModeler","daoModeler","modeling_"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,EAAE,EAAE,GAAGD,QAAQ;AACvB,MAAM,EAAEE,CAAC,EAAEC,UAAU,EAAE,GAAGH,QAAQ;AAClC,MAAM,EAAEI,mBAAmB,EAAEC,mBAAmB,EAAE,GAAGL,QAAQ;AAC7D,MAAMM,SAASN,QAAQ;AAEvB;;;;;;;;;;;;CAYC,GACDO,OAAOC,OAAO,GAAG,OAAOC,KAAKC;IACzBD,IAAIE,GAAG,CAAC,WAAW,CAAC,EAAEF,IAAIG,IAAI,CAAC,MAAM,CAAC;IAEtCR,oBAAoB,YAAYM,QAAQG,QAAQ;IAEhD,MAAMC,gBAAgBR,OAAOS,kBAAkB,CAACN,KAAKC;IAErD,IAAIR,EAAEc,OAAO,CAACN,QAAQO,OAAO,GAAG;QAC5B,MAAM,IAAIC,MAAM,CAAC,gDAAgD,EAAET,IAAIG,IAAI,CAAC,yCAAyC,CAAC;IAC1H;IAEA,IAAIO,oBAAoBd,oBAAoBI,KAAKC,QAAQO,OAAO;IAEhE,OAAOd,WAAWO,QAAQO,OAAO,EAAE,OAAOG,mBAAmBC;QACzDZ,IAAIE,GAAG,CAAC,WAAW,CAAC,mBAAmB,EAAEU,WAAW,KAAK,CAAC;QAE1D,IAAIC,SAASR,aAAa,CAACO,WAAW;QAEtC,IAAI,CAACC,QAAQ;YACT,MAAM,IAAIJ,MAAM,CAAC,QAAQ,EAAEG,WAAW,6BAA6B,CAAC;QACxE;QAEA,IAAIE,YAAYJ,iBAAiB,CAACE,WAAW;QAE7C,IAAIG,YAAYxB,QAAQ,CAAC,oBAAoB,EAAEuB,UAAUE,MAAM,CAAC,QAAQ,CAAC;QACzE,IAAIC,YAAY,IAAIF,UAAUd,SAASY,OAAOK,MAAM,EAAEJ,WAAWH,kBAAkBQ,YAAY;QAC/F,IAAIC,gBAAgBH,UAAUI,QAAQ,CAACR,QAAQH;QAE/C,IAAIT,QAAQqB,gBAAgB,EAAE;YAC1B,IAAIC,SAASjC,KAAKkC,OAAO,CAACvB,QAAQG,QAAQ,EAAEQ,aAAa;YACzDpB,GAAGiC,aAAa,CAACF,QAAQG,KAAKC,SAAS,CAACP,cAAcQ,MAAM,IAAI,MAAM;QAC1E;QAEA,MAAMC,aAAatC,QAAQ;QAC3B,IAAIuC,aAAa,IAAID,WAAW5B,SAASY,OAAOK,MAAM,EAAEJ;QAExD,OAAOgB,WAAWC,SAAS,CAACX;IAChC;AACJ"}