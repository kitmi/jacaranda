{"version":3,"sources":["../../src/commands-old/graphql.js"],"sourcesContent":["const { _, eachAsync_ } = require('@genx/july');\nconst { throwIfFileNotExist, getSchemaConnectors } = require('../utils/helpers');\nconst Linker = require('../lang/Linker');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} graphql`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);\n\n    const schemaObjects = Linker.buildSchemaObjects(app, context);\n\n    if (_.isEmpty(context.schemas)) {\n        throw new Error(`Missing schema data source setting. Please run \"${app.name} connect\" to configure data source first.`);\n    }\n\n    let schemaToConnector = getSchemaConnectors(app, context.schemas);\n\n    return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {      \n        app.log('verbose', `Processing schema \"${schemaName}\" ...`);   \n        \n        let schema = schemaObjects[schemaName];\n\n        if (!schema) {\n            throw new Error(`Schema \"${schemaName}\" not found in model source.\"`);\n        }\n\n        let connector = schemaToConnector[schemaName];\n\n        const skipGeneration = true;\n\n        let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);\n        let dbModeler = new DbModeler(context, schema.linker, connector, deploymentSetting.extraOptions);\n        let refinedSchema = dbModeler.modeling(schema, schemaToConnector, skipGeneration);\n\n        const GraphQLModeler = require('../modeler/GraphQL');\n        let graphQLModeler = new GraphQLModeler(context, schema.linker, connector);\n\n        return graphQLModeler.modeling_(refinedSchema);\n    });            \n};\n"],"names":["_","eachAsync_","require","throwIfFileNotExist","getSchemaConnectors","Linker","module","exports","app","context","log","name","gemlPath","schemaObjects","buildSchemaObjects","isEmpty","schemas","Error","schemaToConnector","deploymentSetting","schemaName","schema","connector","skipGeneration","DbModeler","driver","dbModeler","linker","extraOptions","refinedSchema","modeling","GraphQLModeler","graphQLModeler","modeling_"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAM,EAAEA,CAAC,EAAEC,UAAU,EAAE,GAAGC,QAAQ;AAClC,MAAM,EAAEC,mBAAmB,EAAEC,mBAAmB,EAAE,GAAGF,QAAQ;AAC7D,MAAMG,SAASH,QAAQ;AAEvB;;;;;;;;;;;;CAYC,GACDI,OAAOC,OAAO,GAAG,OAAOC,KAAKC;IACzBD,IAAIE,GAAG,CAAC,WAAW,CAAC,EAAEF,IAAIG,IAAI,CAAC,QAAQ,CAAC;IAExCR,oBAAoB,YAAYM,QAAQG,QAAQ;IAEhD,MAAMC,gBAAgBR,OAAOS,kBAAkB,CAACN,KAAKC;IAErD,IAAIT,EAAEe,OAAO,CAACN,QAAQO,OAAO,GAAG;QAC5B,MAAM,IAAIC,MAAM,CAAC,gDAAgD,EAAET,IAAIG,IAAI,CAAC,yCAAyC,CAAC;IAC1H;IAEA,IAAIO,oBAAoBd,oBAAoBI,KAAKC,QAAQO,OAAO;IAEhE,OAAOf,WAAWQ,QAAQO,OAAO,EAAE,OAAOG,mBAAmBC;QACzDZ,IAAIE,GAAG,CAAC,WAAW,CAAC,mBAAmB,EAAEU,WAAW,KAAK,CAAC;QAE1D,IAAIC,SAASR,aAAa,CAACO,WAAW;QAEtC,IAAI,CAACC,QAAQ;YACT,MAAM,IAAIJ,MAAM,CAAC,QAAQ,EAAEG,WAAW,6BAA6B,CAAC;QACxE;QAEA,IAAIE,YAAYJ,iBAAiB,CAACE,WAAW;QAE7C,MAAMG,iBAAiB;QAEvB,IAAIC,YAAYtB,QAAQ,CAAC,oBAAoB,EAAEoB,UAAUG,MAAM,CAAC,QAAQ,CAAC;QACzE,IAAIC,YAAY,IAAIF,UAAUf,SAASY,OAAOM,MAAM,EAAEL,WAAWH,kBAAkBS,YAAY;QAC/F,IAAIC,gBAAgBH,UAAUI,QAAQ,CAACT,QAAQH,mBAAmBK;QAElE,MAAMQ,iBAAiB7B,QAAQ;QAC/B,IAAI8B,iBAAiB,IAAID,eAAetB,SAASY,OAAOM,MAAM,EAAEL;QAEhE,OAAOU,eAAeC,SAAS,CAACJ;IACpC;AACJ"}