{"version":3,"sources":["../../src/commands-old/connect.js"],"sourcesContent":["const { _, eachAsync_, get, set } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst npmInstall_ = require('../utils/npmInstall_');\n\nconst dependencies = {\n    \"mysql\": [ \"mysql2\" ],\n    \"mongodb\": [ \"mongodb\" ],\n    \"rabbitmq\": [ \"amqplib\" ],\n};\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} connect`);\n\n    const schemaName = app.option('schema');\n    const dataSourceType = app.option('dbms');\n    const dataSourceName = app.option('ds');\n    const connection = app.option('conn');  \n    \n    const config = await fs.readJson(context.configFullPath);\n    const dsConfig = get(config, ['dataSource', dataSourceType, dataSourceName]);\n    if (dsConfig != null) {\n        throw new Error(`Data source \"${dataSourceType}.${dataSourceName}\" already exists.`);\n    }\n\n    set(config, ['dataSource', dataSourceType, dataSourceName], {\n        connection,\n        logStatement: true\n    });    \n\n    set(config, ['settings', 'geml', 'schemas', schemaName, \"dataSource\"], `${dataSourceType}.${dataSourceName}`);\n    await fs.writeJson(context.configFullPath, config, { spaces: 4 });\n    app.log('info', `Data source for schema \"${schemaName}\" is added into ${context.configFullPath}`);\n\n    await npmInstall_(app, app.workingPath, dependencies[dataSourceType]);\n};\n"],"names":["_","eachAsync_","get","set","require","fs","npmInstall_","dependencies","module","exports","app","context","log","name","schemaName","option","dataSourceType","dataSourceName","connection","config","readJson","configFullPath","dsConfig","Error","logStatement","writeJson","spaces","workingPath"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAM,EAAEA,CAAC,EAAEC,UAAU,EAAEC,GAAG,EAAEC,GAAG,EAAE,GAAGC,QAAQ;AAC5C,MAAM,EAAEC,EAAE,EAAE,GAAGD,QAAQ;AACvB,MAAME,cAAcF,QAAQ;AAE5B,MAAMG,eAAe;IACjB,SAAS;QAAE;KAAU;IACrB,WAAW;QAAE;KAAW;IACxB,YAAY;QAAE;KAAW;AAC7B;AAEA;;;;;;;;;;;;CAYC,GACDC,OAAOC,OAAO,GAAG,OAAOC,KAAKC;IACzBD,IAAIE,GAAG,CAAC,WAAW,CAAC,EAAEF,IAAIG,IAAI,CAAC,QAAQ,CAAC;IAExC,MAAMC,aAAaJ,IAAIK,MAAM,CAAC;IAC9B,MAAMC,iBAAiBN,IAAIK,MAAM,CAAC;IAClC,MAAME,iBAAiBP,IAAIK,MAAM,CAAC;IAClC,MAAMG,aAAaR,IAAIK,MAAM,CAAC;IAE9B,MAAMI,SAAS,MAAMd,GAAGe,QAAQ,CAACT,QAAQU,cAAc;IACvD,MAAMC,WAAWpB,IAAIiB,QAAQ;QAAC;QAAcH;QAAgBC;KAAe;IAC3E,IAAIK,YAAY,MAAM;QAClB,MAAM,IAAIC,MAAM,CAAC,aAAa,EAAEP,eAAe,CAAC,EAAEC,eAAe,iBAAiB,CAAC;IACvF;IAEAd,IAAIgB,QAAQ;QAAC;QAAcH;QAAgBC;KAAe,EAAE;QACxDC;QACAM,cAAc;IAClB;IAEArB,IAAIgB,QAAQ;QAAC;QAAY;QAAQ;QAAWL;QAAY;KAAa,EAAE,CAAC,EAAEE,eAAe,CAAC,EAAEC,eAAe,CAAC;IAC5G,MAAMZ,GAAGoB,SAAS,CAACd,QAAQU,cAAc,EAAEF,QAAQ;QAAEO,QAAQ;IAAE;IAC/DhB,IAAIE,GAAG,CAAC,QAAQ,CAAC,wBAAwB,EAAEE,WAAW,gBAAgB,EAAEH,QAAQU,cAAc,CAAC,CAAC;IAEhG,MAAMf,YAAYI,KAAKA,IAAIiB,WAAW,EAAEpB,YAAY,CAACS,eAAe;AACxE"}