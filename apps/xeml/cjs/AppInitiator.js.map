{"version":3,"sources":["../src/AppInitiator.js"],"sourcesContent":["const path = require(\"path\");\nconst { _, text } = require(\"@genx/july\");\nconst { fs } = require(\"@genx/sys\");\nconst { ServiceContainer } = require(\"@genx/app\");\nconst {\n    Validators: { validateObjectBySchema },\n} = require(\"@genx/data\");\n\nconst moduleApi = require(\"module\");\n\nconst checkModule = (fromPath, name) => {\n    try {\n        const requireFrom = moduleApi.createRequire(text.ensureEndsWith(fromPath, path.sep));\n\n        const basePath = requireFrom.resolve.paths(name).find((basePath) => fs.existsSync(path.join(basePath, name)));\n        return path.join(basePath, name);\n    } catch (err) {\n        return false;\n    }\n};\n\nclass AppInitiator {\n    constructor(context) {\n        this.app = context.app;\n        this.cwd = context.cwd;\n    }\n\n    async run(command) {\n        let gemlConfig;\n\n        if (command !== \"init\") {\n            let configFile = this.app.commandLine.option(\"config\");\n            let configFullPath;\n\n            if (configFile) {\n                configFullPath = path.resolve(this.cwd, configFile);\n\n                if (!fs.existsSync(configFullPath)) {\n                    throw new Error(`Config \"${configFile}\" not found! cwd: ${this.cwd}`);\n                }\n            } else {\n                configFullPath = path.resolve(this.cwd, \"conf/app.default.json\");\n\n                if (!fs.existsSync(configFullPath)) {\n                    configFullPath = path.resolve(this.cwd, \"conf/server.default.json\");\n                    if (!fs.existsSync(configFullPath)) {\n                        throw new Error('Either \"conf/app.default.json\" or \"conf/server.default.json\" not found.');\n                    }\n                }\n            }\n\n            let extName = path.extname(configFullPath);\n            if (extName !== \".json\") {\n                throw new Error(\"Only supports JSON config.\");\n            }\n\n            let configName = path.basename(configFullPath, extName);\n            let configPath = path.dirname(configFullPath);\n            let envAware = false;\n\n            if (configName.endsWith(\".default\")) {\n                envAware = true;\n                configName = configName.substring(0, configName.length - 8);\n            }\n\n            const featuresPath = this.app.commandLine.option(\"features-path\");\n\n            let allowFeatures = this.app.commandLine.option(\"allow\");\n            if (allowFeatures && !Array.isArray(allowFeatures)) {\n                allowFeatures = [allowFeatures];\n            }\n\n            this.container = new ServiceContainer(this.app.name, {\n                workingPath: this.cwd,\n                configPath,\n                configName,\n                featuresPath,\n                disableEnvAwareConfig: !envAware,\n                allowedFeatures: [\n                    \"configByHostname\",\n                    \"devConfigByGitUser\",\n                    \"appLogger\",\n                    \"loggers\",\n                    \"settings\",\n                    \"timezone\",\n                    \"version\",\n                    \"dataSource\",\n                    \"env\",\n                    \"featureRegistry\",\n                    ...(allowFeatures ?? []),\n                ],\n            });\n\n            this.container.replaceLogger(this.app.logger);\n\n            // useDb should be run at init level after settings loaded\n            this.container.on(\"after:Initial\", (asyncHandlers) => {\n                asyncHandlers.push((async () => {\n                    let config = this.container.settings.geml;\n                    if (_.isEmpty(config)) {\n                        throw new Error(\"Empty geml config!\");\n                    }\n\n                    let { gemlPath, modelPath, scriptPath, manifestPath, useJsonSource, saveIntermediate } =\n                        validateObjectBySchema(config, {\n                            gemlPath: { type: \"text\", default: \"geml\" },\n                            modelPath: { type: \"text\", default: \"src/models\" },\n                            scriptPath: { type: \"text\", default: \"src/scripts\" },\n                            manifestPath: { type: \"text\", optional: true },\n                            useJsonSource: { type: \"boolean\", optional: true, default: false },\n                            saveIntermediate: { type: \"boolean\", optional: true, default: false },\n                            schemas: {\n                                type: \"object\",\n                                optional: true,\n                            },\n                            dependencies: {\n                                type: \"object\",\n                                optional: true,\n                            },\n                        });\n\n                    this.container.options.modelPath = modelPath;\n\n                    gemlPath = this.container.toAbsolutePath(gemlPath);\n                    modelPath = this.container.toAbsolutePath(modelPath);\n                    scriptPath = this.container.toAbsolutePath(scriptPath);\n                    manifestPath = manifestPath && this.container.toAbsolutePath(manifestPath);\n\n                    gemlConfig = {\n                        ...config,\n                        gemlPath,\n                        modelPath,\n                        scriptPath,\n                        manifestPath,\n                        useJsonSource,\n                        saveIntermediate,\n                        configFullPath,\n                    };\n\n                    if (!_.isEmpty(gemlConfig.schemas)) {\n                        const { load_: useDb } = require(\"@genx/app/lib/features/useDb\");\n                        await useDb(this.container, gemlConfig.schemas);\n                    }\n                })());\n            });\n\n            await this.container.start_();\n\n            this.app.once(\"stopping\", (stopper) => {\n                stopper.push(\n                    (async () => {\n                        await this.container.stop_();\n                    })()\n                );\n            });\n\n            this.container.option = (name) => {\n                return this.app.commandLine.option(name);\n            };\n\n            if (!_.isEmpty(gemlConfig.dependencies)) {\n                gemlConfig.dependencies = _.mapValues(gemlConfig.dependencies, (pkgPath) => {\n                    let pkgRoot = this.container.toAbsolutePath(pkgPath);\n                    if (!fs.pathExistsSync(pkgRoot)) {\n                        pkgRoot = checkModule(this.container.workingPath, pkgPath);\n                        if (!pkgRoot) {\n                            throw new Error(`Dependency package \"${pkgPath}\" not found.`);\n                        }\n                    }\n\n                    const pkgDefaultConfig = path.resolve(pkgRoot, \"conf/app.default.config\");\n\n                    let pkgGemlPath;\n\n                    if (fs.existsSync(pkgDefaultConfig)) {\n                        const pkgConfig = fs.readJsonSync(pkgDefaultConfig);\n                        pkgGemlPath = pkgConfig.settings?.geml?.gemlPath;\n                    }\n\n                    return path.join(pkgRoot, pkgGemlPath || \"geml\");\n                });\n            }\n        } else {\n            this.container = this.app;\n        }\n\n        let cmdMethod_ = require(\"./commands/\" + command);\n\n        try {\n            await cmdMethod_(this.container, gemlConfig);\n        } catch (error) {\n            //throw error;\n            this.app.log(\"error\", error.message);\n            process.exit(1);\n        }\n    }\n}\n\nmodule.exports = AppInitiator;\n"],"names":["path","require","_","text","fs","ServiceContainer","Validators","validateObjectBySchema","moduleApi","checkModule","fromPath","name","requireFrom","createRequire","ensureEndsWith","sep","basePath","resolve","paths","find","existsSync","join","err","AppInitiator","run","command","gemlConfig","configFile","app","commandLine","option","configFullPath","cwd","Error","extName","extname","configName","basename","configPath","dirname","envAware","endsWith","substring","length","featuresPath","allowFeatures","Array","isArray","container","workingPath","disableEnvAwareConfig","allowedFeatures","replaceLogger","logger","on","asyncHandlers","push","config","settings","geml","isEmpty","gemlPath","modelPath","scriptPath","manifestPath","useJsonSource","saveIntermediate","type","default","optional","schemas","dependencies","options","toAbsolutePath","load_","useDb","start_","once","stopper","stop_","mapValues","pkgPath","pkgRoot","pathExistsSync","pkgDefaultConfig","pkgGemlPath","pkgConfig","readJsonSync","cmdMethod_","error","log","message","process","exit","constructor","context","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}