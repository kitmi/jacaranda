{"version":3,"sources":["../../src/migration/mysql.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { _, eachAsync_, quote } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\n/**\n * MySQL migration.\n * @class\n */\nclass MySQLMigration {\n    /** \n     * @param {ServiceContainer} app    \n     * @param {object} context\n     * @param {Db} db\n     */\n    constructor(app, context, db) {\n        this.app = app;        \n        this.modelPath = context.modelPath;\n        this.scriptPath = context.scriptPath;        \n        this.db = db;\n\n        this.dbScriptPath = path.join(this.scriptPath, this.db.driver, this.db.schemaName);\n    }\n\n    async reset_() {\n        return this.db.connector.execute_(`DROP DATABASE IF EXISTS ??`, [ this.db.connector.database ], { createDatabase: true });\n    }\n\n    async create_(extraOptions) {        \n        let sqlFiles = [ 'entities.sql', 'relations.sql', 'procedures.sql' ];\n\n        let sqlCreate = 'CREATE DATABASE IF NOT EXISTS ??';\n\n        if (extraOptions && !_.isEmpty(extraOptions.db)) {\n            sqlCreate += ' ' + _.reduce(extraOptions.db, (r, v, k) => {\n                return r + ' ' + _.upperCase(k) + ' ' + quote(v.toString(), '\"');\n            }, '');\n        }\n        \n        let result = await this.db.connector.execute_(sqlCreate, \n            [ this.db.connector.database ], \n            { createDatabase: true }\n        );\n        \n        if (result.warningStatus == 0) {\n            this.app.log('info', `Created database \"${this.db.connector.database}\".`);\n        } else {\n            this.app.log('warn', `Database \"${this.db.connector.database}\" exists.`);\n        }                        \n\n        return eachAsync_(sqlFiles, async (file) => {\n            let sqlFile = path.join(this.dbScriptPath, file);\n            if (!fs.existsSync(sqlFile)) {\n                throw new Error(`Database script \"${sqlFile}\" not found.`);\n            }\n\n            let sql = _.trim(fs.readFileSync(sqlFile, { encoding: 'utf8' }));\n            if (sql) {\n                result = _.castArray(await this.db.connector.execute_(sql, null, { multipleStatements: 1 }));\n\n                let warningRows = _.reduce(result, (sum, row) => {\n                    sum += row.warningStatus;\n                    return sum;\n                }, 0);\n\n                if (warningRows > 0) {\n                    this.app.log('warn', `${warningRows} warning(s) reported while running \"${file}\".`);\n                } else {\n                    this.app.log('info', `Database scripts \"${sqlFile}\" run successfully.`);\n                }\n            }\n        });\n    }\n\n    async load_(dataFile, ignoreDuplicate) {\n        let ext = path.extname(dataFile);\n        this.app.log('verbose', `Loading data file \"${dataFile}\" ...`);\n\n        if (ext === '.json') {\n            let data = fs.readJsonSync(dataFile, {encoding: 'utf8'});\n\n            if (Array.isArray(data)) {\n                let entityName = path.basename(dataFile, ext);\n                await this._loadSingleEntityRecords_(entityName, data, ignoreDuplicate);\n            } else {\n                await this._loadMultiEntityRecords_(data, ignoreDuplicate);\n            }\n            this.app.log('info', `Loaded JSON data file: ${dataFile}`);\n        } else if (ext === '.sql') {\n            let sql = fs.readFileSync(dataFile, {encoding: 'utf8'});\n            let result = await this.db.connector.execute_(sql, null, { multipleStatements: 1 });\n            this.app.log('info', `Executed SQL file: ${dataFile}`, result);\n        } else if (ext === '.xlsx') {\n\n            const Excel = require('exceljs');\n            let workbook = new Excel.Workbook();\n            await workbook.xlsx.readFile(dataFile);     \n            \n            let data = {};\n\n            workbook.eachSheet((worksheet, sheetId) => {\n                let colKeys;\n\n                let entityName = worksheet.name;\n                let entityData = [];\n                data[entityName] = entityData;\n                \n                worksheet.eachRow(function(row, rowNumber) {                   \n                    \n                    if (!colKeys) {\n                        colKeys = _.drop(row.values);    \n                    } else {\n                        let record = _.fromPairs(_.zip(colKeys, _.drop(row.values)));\n                        entityData.push(record);\n                    }\n                });\n            });\n\n            await this._loadMultiEntityRecords_(data);\n\n            this.app.log('info', `Imported excel data file: ${dataFile}`);\n        } else if (ext === '.js') {           \n            let executor = require(dataFile);\n            await executor(this.app, this.db.connector);\n\n            this.app.log('info', `Ran data script: ${dataFile}`);\n        } else {\n            throw new Error('Unsupported data file format.');\n        }\n    }\n\n    writeIndexFile(outputDir, items) {\n        const indexFile = path.join(outputDir, 'index.list');\n\n        fs.writeFileSync(indexFile, items.join('\\n'), 'utf8');\n        this.app.log('info', 'Generated data files list: ' + indexFile);\n    }\n\n    async export_(entitiesToExport, outputDir, skipIndexFile) {\n        fs.ensureDirSync(outputDir);\n\n        const items = [];\n\n        await eachAsync_(entitiesToExport, async (exportConfig, dataFileName) => {\n            const entityName = exportConfig.entityName || dataFileName;\n            this.app.log('verbose', 'Exporting data of entity: ' + entityName);\n\n            const Entity = this.db.model(entityName);\n            const data = await Entity.findAll_(exportConfig.dataset);\n\n            _.forOwn(exportConfig.rules, (enabled, name) => {\n                if (enabled) {\n                    const processRule = require(`./rules/${name}.js`);\n                    data.forEach(entity => processRule(this.db, Entity, entity));\n                }                    \n            });\n\n            const baseFileName = `${dataFileName}.json`;\n            items.push(baseFileName);\n\n            const dataFile = path.join(outputDir, baseFileName);\n\n            fs.writeJsonSync(dataFile, {\n                [Entity.meta.name]: data\n            }, { spaces: 4 });\n\n            this.app.log('info', 'Generated entity data file: ' + dataFile);\n        });\n\n        if (!skipIndexFile) {\n            this.writeIndexFile(outputDir, items);\n        }\n        \n        return items;\n    }\n\n    async _loadMultiEntityRecords_(data, ignoreDuplicate) {        \n\n        try {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');\n\n            await eachAsync_(data, async (records, entityName) => {                \n                let items = Array.isArray(records) ? records : [ records ];\n                return this._loadRecordsByModel_(entityName, items, ignoreDuplicate);\n            });\n        } catch (error) {\n            throw error;\n        } finally {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');\n        }\n    }\n\n    async _loadSingleEntityRecords_(entityName, data, ignoreDuplicate) {\n        try {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');\n\n            await this._loadRecordsByModel_(entityName, data, ignoreDuplicate);\n        } catch (error) {\n            throw error;\n        } finally {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');\n        }\n    }\n\n    async _loadRecordsByModel_(entityName, items, ignoreDuplicate) {\n        const connOptions = {};\n        if (ignoreDuplicate) {\n            connOptions.insertIgnore = true;\n        }\n\n        const Entity = this.db.model(entityName);\n\n        return eachAsync_(items, async ({ $skipModifiers, $update, ...item }) => {\n            const opts = { $migration: true, $skipModifiers, $retrieveDbResult: true };\n\n            if ($update) {\n                await Entity.updateOne_(item, undefined, connOptions);\n            } else {                \n                const processed = await Entity.create_(item, opts, connOptions);\n                if (opts.$result.affectedRows === 0) {\n                    const key = Entity.getUniqueKeyValuePairsFrom(processed);\n                    this.app.log('info', `Duplicate record ${JSON.stringify(key)} is ignored.`);\n                }       \n            }                 \n        });  \n    }\n}\n\nmodule.exports = MySQLMigration;"],"names":["path","require","_","eachAsync_","quote","fs","MySQLMigration","reset_","db","connector","execute_","database","createDatabase","create_","extraOptions","sqlFiles","sqlCreate","isEmpty","reduce","r","v","k","upperCase","toString","result","warningStatus","app","log","file","sqlFile","join","dbScriptPath","existsSync","Error","sql","trim","readFileSync","encoding","castArray","multipleStatements","warningRows","sum","row","load_","dataFile","ignoreDuplicate","ext","extname","data","readJsonSync","Array","isArray","entityName","basename","_loadSingleEntityRecords_","_loadMultiEntityRecords_","Excel","workbook","Workbook","xlsx","readFile","eachSheet","worksheet","sheetId","colKeys","name","entityData","eachRow","rowNumber","drop","values","record","fromPairs","zip","push","executor","writeIndexFile","outputDir","items","indexFile","writeFileSync","export_","entitiesToExport","skipIndexFile","ensureDirSync","exportConfig","dataFileName","Entity","model","findAll_","dataset","forOwn","rules","enabled","processRule","forEach","entity","baseFileName","writeJsonSync","meta","spaces","records","_loadRecordsByModel_","error","connOptions","insertIgnore","$skipModifiers","$update","item","opts","$migration","$retrieveDbResult","updateOne_","undefined","processed","$result","affectedRows","key","getUniqueKeyValuePairsFrom","JSON","stringify","constructor","context","modelPath","scriptPath","driver","schemaName","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}