{"version":3,"sources":["../../src/migration/mongodb.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\n/**\n * MySQL migration.\n * @class\n */\nclass MongoDbMigration {\n    /**     \n     * @param {object} context\n     * @param {Connector} connector\n     */\n    constructor(context, schemaName, connector) {\n        this.appModule = context.appModule;\n        this.logger = context.logger;\n        this.modelPath = context.modelPath;\n        this.scriptSourcePath = context.scriptSourcePath;\n        this.schemaName = schemaName;\n        this.connector = connector;\n\n        this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);\n    }\n\n    async reset_() {\n        return this.connector.execute_(db => db.dropDatabase());\n    }\n\n    async create_(extraOptions) {        \n        \n    }\n\n    async load_(dataFile) {\n        let ext = path.extname(dataFile);\n        this.logger.log('verbose', `Loading data file \"${dataFile}\" ...`);\n        \n        let collection = path.basename(dataFile, ext);\n\n        if (ext === '.json') {\n            let docs = fs.readJsonSync(dataFile, {encoding: 'utf8'});\n\n            await this._loadData_(collection, docs);\n        } else if (ext === '.js') {           \n            let executor = require(dataFile);\n            await executor(this.appModule, this.connector);\n        } else {\n            throw new Error('Unsupported data file format.');\n        }\n    }\n\n    async _loadData_(collection, docs) { \n        await eachAsync_(docs, doc => this.connector.insertOne_(collection, doc));\n    }\n}\n\nmodule.exports = MongoDbMigration;"],"names":["path","require","_","eachAsync_","fs","MongoDbMigration","reset_","connector","execute_","db","dropDatabase","create_","extraOptions","load_","dataFile","ext","extname","logger","log","collection","basename","docs","readJsonSync","encoding","_loadData_","executor","appModule","Error","doc","insertOne_","constructor","context","schemaName","modelPath","scriptSourcePath","dbScriptPath","join","driver","database","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;AAEA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,CAAC,EAAEC,UAAU,EAAE,GAAGF,QAAQ;AAClC,MAAM,EAAEG,EAAE,EAAE,GAAGH,QAAQ;AAEvB;;;CAGC,GACD,MAAMI;IAgBF,MAAMC,SAAS;QACX,OAAO,IAAI,CAACC,SAAS,CAACC,QAAQ,CAACC,CAAAA,KAAMA,GAAGC,YAAY;IACxD;IAEA,MAAMC,QAAQC,YAAY,EAAE,CAE5B;IAEA,MAAMC,MAAMC,QAAQ,EAAE;QAClB,IAAIC,MAAMf,KAAKgB,OAAO,CAACF;QACvB,IAAI,CAACG,MAAM,CAACC,GAAG,CAAC,WAAW,CAAC,mBAAmB,EAAEJ,SAAS,KAAK,CAAC;QAEhE,IAAIK,aAAanB,KAAKoB,QAAQ,CAACN,UAAUC;QAEzC,IAAIA,QAAQ,SAAS;YACjB,IAAIM,OAAOjB,GAAGkB,YAAY,CAACR,UAAU;gBAACS,UAAU;YAAM;YAEtD,MAAM,IAAI,CAACC,UAAU,CAACL,YAAYE;QACtC,OAAO,IAAIN,QAAQ,OAAO;YACtB,IAAIU,WAAWxB,QAAQa;YACvB,MAAMW,SAAS,IAAI,CAACC,SAAS,EAAE,IAAI,CAACnB,SAAS;QACjD,OAAO;YACH,MAAM,IAAIoB,MAAM;QACpB;IACJ;IAEA,MAAMH,WAAWL,UAAU,EAAEE,IAAI,EAAE;QAC/B,MAAMlB,WAAWkB,MAAMO,CAAAA,MAAO,IAAI,CAACrB,SAAS,CAACsB,UAAU,CAACV,YAAYS;IACxE;IA3CA;;;KAGC,GACDE,YAAYC,OAAO,EAAEC,UAAU,EAAEzB,SAAS,CAAE;QACxC,IAAI,CAACmB,SAAS,GAAGK,QAAQL,SAAS;QAClC,IAAI,CAACT,MAAM,GAAGc,QAAQd,MAAM;QAC5B,IAAI,CAACgB,SAAS,GAAGF,QAAQE,SAAS;QAClC,IAAI,CAACC,gBAAgB,GAAGH,QAAQG,gBAAgB;QAChD,IAAI,CAACF,UAAU,GAAGA;QAClB,IAAI,CAACzB,SAAS,GAAGA;QAEjB,IAAI,CAAC4B,YAAY,GAAGnC,KAAKoC,IAAI,CAAC,IAAI,CAACF,gBAAgB,EAAE,IAAI,CAAC3B,SAAS,CAAC8B,MAAM,EAAE,IAAI,CAAC9B,SAAS,CAAC+B,QAAQ;IACvG;AA+BJ;AAEAC,OAAOC,OAAO,GAAGnC"}