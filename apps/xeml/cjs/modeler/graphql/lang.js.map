{"version":3,"sources":["../../../src/modeler/graphql/lang.js"],"sourcesContent":["const { Types } = require('@genx/data');\nconst { _, pascalCase }  = require('@genx/july');\n\nconst mapOfGemlTypesToGraphQL = {\n    'integer': 'Int',\n    'number': 'Float',\n    'text': 'String',\n    'boolean': 'Boolean'\n};\n\nfunction toGraphQLType(fieldMeta) {\n    const result = {};\n\n    switch (fieldMeta.type) {\n        case 'datetime': \n            result.newType = 'Date';\n            result.typeName = 'scalar';\n            result.type = result.newType;\n            break;\n\n        case 'enum':\n            result.newType = pascalCase(fieldMeta.subClass && fieldMeta.subClass.length > 0 ? _.last(fieldMeta.subClass) : fieldMeta.name);\n            result.typeName = 'enum';\n            result.values = fieldMeta.values;\n            result.type = result.newType;\n            break;\n        \n        //todo: to support other elements\n        case 'array':\n            result.type = '[String!]';\n            break;\n\n        //todo: to support object schema    \n        case 'object':\n            result.type = 'String';\n            break;\n        \n        case 'binary':\n            result.newType = 'Blob';\n            result.typeName = 'scalar';\n            result.type = result.newType;\n            break;    \n\n        default:\n            const scalarType = mapOfGemlTypesToGraphQL[fieldMeta.type];\n            if (scalarType) {\n                result.type = scalarType;\n            } else {\n                throw new Error(`Invalid field type: ${fieldMeta.type}`);\n            }\n    }\n\n    if (!fieldMeta.optional) {\n        result.type += '!';\n    }\n\n    return result;\n}\n\nexports.toGraphQLType = toGraphQLType;\n\n"],"names":["Types","require","_","pascalCase","mapOfGemlTypesToGraphQL","toGraphQLType","fieldMeta","result","type","newType","typeName","subClass","length","last","name","values","scalarType","Error","optional","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAM,EAAEA,KAAK,EAAE,GAAGC,QAAQ;AAC1B,MAAM,EAAEC,CAAC,EAAEC,UAAU,EAAE,GAAIF,QAAQ;AAEnC,MAAMG,0BAA0B;IAC5B,WAAW;IACX,UAAU;IACV,QAAQ;IACR,WAAW;AACf;AAEA,SAASC,cAAcC,SAAS;IAC5B,MAAMC,SAAS,CAAC;IAEhB,OAAQD,UAAUE,IAAI;QAClB,KAAK;YACDD,OAAOE,OAAO,GAAG;YACjBF,OAAOG,QAAQ,GAAG;YAClBH,OAAOC,IAAI,GAAGD,OAAOE,OAAO;YAC5B;QAEJ,KAAK;YACDF,OAAOE,OAAO,GAAGN,WAAWG,UAAUK,QAAQ,IAAIL,UAAUK,QAAQ,CAACC,MAAM,GAAG,IAAIV,EAAEW,IAAI,CAACP,UAAUK,QAAQ,IAAIL,UAAUQ,IAAI;YAC7HP,OAAOG,QAAQ,GAAG;YAClBH,OAAOQ,MAAM,GAAGT,UAAUS,MAAM;YAChCR,OAAOC,IAAI,GAAGD,OAAOE,OAAO;YAC5B;QAEJ,iCAAiC;QACjC,KAAK;YACDF,OAAOC,IAAI,GAAG;YACd;QAEJ,oCAAoC;QACpC,KAAK;YACDD,OAAOC,IAAI,GAAG;YACd;QAEJ,KAAK;YACDD,OAAOE,OAAO,GAAG;YACjBF,OAAOG,QAAQ,GAAG;YAClBH,OAAOC,IAAI,GAAGD,OAAOE,OAAO;YAC5B;QAEJ;YACI,MAAMO,aAAaZ,uBAAuB,CAACE,UAAUE,IAAI,CAAC;YAC1D,IAAIQ,YAAY;gBACZT,OAAOC,IAAI,GAAGQ;YAClB,OAAO;gBACH,MAAM,IAAIC,MAAM,CAAC,oBAAoB,EAAEX,UAAUE,IAAI,CAAC,CAAC;YAC3D;IACR;IAEA,IAAI,CAACF,UAAUY,QAAQ,EAAE;QACrBX,OAAOC,IAAI,IAAI;IACnB;IAEA,OAAOD;AACX;AAEAY,QAAQd,aAAa,GAAGA"}