{"version":3,"sources":["../../../../src/modeler/database/mongodb/Modeler.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { fs } = require('@genx/sys');\n\n/**\n * Ooolong database modeler for mongodb.\n * @class\n */\nclass MongoDbModeler {\n    /**     \n     * @param {object} context\n     * @property {Logger} context.logger - Logger object     \n     * @property {Linker} context.linker - Geml DSL linker\n     * @property {string} context.scriptOutputPath - Generated script path\n     * @param {object} dbOptions\n     * @property {object} dbOptions.db\n     * @property {object} dbOptions.table\n     */\n    constructor(context, connector, dbOptions) {\n        this.logger = context.logger;\n        this.linker = context.linker;\n        this.outputPath = context.scriptOutputPath;\n        this.connector = connector;\n\n        \n    }\n\n    modeling(schema) {\n        let dataFilesDir = path.join('mongodb', this.connector.database);\n\n        let initIdxFilePath = path.join(dataFilesDir, 'data', '_init', 'index.list');\n        let initFilePath = path.join(dataFilesDir, 'data', '_init', '0-init.json');\n\n        this._writeFile(path.join(this.outputPath, initFilePath), JSON.stringify({}, null, 4));\n\n        if (!fs.existsSync(path.join(this.outputPath, initIdxFilePath))) {\n            this._writeFile(path.join(this.outputPath, initIdxFilePath), '0-init.json\\n');\n        }\n\n        return schema;\n    }    \n\n    _writeFile(filePath, content) {\n        fs.ensureFileSync(filePath);\n        fs.writeFileSync(filePath, content);\n\n        this.logger.log('info', 'Generated db script: ' + filePath);\n    }\n}\n\nmodule.exports = MongoDbModeler;"],"names":["path","require","fs","MongoDbModeler","modeling","schema","dataFilesDir","join","connector","database","initIdxFilePath","initFilePath","_writeFile","outputPath","JSON","stringify","existsSync","filePath","content","ensureFileSync","writeFileSync","logger","log","constructor","context","dbOptions","linker","scriptOutputPath","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;AAEA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,EAAE,EAAE,GAAGD,QAAQ;AAEvB;;;CAGC,GACD,MAAME;IAmBFC,SAASC,MAAM,EAAE;QACb,IAAIC,eAAeN,KAAKO,IAAI,CAAC,WAAW,IAAI,CAACC,SAAS,CAACC,QAAQ;QAE/D,IAAIC,kBAAkBV,KAAKO,IAAI,CAACD,cAAc,QAAQ,SAAS;QAC/D,IAAIK,eAAeX,KAAKO,IAAI,CAACD,cAAc,QAAQ,SAAS;QAE5D,IAAI,CAACM,UAAU,CAACZ,KAAKO,IAAI,CAAC,IAAI,CAACM,UAAU,EAAEF,eAAeG,KAAKC,SAAS,CAAC,CAAC,GAAG,MAAM;QAEnF,IAAI,CAACb,GAAGc,UAAU,CAAChB,KAAKO,IAAI,CAAC,IAAI,CAACM,UAAU,EAAEH,mBAAmB;YAC7D,IAAI,CAACE,UAAU,CAACZ,KAAKO,IAAI,CAAC,IAAI,CAACM,UAAU,EAAEH,kBAAkB;QACjE;QAEA,OAAOL;IACX;IAEAO,WAAWK,QAAQ,EAAEC,OAAO,EAAE;QAC1BhB,GAAGiB,cAAc,CAACF;QAClBf,GAAGkB,aAAa,CAACH,UAAUC;QAE3B,IAAI,CAACG,MAAM,CAACC,GAAG,CAAC,QAAQ,0BAA0BL;IACtD;IAtCA;;;;;;;;KAQC,GACDM,YAAYC,OAAO,EAAEhB,SAAS,EAAEiB,SAAS,CAAE;QACvC,IAAI,CAACJ,MAAM,GAAGG,QAAQH,MAAM;QAC5B,IAAI,CAACK,MAAM,GAAGF,QAAQE,MAAM;QAC5B,IAAI,CAACb,UAAU,GAAGW,QAAQG,gBAAgB;QAC1C,IAAI,CAACnB,SAAS,GAAGA;IAGrB;AAuBJ;AAEAoB,OAAOC,OAAO,GAAG1B"}