{"version":3,"sources":["../../src/utils/helpers.js"],"sourcesContent":["const path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\nexports.throwIfFileNotExist = (name, filePath) => {\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Path [${name}=\"${filePath}\"] not exist.`);\n    }\n}\n\nexports.getSchemaConnectors = (app, schemas) => _.mapValues(schemas, (schemaConfig, name) => {\n    let connector = app.getService(schemaConfig.dataSource);\n    if (!connector) {\n        throw new Error(`Connector service not found for data source [${schemaConfig.dataSource}] of schema \"${name}\".`);\n    } \n    return connector;\n});\n\n/**\n * Get default reverse output path.\n * @param {string} prefix \n * @param {bool} override \n * @returns {string} Output path of oolong generated files.\n */\nexports.getDateNamedDir = (baseDir, prefix, override) => {\n    let now = new Date();\n\n    (prefix == null) && (prefix = '');\n\n    let folder = `${prefix}${now.getFullYear()}-${now.getMonth()+1}-${now.getDate()}`;\n    let outputDir = path.join(baseDir, folder);\n\n    if (override) return outputDir;\n\n    let num = 1;\n\n    while (fs.existsSync(outputDir)) {\n        let folder2 = folder + '_' + (++num).toString();\n        outputDir = path.join(baseDir, folder2);\n    }\n\n    return outputDir;\n};\n\nasync function importDataFilesByList(migrator, dataSetPath, dataListFile, ignoreDuplicate) {\n    let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);\n\n    if (!dataList) {\n        return;\n    }\n\n    return eachAsync_(dataList, async line => {\n        line = line.trim();\n\n        if (line.length > 0 && line[0] !== '#') {            \n            let dataFile = path.join(dataSetPath, line);\n            if (!fs.existsSync(dataFile)) {\n                throw new Error(`Data file \"${dataFile}\" not found.`);\n            }\n\n            await migrator.load_(dataFile, ignoreDuplicate);\n        }\n    }); \n}\n\nexports.importDataFiles = async function (migrator, folderName, ignoreDuplicate) {\n    let dataSetPath = path.join(migrator.dbScriptPath, 'data', folderName);\n    if (!fs.existsSync(dataSetPath)) return;\n\n    let dataListFile = path.join(dataSetPath, 'index.list');\n\n    let runtimeDataSetPath, stageDataSetFile, imported = false;    \n\n    if (process.env.STAGE_ENV) {\n        runtimeDataSetPath = path.join(dataSetPath, process.env.STAGE_ENV);        \n        stageDataSetFile = path.join(runtimeDataSetPath, 'index.list');\n    }    \n\n    if (fs.existsSync(dataListFile)) {\n        await importDataFilesByList(migrator, dataSetPath, dataListFile, ignoreDuplicate);      \n        imported = true;  \n    } else {\n        migrator.app.log('warn', `Dataset index file \"${dataListFile}\" not exist.`)\n    }\n    \n    if (stageDataSetFile && fs.existsSync(stageDataSetFile)) {\n        await importDataFilesByList(migrator, runtimeDataSetPath, stageDataSetFile, ignoreDuplicate);    \n        imported = true;      \n    } else if (process.env.STAGE_ENV) {\n        migrator.app.log(imported ? 'info' : 'warn', `Dataset index file of \"${process.env.STAGE_ENV}\" stage env \"${stageDataSetFile}\" not exist.`)\n    }\n    \n    if (!imported) {\n        throw new Error(`Entry file of dataset \"${folderName}\" not found.`);\n    }    \n }"],"names":["path","require","_","eachAsync_","fs","exports","throwIfFileNotExist","name","filePath","existsSync","Error","getSchemaConnectors","app","schemas","mapValues","schemaConfig","connector","getService","dataSource","getDateNamedDir","baseDir","prefix","override","now","Date","folder","getFullYear","getMonth","getDate","outputDir","join","num","folder2","toString","importDataFilesByList","migrator","dataSetPath","dataListFile","ignoreDuplicate","dataList","readFileSync","match","line","trim","length","dataFile","load_","importDataFiles","folderName","dbScriptPath","runtimeDataSetPath","stageDataSetFile","imported","process","env","STAGE_ENV","log"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}