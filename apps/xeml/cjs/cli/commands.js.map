{"version":3,"sources":["../../src/cli/commands.js"],"sourcesContent":["exports.Commands = {    \n    'init': 'Initialize geml configuration.',\n    'clean': 'Remove auto-generated files.',\n    'connect': 'Set data source connection.',\n    'build': 'Generate database scripts and entity models.',\n    'graphql': 'Generate graphql schemas.',\n    'migrate': 'Create database structure.',            \n    'import': 'Import data set.',\n    'export': 'Export data from database.',\n    'pull': 'Pull schema from a databse.'\n};\n\n/**\n * @param {CommandLine} cli - CommandLine object.\n * @param {string} command - Command\n */\nexports.getCommandOptions = (cli, command) => {\n    let cmdOptions = {};\n\n    switch (command) {\n        case 'init':\n            cmdOptions['schema'] = {\n                desc: 'Default schema to initialize',\n                promptMessage: 'Schema name?',\n                promptDefault: 'sample',\n                inquire: true,\n                required: true,\n                silentModeDefault: 'sample'\n            };\n            break;\n\n        case 'connect':\n            cmdOptions['schema'] = {\n                desc: 'Schema to set up connection',\n                promptMessage: 'Schema name?',                \n                inquire: true,\n                required: true\n            };\n            cmdOptions['dbms'] = {\n                alias: [ 'data-source-type' ],\n                desc: 'Data source type to connect',\n                promptMessage: 'Data source type?',                \n                promptType: \"list\",\n                inquire: true,                \n                required: true,\n                choicesProvider: [ 'mysql', 'mongodb', 'rabbitmq'  ]\n            };\n            cmdOptions['ds'] = {\n                alias: [ 'data-source-name' ],\n                desc: 'Data source name',\n                promptMessage: 'Data source name?',                \n                promptDefault: cli => cli.argv['schema'],                \n                inquire: true,                \n                required: true\n            };\n            cmdOptions['conn'] = {\n                alias: [ 'connection-string' ],\n                desc: 'Data source connection string (like URL), e.g. mysql://localhost',\n                promptMessage: 'Connection string?',                     \n                inquire: true,                \n                required: true\n            };\n            break;    \n\n        case 'clean':\n            cmdOptions['json-only'] = {\n                desc: 'Delete intermediate files (JSON files) only',\n                bool: true,\n                default: false,\n            };\n            break;\n\n        case 'build':\n            break;\n\n        case 'graphql':\n            break;\n\n        case 'migrate':\n            cmdOptions['r'] = {\n                desc: 'Reset all data if the database exists',\n                promptMessage: 'Reset existing database?',\n                promptDefault: false,\n                inquire: true,\n                required: true,\n                alias: [ 'reset' ],\n                bool: true\n            };\n            break;        \n\n        case 'import':\n            cmdOptions['schema'] = {\n                desc: 'The schema to list',                               \n                required: true                \n            };\n            cmdOptions['dataset'] = {\n                desc: 'The name of the data set to import',                \n                alias: [ 'ds', 'data' ],\n                required: true                \n            };\n            cmdOptions['ignore'] = {\n                desc: 'Ignore exception on duplicate',                \n                alias: [ 'ignore-duplicate' ],\n                bool: true                \n            };\n            break;\n\n        case 'export':\n            cmdOptions['schema'] = {\n                desc: 'The schema to export',\n                required: true        \n            };      \n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'O' ],\n                bool: true\n            };            \n            break;\n\n        case 'pull':        \n            cmdOptions['schema'] = {\n                desc: 'The schema to pull from database',\n                required: true        \n            };\n\n            cmdOptions['override'] = {\n                desc: 'Override existing output',\n                alias: [ 'O' ],\n                bool: true\n            };\n            break;\n        \n        default:\n            //module general options\n            break;\n    }\n\n    return cmdOptions;\n};\n\n"],"names":["exports","Commands","getCommandOptions","cli","command","cmdOptions","desc","promptMessage","promptDefault","inquire","required","silentModeDefault","alias","promptType","choicesProvider","argv","bool","default"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAAA,QAAQC,QAAQ,GAAG;IACf,QAAQ;IACR,SAAS;IACT,WAAW;IACX,SAAS;IACT,WAAW;IACX,WAAW;IACX,UAAU;IACV,UAAU;IACV,QAAQ;AACZ;AAEA;;;CAGC,GACDD,QAAQE,iBAAiB,GAAG,CAACC,KAAKC;IAC9B,IAAIC,aAAa,CAAC;IAElB,OAAQD;QACJ,KAAK;YACDC,UAAU,CAAC,SAAS,GAAG;gBACnBC,MAAM;gBACNC,eAAe;gBACfC,eAAe;gBACfC,SAAS;gBACTC,UAAU;gBACVC,mBAAmB;YACvB;YACA;QAEJ,KAAK;YACDN,UAAU,CAAC,SAAS,GAAG;gBACnBC,MAAM;gBACNC,eAAe;gBACfE,SAAS;gBACTC,UAAU;YACd;YACAL,UAAU,CAAC,OAAO,GAAG;gBACjBO,OAAO;oBAAE;iBAAoB;gBAC7BN,MAAM;gBACNC,eAAe;gBACfM,YAAY;gBACZJ,SAAS;gBACTC,UAAU;gBACVI,iBAAiB;oBAAE;oBAAS;oBAAW;iBAAa;YACxD;YACAT,UAAU,CAAC,KAAK,GAAG;gBACfO,OAAO;oBAAE;iBAAoB;gBAC7BN,MAAM;gBACNC,eAAe;gBACfC,eAAeL,CAAAA,MAAOA,IAAIY,IAAI,CAAC,SAAS;gBACxCN,SAAS;gBACTC,UAAU;YACd;YACAL,UAAU,CAAC,OAAO,GAAG;gBACjBO,OAAO;oBAAE;iBAAqB;gBAC9BN,MAAM;gBACNC,eAAe;gBACfE,SAAS;gBACTC,UAAU;YACd;YACA;QAEJ,KAAK;YACDL,UAAU,CAAC,YAAY,GAAG;gBACtBC,MAAM;gBACNU,MAAM;gBACNC,SAAS;YACb;YACA;QAEJ,KAAK;YACD;QAEJ,KAAK;YACD;QAEJ,KAAK;YACDZ,UAAU,CAAC,IAAI,GAAG;gBACdC,MAAM;gBACNC,eAAe;gBACfC,eAAe;gBACfC,SAAS;gBACTC,UAAU;gBACVE,OAAO;oBAAE;iBAAS;gBAClBI,MAAM;YACV;YACA;QAEJ,KAAK;YACDX,UAAU,CAAC,SAAS,GAAG;gBACnBC,MAAM;gBACNI,UAAU;YACd;YACAL,UAAU,CAAC,UAAU,GAAG;gBACpBC,MAAM;gBACNM,OAAO;oBAAE;oBAAM;iBAAQ;gBACvBF,UAAU;YACd;YACAL,UAAU,CAAC,SAAS,GAAG;gBACnBC,MAAM;gBACNM,OAAO;oBAAE;iBAAoB;gBAC7BI,MAAM;YACV;YACA;QAEJ,KAAK;YACDX,UAAU,CAAC,SAAS,GAAG;gBACnBC,MAAM;gBACNI,UAAU;YACd;YACAL,UAAU,CAAC,WAAW,GAAG;gBACrBC,MAAM;gBACNM,OAAO;oBAAE;iBAAK;gBACdI,MAAM;YACV;YACA;QAEJ,KAAK;YACDX,UAAU,CAAC,SAAS,GAAG;gBACnBC,MAAM;gBACNI,UAAU;YACd;YAEAL,UAAU,CAAC,WAAW,GAAG;gBACrBC,MAAM;gBACNM,OAAO;oBAAE;iBAAK;gBACdI,MAAM;YACV;YACA;QAEJ;YAEI;IACR;IAEA,OAAOX;AACX"}