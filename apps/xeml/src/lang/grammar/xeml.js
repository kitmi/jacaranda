/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,16],$V6=[1,20],$V7=[1,23],$V8=[5,16,23,30,35,47,49,100,110],$V9=[1,29],$Va=[1,30],$Vb=[1,39],$Vc=[1,40],$Vd=[1,41],$Ve=[18,60,92,94,96,108,109,125,126,157,159,160,178,181,182,189,200,259,285,301,307,313,314],$Vf=[2,299],$Vg=[1,60],$Vh=[1,68],$Vi=[1,65],$Vj=[297,301],$Vk=[18,108,109],$Vl=[1,79],$Vm=[1,90],$Vn=[1,91],$Vo=[1,85],$Vp=[1,86],$Vq=[1,87],$Vr=[1,92],$Vs=[1,93],$Vt=[1,94],$Vu=[1,95],$Vv=[1,101],$Vw=[1,138],$Vx=[1,139],$Vy=[1,140],$Vz=[18,92,94,96,109,125,159,160,192,241,246,253,259,285,301,308,314,320,321,323,325,326,327,328,329,330,331,334,335],$VA=[1,141],$VB=[1,142],$VC=[21,41,43],$VD=[2,120],$VE=[1,146],$VF=[21,122,124,126,130,136,193,194,201,209,256,262],$VG=[1,151],$VH=[18,189,285],$VI=[1,166],$VJ=[1,175],$VK=[1,172],$VL=[18,125],$VM=[18,92,94,96,125],$VN=[18,109,125,159,160,192,241,246,253,259,285,301,308,314,320,321,323,325,326,327,328,329,330,331,334,335],$VO=[18,92,94,96,125,301],$VP=[21,41],$VQ=[1,212],$VR=[1,222],$VS=[1,214],$VT=[1,215],$VU=[1,216],$VV=[1,217],$VW=[1,218],$VX=[1,219],$VY=[1,220],$VZ=[1,221],$V_=[1,223],$V$=[18,92,94,96,108,109,125,189,285,301],$V01=[1,227],$V11=[2,275],$V21=[1,236],$V31=[285,308],$V41=[192,314],$V51=[1,242],$V61=[1,270],$V71=[18,109,200],$V81=[1,319],$V91=[1,335],$Va1=[1,341],$Vb1=[1,342],$Vc1=[1,339],$Vd1=[1,340],$Ve1=[1,334],$Vf1=[1,336],$Vg1=[1,345],$Vh1=[1,359],$Vi1=[1,360],$Vj1=[1,361],$Vk1=[1,431],$Vl1=[1,424],$Vm1=[18,92,94,96,125,159,160,301],$Vn1=[1,440],$Vo1=[18,125,301],$Vp1=[1,473],$Vq1=[1,474],$Vr1=[18,125,160,301],$Vs1=[297,298,301],$Vt1=[1,486],$Vu1=[1,484],$Vv1=[1,488],$Vw1=[1,487],$Vx1=[1,504],$Vy1=[1,505],$Vz1=[18,125,126,160,237,238,239,240,241,242,243,244,245,246,301],$VA1=[18,92,94,96,125,159,160,192,301,334,335],$VB1=[1,523],$VC1=[1,525],$VD1=[1,524],$VE1=[1,533],$VF1=[1,530],$VG1=[1,521],$VH1=[1,522],$VI1=[1,526],$VJ1=[1,527],$VK1=[1,528],$VL1=[1,529],$VM1=[1,531],$VN1=[1,532],$VO1=[1,534],$VP1=[18,126],$VQ1=[21,228,229,248],$VR1=[46,99,191,295,297,301,302,303,304,305,306,307,313,321],$VS1=[21,266,269,271],$VT1=[1,615],$VU1=[1,616],$VV1=[18,297,301],$VW1=[21,222,223,228,229,248],$VX1=[18,336],$VY1=[21,187,276];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"modifier_def_statement":11,"schema_statement":12,"customize_statement":13,"override_statement":14,"entity_statement":15,"import":16,"identifier_or_string":17,"NEWLINE":18,"INDENT":19,"import_statement_block":20,"DEDENT":21,"import_statement_option0":22,"const":23,"const_statement_item":24,"const_statement_block":25,"const_statement_option0":26,"identifier":27,"=":28,"literal":29,"modifier":30,"type_modifier":31,"modifier_def_statement_block":32,"modifier_def_statement_option0":33,"type_modifier_def":34,"schema":35,"schema_statement_block":36,"schema_statement_option0":37,"comment_or_not":38,"schema_statement_block_option0":39,"schema_views_or_not":40,"schema_views":41,"schema_entities":42,"entities":43,"schema_entities_block":44,"schema_entities_option0":45,"NAMESPACED":46,"customize":47,"customize_statement_option0":48,"type":49,"type_statement_item":50,"type_statement_block":51,"type_statement_option0":52,"type_base":53,"entity_or_field_comment":54,"type_modifiers_list":55,"type_statement_item_option0":56,"type_infos":57,"type_statement_item_option1":58,"type_statement_item_option2":59,":":60,"types":61,"int_keyword":62,"number_keyword":63,"text_keyword":64,"bool_keyword":65,"binary_keyword":66,"datetime_keyword":67,"any":68,"enum":69,"array":70,"object_keyword":71,"bigint":72,"int":73,"integer":74,"number":75,"float":76,"decimal":77,"text":78,"string":79,"bool":80,"boolean":81,"object":82,"json":83,"blob":84,"binary":85,"buffer":86,"datetime":87,"timestamp":88,"type_info":89,"simple_function_call":90,"type_modifiers":91,"|~":92,"type_modifier_validators":93,"|>":94,"identifier_or_general_function_call":95,"|=":96,"modifier_def_item":97,"general_function_call":98,"REGEXP":99,"override":100,"entity_statement_header":101,"entity_statement_block":102,"override_statement_option0":103,"entity_statement_option0":104,"entity_statement_header0":105,"entity_base_keywords":106,"id_or_string_or_call_list":107,"extends":108,"is":109,"entity":110,"entity_sub_items":111,"entity_sub_item":112,"with_features":113,"has_fields":114,"associations_statement":115,"key_statement":116,"index_statement":117,"input_statement":118,"views_statement":119,"data_statement":120,"code_statement":121,"interfaces_statement":122,"triggers_statement":123,"code":124,"INLINE_COMMENT":125,"with":126,"with_features_block":127,"with_features_option0":128,"id_or_string_or_call":129,"has":130,"has_fields_block":131,"has_fields_option0":132,"field_item":133,"field_item_body":134,"modifiable_field":135,"associations":136,"associations_block":137,"associations_statement_option0":138,"association_item":139,"association_item_many_to_one":140,"association_item_new_field":141,"association_item_existing_field":142,"association_type_referee":143,"association_item_many_to_one_option0":144,"association_as":145,"association_item_many_to_one_option1":146,"association_item_many_to_one_option2":147,"association_through":148,"association_item_many_to_one_option3":149,"association_item_many_to_one_option4":150,"association_item_many_to_one_option5":151,"association_item_belong_refer_to_base":152,"belongs_to_keywords":153,"association_item_belong_refer_to_base_option0":154,"refers_to_keywords":155,"association_item_belong_refer_to_base_option1":156,"of":157,"association_item_belong_refer_to_base_option2":158,"on":159,"as":160,"association_item_fields_props":161,"association_item_fields_props_option0":162,"association_item_fields_props_option1":163,"association_item_fields_props_option2":164,"refersTo":165,"refers":166,"to":167,"belongsTo":168,"belongs":169,"hasOne":170,"one":171,"hasMany":172,"many":173,"connected_by_keywords":174,"identifier_string_or_dotname":175,"association_extra_condition":176,"association_connection":177,"being":178,"array_of_identifier_or_string":179,"association_condition":180,"connectedBy":181,"connected":182,"by":183,"conditional_expression":184,"association_cases_block":185,"association_cases":186,"when":187,"association_qualifiers":188,"optional":189,"default":190,"(":191,")":192,"key":193,"index":194,"index_item":195,"index_statement_block":196,"index_statement_option0":197,"index_item_body":198,"index_item_option0":199,"unique":200,"input":201,"input_statement_block":202,"input_statement_option0":203,"input_statement_def":204,"input_block":205,"input_block_item":206,"input_block_item_base":207,"input_block_item_with_spec":208,"views":209,"views_statement_block":210,"views_statement_option0":211,"views_statement_def":212,"entity_views_block":213,"views_statement_select":214,"entity_views_block_option0":215,"entity_views_block_repetition0":216,"entity_views_block_option1":217,"select":218,"entity_views_block_select":219,"views_statement_select_option0":220,"groupby_keywords":221,"groupBy":222,"group":223,"views_statement_group_by":224,"identifier_string_or_dotname_block":225,"views_statement_group_by_option0":226,"orderby_keywords":227,"orderBy":228,"order":229,"views_statement_order_by":230,"order_by_block":231,"views_statement_order_by_option0":232,"views_statement_order_by_option1":233,"order_by_clause":234,"order_ascend_keywords":235,"order_descend_keywords":236,"ascend":237,"ASC":238,"^":239,"asc":240,"<":241,"descend":242,"DESC":243,"v":244,"desc":245,">":246,"views_statement_options":247,"options":248,"entity_views_block_options":249,"views_statement_options_option0":250,"entity_views_block_select_item":251,"SELECT_ALL":252,"*":253,"entity_views_block_select_item_repetition_plus0":254,"entity_views_block_select_item_repetition_plus1":255,"data":256,"data_records":257,"data_statement_option0":258,"in":259,"inline_object":260,"inline_array":261,"triggers":262,"triggers_statement_block":263,"triggers_statement_option0":264,"triggers_operation":265,"onCreate":266,"triggers_operation_block":267,"triggers_operation_option0":268,"onCreateOrUpdate":269,"triggers_operation_option1":270,"onDelete":271,"triggers_operation_option2":272,"triggers_operation_item":273,"triggers_result_block":274,"triggers_operation_item_option0":275,"always":276,"triggers_operation_item_option1":277,"modifiable_field_option0":278,"modifiable_field_option1":279,"modifiable_field_option2":280,"modifiable_value":281,"gfc_param0":282,"modifiable_param":283,"id_or_string_or_call_list0":284,",":285,"nfc_param_list":286,"nfc_param":287,"nfc_param_list0":288,"literal_and_value_expression":289,"unary_expression":290,"binary_expression":291,"boolean_expression":292,"gfc_param_list":293,"gfc_param_list0":294,"REFERENCE":295,"?":296,"STRING":297,"DOTNAME":298,"identifier_string_or_dotname_list":299,"identifier_string_or_dotname_list0":300,"NAME":301,"INTEGER":302,"FLOAT":303,"BOOL":304,"SCRIPT":305,"SYMBOL":306,"{":307,"}":308,"kv_pairs":309,"kv_pair_item":310,"non_exist":311,"kv_pairs0":312,"[":313,"]":314,"identifier_or_string_list":315,"identifier_or_string_list0":316,"value":317,"simple_expression":318,"logical_expression":319,"exists":320,"not":321,"null":322,"~":323,"all":324,">=":325,"<=":326,"==":327,"!=":328,"+":329,"-":330,"/":331,"logical_expression_right":332,"logical_operators":333,"and":334,"or":335,"EXCLUDE_COLUMN":336,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"import",18:"NEWLINE",19:"INDENT",21:"DEDENT",23:"const",28:"=",30:"modifier",35:"schema",41:"schema_views",43:"entities",46:"NAMESPACED",47:"customize",49:"type",60:":",68:"any",69:"enum",70:"array",72:"bigint",73:"int",74:"integer",75:"number",76:"float",77:"decimal",78:"text",79:"string",80:"bool",81:"boolean",82:"object",83:"json",84:"blob",85:"binary",86:"buffer",87:"datetime",88:"timestamp",92:"|~",94:"|>",96:"|=",99:"REGEXP",100:"override",108:"extends",109:"is",110:"entity",122:"interfaces_statement",124:"code",125:"INLINE_COMMENT",126:"with",130:"has",136:"associations",157:"of",159:"on",160:"as",165:"refersTo",166:"refers",167:"to",168:"belongsTo",169:"belongs",170:"hasOne",171:"one",172:"hasMany",173:"many",178:"being",181:"connectedBy",182:"connected",183:"by",187:"when",189:"optional",190:"default",191:"(",192:")",193:"key",194:"index",200:"unique",201:"input",209:"views",218:"select",222:"groupBy",223:"group",228:"orderBy",229:"order",237:"ascend",238:"ASC",239:"^",240:"asc",241:"<",242:"descend",243:"DESC",244:"v",245:"desc",246:">",248:"options",252:"SELECT_ALL",253:"*",256:"data",259:"in",262:"triggers",266:"onCreate",269:"onCreateOrUpdate",271:"onDelete",274:"triggers_result_block",276:"always",285:",",295:"REFERENCE",296:"?",297:"STRING",298:"DOTNAME",301:"NAME",302:"INTEGER",303:"FLOAT",304:"BOOL",305:"SCRIPT",306:"SYMBOL",307:"{",308:"}",313:"[",314:"]",320:"exists",321:"not",322:"null",323:"~",324:"all",325:">=",326:"<=",327:"==",328:"!=",329:"+",330:"-",331:"/",334:"and",335:"or",336:"EXCLUDE_COLUMN"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[20,2],[20,3],[9,3],[9,6],[24,3],[25,2],[25,3],[11,3],[11,6],[32,2],[32,3],[12,7],[36,3],[40,0],[40,1],[42,6],[44,2],[44,2],[44,3],[44,3],[13,6],[10,3],[10,6],[50,2],[50,3],[50,4],[50,5],[51,2],[51,3],[53,2],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[61,1],[62,1],[62,1],[63,1],[63,1],[63,1],[64,1],[64,1],[65,1],[65,1],[71,1],[71,1],[66,1],[66,1],[66,1],[67,1],[67,1],[57,1],[57,2],[89,1],[89,1],[55,1],[91,1],[91,2],[31,2],[31,2],[31,2],[34,2],[34,2],[34,2],[97,1],[97,1],[95,1],[95,1],[95,1],[93,1],[93,1],[14,3],[14,7],[15,2],[15,6],[101,1],[101,3],[106,1],[106,1],[105,2],[105,2],[102,1],[102,2],[111,1],[111,2],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[112,1],[121,3],[38,0],[38,2],[113,6],[127,2],[127,3],[114,6],[131,2],[131,3],[133,1],[133,2],[54,1],[134,1],[115,6],[137,2],[137,3],[139,1],[139,1],[139,1],[140,2],[140,3],[140,4],[140,5],[140,6],[152,3],[152,3],[152,5],[142,3],[141,1],[141,3],[141,2],[141,4],[161,1],[161,2],[161,3],[155,1],[155,2],[153,1],[153,2],[143,1],[143,2],[143,1],[143,2],[148,2],[148,3],[148,1],[148,2],[148,1],[174,1],[174,2],[176,2],[185,5],[177,2],[177,3],[186,3],[186,4],[180,2],[145,2],[188,1],[188,4],[116,3],[116,3],[117,3],[117,6],[196,2],[196,3],[195,1],[195,3],[198,1],[198,1],[118,6],[202,6],[202,6],[204,1],[204,3],[205,2],[205,3],[206,1],[206,1],[207,1],[207,2],[208,3],[208,4],[119,6],[210,6],[210,6],[212,1],[212,3],[213,4],[214,6],[221,1],[221,2],[224,6],[227,1],[227,2],[230,6],[230,7],[231,2],[231,3],[234,1],[234,2],[234,2],[235,1],[235,1],[235,1],[235,1],[235,1],[236,1],[236,1],[236,1],[236,1],[236,1],[247,6],[249,2],[249,3],[219,2],[219,3],[251,1],[251,1],[251,2],[251,2],[120,3],[120,4],[120,6],[257,1],[257,1],[123,6],[265,6],[265,6],[265,6],[263,1],[263,2],[267,1],[267,2],[273,7],[273,6],[135,1],[135,2],[135,3],[135,4],[281,1],[281,2],[283,1],[129,1],[129,1],[107,1],[107,2],[284,2],[284,3],[90,3],[90,4],[286,1],[286,2],[288,2],[288,3],[287,1],[287,1],[289,1],[289,1],[289,1],[98,4],[98,4],[293,1],[293,2],[294,2],[294,3],[294,1],[282,1],[282,1],[282,2],[282,1],[175,1],[175,1],[175,1],[225,2],[225,3],[299,1],[299,2],[300,2],[300,3],[17,1],[17,1],[27,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[260,2],[260,3],[310,3],[310,2],[310,3],[311,0],[309,1],[309,2],[312,2],[312,3],[261,2],[261,3],[179,3],[315,1],[315,2],[316,2],[316,3],[317,1],[317,1],[184,1],[184,1],[184,1],[318,1],[318,1],[318,3],[290,2],[290,3],[290,3],[290,4],[290,4],[292,3],[292,4],[292,4],[291,3],[291,3],[291,3],[291,3],[291,3],[291,3],[291,3],[291,4],[291,3],[291,3],[291,3],[291,3],[319,2],[332,2],[333,1],[333,1],[22,0],[22,1],[26,0],[26,1],[33,0],[33,1],[37,0],[37,1],[39,0],[39,1],[45,0],[45,1],[48,0],[48,1],[52,0],[52,1],[56,0],[56,1],[58,0],[58,1],[59,0],[59,1],[103,0],[103,1],[104,0],[104,1],[128,0],[128,1],[132,0],[132,1],[138,0],[138,1],[144,0],[144,1],[146,0],[146,1],[147,0],[147,1],[149,0],[149,1],[150,0],[150,1],[151,0],[151,1],[154,0],[154,1],[156,0],[156,1],[158,0],[158,1],[162,0],[162,1],[163,0],[163,1],[164,0],[164,1],[197,0],[197,1],[199,0],[199,1],[203,0],[203,1],[211,0],[211,1],[215,0],[215,1],[216,0],[216,2],[217,0],[217,1],[220,0],[220,1],[226,0],[226,1],[232,0],[232,1],[233,0],[233,1],[250,0],[250,1],[254,1],[254,2],[255,1],[255,2],[258,0],[258,1],[264,0],[264,1],[268,0],[268,1],[270,0],[270,1],[272,0],[272,1],[275,0],[275,1],[277,0],[277,1],[278,0],[278,1],[279,0],[279,1],[280,0],[280,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 14:
this.$ = state.import($$[$0-1]) ;
break;
case 16:
this.$ = state.import($$[$0-1]);
break;
case 17:
this.$ = state.import($$[$0-2]);
break;
case 20:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 25:
this.$ = state.define($$[$0-1].$xt, $$[$0-1].name, $$[$0-1], _$[$0-1].first_line);
break;
case 26:
this.$ = state.define($$[$0-2].$xt, $$[$0-2].name, $$[$0-2], _$[$0-2].first_line);
break;
case 27:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 28:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 31:
this.$ = { entities: $$[$0-2] };
break;
case 32: case 33:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 34: case 35:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 36:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 39:
this.$ = state.defineType($$[$0-1], $$[$0], _$[$0-1].first_line);
break;
case 40:
this.$ = state.defineType($$[$0-2], { ...$$[$0-1], ...$$[$0] }, _$[$0-2].first_line);
break;
case 41:
this.$ = state.defineType($$[$0-3], { ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-3].first_line);
break;
case 42:
this.$ = state.defineType($$[$0-4], { ...$$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-4].first_line)    ;
break;
case 45: case 81: case 102: case 103: case 104: case 171: case 319:
this.$ = $$[$0];
break;
case 46:
this.$ = { type: 'integer' };
break;
case 47:
this.$ = { type: 'number' }    ;
break;
case 48:
this.$ = { type: 'text' };
break;
case 49:
this.$ = { type: 'boolean' };
break;
case 50:
this.$ = { type: 'binary' };
break;
case 51:
this.$ = { type: 'datetime' };
break;
case 52:
this.$ = { type: 'any' };
break;
case 53:
this.$ = { type: 'enum' };
break;
case 54:
this.$ = { type: 'array' };
break;
case 55:
this.$ = { type: 'object' };
break;
case 56:
this.$ = { type: $$[$0] };
break;
case 57:
this.$ = { type: 'bigint' };
break;
case 75: case 105: case 318: case 320:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 76:
this.$ = { [$$[$0]]: true };
break;
case 77:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 78:
this.$ = { modifiers: $$[$0] };
break;
case 79: case 249: case 251: case 264: case 266: case 270: case 272: case 283: case 295: case 297: case 324: case 326:
this.$ = [ $$[$0] ];
break;
case 80: case 250: case 252: case 267: case 271: case 273: case 284: case 298: case 325: case 327:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 82: case 85:
this.$ = state.normalizeProcessor(...$$[$0])        ;
break;
case 83: case 86:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 84: case 92:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 87: case 90: case 91: case 440: case 442:
this.$ = [$$[$0]];
break;
case 88: case 89:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 93:
this.$ = state.normalizeValidator('matches', $$[$0])        ;
break;
case 94:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 95:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 96:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 97:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 98:
this.$ = [ $$[$0], {} ];
break;
case 99:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 107:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 119:
this.$ = { code: $$[$0-1] };
break;
case 121:
this.$ = { comment: $$[$0-1] };
break;
case 122:
this.$ = { features: $$[$0-2] };
break;
case 123: case 133: case 173: case 183: case 194: case 216: case 234: case 293:
this.$ = [ $$[$0-1] ];
break;
case 124: case 134: case 184: case 195: case 217: case 235: case 294:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 125:
this.$ = { fields: $$[$0-2] };
break;
case 126:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 127:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 129: case 152:
this.$ = { ...$$[$0-1], ...$$[$0] };
break;
case 130:
this.$ = { comment: $$[$0] };
break;
case 132:
this.$ = { associations: $$[$0-2] };
break;
case 138:
this.$ = { type: $$[$0-1], destEntity: $$[$0] }        ;
break;
case 139:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], fieldProps: $$[$0] }        ;
break;
case 140:
this.$ = { type: $$[$0-3], destEntity: $$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 141:
this.$ = { type: $$[$0-4], destEntity: $$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 142:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 143: case 144:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], ...$$[$0] }      ;
break;
case 145:
this.$ = { type: $$[$0-4], destEntity: $$[$0-1], destField: $$[$0-3], ...$$[$0] }          ;
break;
case 146:
this.$ = { ...$$[$0-2], srcField: $$[$0], existingField: true };
break;
case 148:
this.$ = { ...$$[$0-2], srcField: $$[$0] };
break;
case 149:
this.$ = { ...$$[$0-1], fieldProps: $$[$0] };
break;
case 150:
this.$ = { ...$$[$0-3], srcField: $$[$0-1], fieldProps: $$[$0] };
break;
case 153:
this.$ = { ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 159:
this.$ = "hasOne";
break;
case 161:
this.$ = "hasMany";
break;
case 162:
this.$ = { by: $$[$0] }    ;
break;
case 163:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 164:
this.$ = { remoteField: $$[$0] }     ;
break;
case 165:
this.$ = { remoteField: $$[$0] }      ;
break;
case 166:
this.$ = { with: $$[$0] };
break;
case 169:
this.$ = { with: $$[$0] }    ;
break;
case 170:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 172:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 174:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 175:
this.$ = $$[$0];;
break;
case 176:
this.$ = { srcField: $$[$0] };
break;
case 177:
this.$ = { optional: true };
break;
case 178:
this.$ = { default: $$[$0-1] };
break;
case 179:
this.$ = { key: $$[$0-1] };
break;
case 180:
this.$ = { key: $$[$0-1] } ;
break;
case 181:
this.$ = { indexes: [$$[$0-1]] };
break;
case 182:
this.$ = { indexes: $$[$0-2] };
break;
case 186:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 187: case 188:
this.$ = { fields: $$[$0] };
break;
case 189:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 190: case 203:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 191: case 204:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 192: case 198: case 205:
this.$ = { name: $$[$0] };
break;
case 193: case 206:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 199:
this.$ = { name: $$[$0-1], optional: true };
break;
case 200:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 201:
this.$ = { ...$$[$0-3], spec: $$[$0-1], optional: true };
break;
case 202:
this.$ = { views: $$[$0-2] }     ;
break;
case 207:
this.$ = { $select: $$[$0-3], ...($$[$0-2] ? { $groupBy: $$[$0-2] } : null), ...($$[$0-1] && $$[$0-1].length > 0 ? { $orderBySet: $$[$0-1] } : null), ...$$[$0] };
break;
case 208: case 211: case 231:
this.$ = $$[$0-2];
break;
case 214:
this.$ = { "$default": $$[$0-2] };
break;
case 215:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 218:
this.$ = { field: $$[$0], ascend: true };
break;
case 219:
this.$ = { field: $$[$0-1], ascend: true }    ;
break;
case 220:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 232:
this.$ = state.idOrFunctionToKV($$[$0-1]);
break;
case 233:
this.$ = { ...state.idOrFunctionToKV($$[$0-2]), ...$$[$0] };
break;
case 238: case 239:
this.$ = { $xt: "ExclusiveSelect", columnSet: $$[$0-1], excludes: $$[$0] };
break;
case 240:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 241:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 242:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 245:
this.$ = { triggers: $$[$0-2] };
break;
case 246:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 247:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 248:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 253:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 254:
this.$ = { do: $$[$0-2] };
break;
case 255:
this.$ = { name: $$[$0], type: $$[$0] };
break;
case 256:
this.$ = { name: $$[$0-1], type: $$[$0-1], ...$$[$0] };
break;
case 257:
this.$ = { name: $$[$0-2], type: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 258:
this.$ = { name: $$[$0-3], type: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 259:
this.$ = state.normalizePipedValue($$[$0]);
break;
case 260:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 265: case 282:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 268:
this.$ = { name: $$[$0-2], args: [] };
break;
case 269: case 279: case 280:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 275:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 281:
this.$ = [ $$[$0] ]    ;
break;
case 285: case 321: case 426:
this.$ = [];
break;
case 288:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 296:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 311:
this.$ = {}    ;
break;
case 312: case 322: case 323: case 335:
this.$ = $$[$0-1];
break;
case 313: case 315:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 314:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 329:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 336:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 337:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 338:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 339:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 340:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 341:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 342:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 343:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 344:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 345:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 346:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 347:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 348:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 349:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 350:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 351:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 352:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 353:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 354:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 355:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 356:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 357:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 358:
this.$ = { operator: 'and' };
break;
case 359:
this.$ = { operator: 'or' };
break;
case 427: case 441: case 443:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V0,23:$V1,30:$V2,35:$V3,47:$V4,49:$V5,100:$V6,101:21,105:22,110:$V7},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,24]},{5:[2,4],6:25,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:$V0,23:$V1,30:$V2,35:$V3,47:$V4,49:$V5,100:$V6,101:21,105:22,110:$V7},o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),{17:26,18:[1,27],27:28,297:$V9,301:$Va},{18:[1,32],24:31,27:33,301:$Va},{17:36,18:[1,35],27:28,50:34,297:$V9,301:$Va},{18:[1,38],31:37,92:$Vb,94:$Vc,96:$Vd},{17:42,27:28,297:$V9,301:$Va},{18:[1,43]},{101:44,105:22,110:$V7},{18:[1,45]},{18:[2,98],106:46,108:[1,47],109:[1,48]},{17:49,27:51,90:50,297:$V9,301:$Va},{1:[2,3]},{5:[2,5]},{18:[1,52]},{19:[1,53]},o($Ve,$Vf),o($Ve,[2,300]),o([18,28,60,92,94,96,108,109,125,126,157,159,160,178,181,182,189,191,192,200,237,238,239,240,241,242,243,244,245,246,253,259,285,301,307,308,313,314,320,321,323,325,326,327,328,329,330,331,334,335],[2,301]),{18:[1,54]},{19:[1,55]},{28:[1,56]},{18:[1,57]},{19:[1,58]},{53:59,60:$Vg},{18:[1,61]},{19:[1,62]},{27:67,46:$Vh,93:63,95:64,98:66,99:$Vi,301:$Va},{27:67,46:$Vh,95:69,98:66,301:$Va},{27:67,46:$Vh,95:70,98:66,301:$Va},{18:[1,71]},{19:[1,72]},{18:[1,73]},o($V8,[2,96],{19:[1,74]}),{17:77,27:51,90:78,107:75,129:76,297:$V9,301:$Va},o($Vj,[2,100]),o($Vj,[2,101]),o($Vk,[2,102]),o($Vk,[2,103]),o([18,108,109,189,285],$Vf,{191:$Vl}),o($V8,[2,14]),{17:81,20:80,27:28,297:$V9,301:$Va},o($V8,[2,18]),{24:83,25:82,27:33,301:$Va},{29:84,99:$Vm,260:88,261:89,297:$Vn,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},o($V8,[2,37]),{17:36,27:28,50:97,51:96,297:$V9,301:$Va},{18:[2,39],27:105,31:104,54:98,55:99,57:100,89:103,90:106,91:102,92:$Vb,94:$Vc,96:$Vd,125:$Vv,301:$Va},{17:118,27:28,61:107,62:108,63:109,64:110,65:111,66:112,67:113,68:[1,114],69:[1,115],70:[1,116],71:117,72:[1,119],73:[1,120],74:[1,121],75:[1,122],76:[1,123],77:[1,124],78:[1,125],79:[1,126],80:[1,127],81:[1,128],82:[1,134],83:[1,135],84:[1,129],85:[1,130],86:[1,131],87:[1,132],88:[1,133],297:$V9,301:$Va},o($V8,[2,23]),{32:136,34:137,92:$Vw,94:$Vx,96:$Vy},o($Vz,[2,81]),o($Vz,[2,92]),o($Vz,[2,93]),o($Vz,[2,89]),o($Vz,[2,90],{191:$VA}),o($Vz,[2,91],{191:$VB}),o($Vz,[2,82]),o($Vz,[2,83]),{19:[1,143]},o($VC,$VD,{36:144,38:145,125:$VE}),o($V8,[2,94],{19:[1,147]}),o($VF,$VD,{102:148,38:149,125:$VE}),{18:[2,99]},{18:[2,264],284:150,285:$VG},o($VH,[2,262]),o($VH,[2,263]),{27:156,29:155,99:$Vm,192:[1,152],260:88,261:89,286:153,287:154,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{21:[1,157]},{18:[1,158]},{21:[1,159]},{18:[1,160]},{18:[2,20]},o($Vz,[2,302]),o($Vz,[2,303]),o($Vz,[2,304]),o($Vz,[2,305]),o($Vz,[2,306]),o($Vz,[2,307]),o($Vz,[2,308]),o($Vz,[2,309]),o($Vz,[2,310]),{17:164,27:165,297:$V9,301:$Va,302:$VI,308:[1,161],309:162,310:163},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:169,282:170,287:171,293:168,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,314:[1,167]},{21:[1,176]},{18:[1,177]},{18:[2,40]},{18:[2,376],54:179,56:178,125:$Vv},o($VL,[2,378],{91:102,31:104,58:180,55:181,92:$Vb,94:$Vc,96:$Vd}),{18:[2,130]},o($Vz,[2,78]),o($VM,[2,74],{89:103,27:105,90:106,57:182,301:$Va}),o($VN,[2,79],{31:104,91:183,92:$Vb,94:$Vc,96:$Vd}),o($VO,[2,76],{191:$Vl}),o($VO,[2,77]),o($VO,[2,45]),o($VO,[2,46]),o($VO,[2,47]),o($VO,[2,48]),o($VO,[2,49]),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,52]),o($VO,[2,53]),o($VO,[2,54]),o($VO,[2,55]),o($VO,[2,56]),o($VO,[2,57]),o($VO,[2,58]),o($VO,[2,59]),o($VO,[2,60]),o($VO,[2,61]),o($VO,[2,62]),o($VO,[2,63]),o($VO,[2,64]),o($VO,[2,65]),o($VO,[2,66]),o($VO,[2,69]),o($VO,[2,70]),o($VO,[2,71]),o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,67]),o($VO,[2,68]),{21:[1,184]},{18:[1,185]},{27:187,90:188,97:186,301:$Va},{27:187,90:188,97:189,301:$Va},{27:187,90:188,97:190,301:$Va},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:169,282:170,287:171,293:191,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:169,282:170,287:171,293:192,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},o($VC,$VD,{38:145,36:193,125:$VE}),{21:[1,194]},o($VP,[2,368],{39:195,42:196,43:[1,197]}),{18:[1,198]},o($VF,$VD,{38:149,102:199,125:$VE}),{21:[1,200]},{21:[2,104],111:201,112:202,113:203,114:204,115:205,116:206,117:207,118:208,119:209,120:210,121:211,122:$VQ,123:213,124:$VR,126:$VS,130:$VT,136:$VU,193:$VV,194:$VW,201:$VX,209:$VY,256:$VZ,262:$V_},{18:[2,265]},{17:77,27:51,90:78,129:224,297:$V9,301:$Va},o($V$,[2,268]),{192:[1,225]},{192:[2,270],285:$V01,288:226},o($Vz,[2,274]),o([192,285],$V11),o($V8,[2,360],{22:228,18:[1,229]}),{17:81,20:230,21:[2,16],27:28,297:$V9,301:$Va},o($V8,[2,362],{26:231,18:[1,232]}),{21:[2,21],24:83,25:233,27:33,301:$Va},o($Vz,[2,311]),{308:[1,234]},{285:$V21,308:[2,317],312:235},{60:[1,237]},o($V31,[2,316],{311:238,60:$Vf}),{60:[1,239]},o($Vz,[2,321]),{314:[1,240]},o($V41,[2,281],{294:241,285:$V51}),o($VN,[2,259],{91:102,31:104,55:243,92:$Vb,94:$Vc,96:$Vd}),o($Vz,[2,286]),o($Vz,[2,287],{296:[1,244]}),o($Vz,[2,289]),o($Vz,$V11,{191:$VA}),{191:$VB},o($V8,[2,374],{52:245,18:[1,246]}),{17:36,21:[2,43],27:28,50:97,51:247,297:$V9,301:$Va},{18:[2,41]},{18:[2,377]},{18:[2,380],54:249,59:248,125:$Vv},o($VL,[2,379]),o($VM,[2,75]),o($Vz,[2,80]),o($V8,[2,364],{33:250,18:[1,251]}),{21:[2,25],32:252,34:137,92:$Vw,94:$Vx,96:$Vy},{18:[2,84]},{18:[2,87],191:$Vl},{18:[2,88]},{18:[2,85]},{18:[2,86]},{192:[1,253]},{192:[1,254]},{21:[1,255]},o($V8,[2,372],{48:256,18:[1,257]}),{21:[2,29],40:258,41:[1,259]},o($VP,[2,369]),{18:[1,260]},o([21,41,43,122,124,126,130,136,193,194,201,209,256,262],[2,121]),{21:[1,261]},o($V8,[2,384],{104:262,18:[1,263]}),{21:[2,105]},{21:[2,106],111:264,112:202,113:203,114:204,115:205,116:206,117:207,118:208,119:209,120:210,121:211,122:$VQ,123:213,124:$VR,126:$VS,130:$VT,136:$VU,193:$VV,194:$VW,201:$VX,209:$VY,256:$VZ,262:$V_},o($VF,[2,108]),o($VF,[2,109]),o($VF,[2,110]),o($VF,[2,111]),o($VF,[2,112]),o($VF,[2,113]),o($VF,[2,114]),o($VF,[2,115]),o($VF,[2,116]),o($VF,[2,117]),o($VF,[2,118]),{18:[1,265]},{18:[1,266]},{18:[1,267]},{17:268,27:28,179:269,297:$V9,301:$Va,313:$V61},{17:274,18:[1,272],27:28,179:275,195:271,198:273,297:$V9,301:$Va,313:$V61},{18:[1,276]},{18:[1,277]},{17:279,27:28,257:278,258:280,259:[2,444],260:281,261:282,297:$V9,301:$Va,307:$Vt,313:$Vu},{17:283,27:28,297:$V9,301:$Va},{18:[1,284]},{18:[2,266],284:285,285:$VG},o($V$,[2,269]),{192:[2,271]},{27:156,29:155,99:$Vm,260:88,261:89,287:286,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},o($V8,[2,15]),o($V8,[2,361]),{21:[2,17]},o($V8,[2,19]),o($V8,[2,363]),{21:[2,22]},o($Vz,[2,312]),{308:[2,318]},{17:164,27:165,297:$V9,301:$Va,302:$VI,310:287},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:288,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},o($V31,[2,314]),{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:289,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},o($Vz,[2,322]),o($V41,[2,282]),o($V41,[2,285],{260:88,261:89,29:155,282:170,287:171,98:173,27:174,281:290,46:$VJ,99:$Vm,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu}),o($Vz,[2,260]),o($Vz,[2,288]),o($V8,[2,38]),o($V8,[2,375]),{21:[2,44]},{18:[2,42]},{18:[2,381]},o($V8,[2,24]),o($V8,[2,365]),{21:[2,26]},o($Vz,[2,279]),o($Vz,[2,280]),o($V8,[2,366],{37:291,18:[1,292]}),o($V8,[2,36]),o($V8,[2,373]),{21:[2,28]},{21:[2,30]},{19:[1,293]},o($V8,[2,382],{103:294,18:[1,295]}),o($V8,[2,97]),o($V8,[2,385]),{21:[2,107]},{19:[1,296]},{19:[1,297]},{19:[1,298]},{18:[1,299]},{18:[1,300]},{17:302,27:28,297:$V9,301:$Va,315:301},{18:[1,303]},{19:[1,304]},{18:[2,185],109:[1,306],199:305,200:[2,418]},o($V71,[2,187]),o($V71,[2,188]),{19:[1,307]},{19:[1,308]},{18:[1,309]},{257:310,259:[2,445],260:281,261:282,307:$Vt,313:$Vu},{259:[1,311]},{18:[2,243]},{18:[2,244]},{18:[1,312]},{19:[1,313]},{18:[2,267]},{192:[2,272],285:$V01,288:314},{285:$V21,308:[2,319],312:315},o($V31,[2,313]),o($V31,[2,315]),o($V41,[2,283],{294:316,285:$V51}),o($V8,[2,27]),o($V8,[2,367]),{17:318,27:28,44:317,46:$V81,297:$V9,301:$Va},o($V8,[2,95]),o($V8,[2,383]),{17:77,27:51,90:78,127:320,129:321,297:$V9,301:$Va},{17:326,27:28,131:322,133:323,134:324,135:325,297:$V9,301:$Va},{130:$V91,137:327,139:328,140:329,141:330,142:331,143:332,152:333,153:337,155:338,165:$Va1,166:$Vb1,168:$Vc1,169:$Vd1,170:$Ve1,172:$Vf1},o($VF,[2,179]),o($VF,[2,180]),{314:[1,343]},{285:$Vg1,314:[2,324],316:344},o($VF,[2,181]),{17:274,27:28,179:275,195:347,196:346,198:273,297:$V9,301:$Va,313:$V61},{200:[1,348]},{200:[2,419]},{17:351,27:28,202:349,204:350,297:$V9,301:$Va},{17:354,27:28,210:352,212:353,297:$V9,301:$Va},o($VF,[2,240]),{18:[1,355]},{17:356,27:28,297:$V9,301:$Va},o($VF,[2,119]),{263:357,265:358,266:$Vh1,269:$Vi1,271:$Vj1},{192:[2,273]},{308:[2,320]},o($V41,[2,284]),{21:[1,362]},{18:[1,363]},{18:[1,364]},{21:[1,365]},{18:[1,366]},{21:[1,367]},{18:[1,368]},{18:[2,128],54:369,125:$Vv},o($VL,[2,131]),o($VL,[2,255],{91:102,89:103,31:104,27:105,90:106,55:370,57:371,53:372,60:$Vg,92:$Vb,94:$Vc,96:$Vd,301:$Va}),{21:[1,373]},{18:[1,374]},{18:[2,135]},{18:[2,136]},{18:[2,137]},{17:375,27:28,297:$V9,301:$Va},{18:[2,147],27:105,31:104,54:379,55:380,57:381,89:103,90:106,91:102,92:$Vb,94:$Vc,96:$Vd,125:$Vv,159:[1,378],160:[1,376],161:377,301:$Va},o($Vj,[2,158]),{171:[1,382],173:[1,383]},o($Vj,[2,160]),{17:384,27:28,297:$V9,301:$Va},{17:385,27:28,297:$V9,301:$Va},o($Vj,[2,156]),{167:[1,386]},o($Vj,[2,154]),{167:[1,387]},o([18,109,125,160,200,301],[2,323]),{314:[2,325]},{17:388,27:28,297:$V9,301:$Va},{21:[1,389]},{18:[1,390]},{18:[2,186]},{21:[1,391]},{18:[1,392]},{18:[2,192],108:[1,393]},{21:[1,394]},{18:[1,395]},{18:[2,205],108:[1,396]},o($VF,[2,241]),{257:397,260:281,261:282,307:$Vt,313:$Vu},{21:[1,398]},{21:[2,249],263:399,265:358,266:$Vh1,269:$Vi1,271:$Vj1},{18:[1,400]},{18:[1,401]},{18:[1,402]},o($VP,[2,370],{45:403,18:[1,404]}),{17:318,21:[2,32],27:28,44:405,46:$V81,297:$V9,301:$Va},{17:318,21:[2,33],27:28,44:406,46:$V81,297:$V9,301:$Va},o($VF,[2,386],{128:407,18:[1,408]}),{17:77,21:[2,123],27:51,90:78,127:409,129:321,297:$V9,301:$Va},o($VF,[2,388],{132:410,18:[1,411]}),{17:326,21:[2,126],27:28,131:412,133:323,134:324,135:325,297:$V9,301:$Va},{18:[2,129]},o($VL,[2,256]),o($VL,[2,458],{91:102,31:104,278:413,55:414,92:$Vb,94:$Vc,96:$Vd}),o($VM,[2,460],{89:103,27:105,90:106,279:415,57:416,301:$Va}),o($VF,[2,390],{138:417,18:[1,418]}),{21:[2,133],130:$V91,137:419,139:328,140:329,141:330,142:331,143:332,152:333,153:337,155:338,165:$Va1,166:$Vb1,168:$Vc1,169:$Vd1,170:$Ve1,172:$Vf1},{18:[2,138],27:105,54:420,57:421,89:103,90:106,125:$Vv,126:$Vk1,145:422,148:423,160:$Vl1,174:425,177:426,178:[1,427],180:428,181:[1,429],182:[1,430],301:$Va},{17:432,27:28,297:$V9,301:$Va},{18:[2,149]},{17:433,27:28,297:$V9,301:$Va},{18:[2,151]},{18:[2,410],54:435,125:$Vv,162:434},o($VL,[2,412],{91:102,31:104,163:436,55:437,92:$Vb,94:$Vc,96:$Vd}),o($Vj,[2,159]),o($Vj,[2,161]),o($Vm1,[2,404],{154:438,176:439,126:$Vn1}),o($Vm1,[2,406],{156:441,176:443,126:$Vn1,157:[1,442]}),o($Vj,[2,157]),o($Vj,[2,155]),{285:$Vg1,314:[2,326],316:444},o($VF,[2,416],{197:445,18:[1,446]}),{17:274,21:[2,183],27:28,179:275,195:347,196:447,198:273,297:$V9,301:$Va,313:$V61},o($VF,[2,420],{203:448,18:[1,449]}),{19:[1,450]},{17:451,27:28,297:$V9,301:$Va},o($VF,[2,422],{211:452,18:[1,453]}),{19:[1,454]},{17:455,27:28,297:$V9,301:$Va},{18:[1,456]},o($VF,[2,446],{264:457,18:[1,458]}),{21:[2,250]},{19:[1,459]},{19:[1,460]},{19:[1,461]},o($VP,[2,31]),o($VP,[2,371]),{21:[2,34]},{21:[2,35]},o($VF,[2,122]),o($VF,[2,387]),{21:[2,124]},o($VF,[2,125]),o($VF,[2,389]),{21:[2,127]},o($VL,[2,257]),o($VL,[2,459]),o($VL,[2,462],{91:102,31:104,280:462,55:463,92:$Vb,94:$Vc,96:$Vd}),o($VM,[2,461]),o($VF,[2,132]),o($VF,[2,391]),{21:[2,134]},{18:[2,139]},{18:[2,392],54:465,125:$Vv,144:464},o($VL,[2,394],{89:103,27:105,90:106,146:466,57:467,301:$Va}),o($Vo1,[2,398],{149:468,145:469,160:$Vl1}),{17:470,27:28,297:$V9,301:$Va},{27:472,175:471,297:$Vp1,298:$Vq1,301:$Va},o($Vr1,[2,164]),{17:476,27:28,179:475,297:$V9,301:$Va,313:$V61},o($Vr1,[2,166]),o($Vs1,[2,167]),{183:[1,477]},{27:174,29:155,46:$VJ,68:$Vt1,98:173,99:$Vm,184:478,191:$Vu1,260:88,261:89,281:485,282:170,287:171,290:482,291:483,292:481,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,318:479,319:480,321:$Vv1,324:$Vw1},{18:[2,148],27:105,31:104,54:379,55:380,57:381,89:103,90:106,91:102,92:$Vb,94:$Vc,96:$Vd,125:$Vv,161:489,301:$Va},{18:[2,146]},{18:[2,152]},{18:[2,411]},{18:[2,414],54:491,125:$Vv,164:490},o($VL,[2,413]),o($Vm1,[2,143]),o($Vm1,[2,405]),{27:174,29:155,46:$VJ,68:$Vt1,98:173,99:$Vm,184:492,191:$Vu1,260:88,261:89,281:485,282:170,287:171,290:482,291:483,292:481,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,318:479,319:480,321:$Vv1,324:$Vw1},o($Vm1,[2,144]),{17:493,27:28,297:$V9,301:$Va},o($Vm1,[2,407]),{314:[2,327]},o($VF,[2,182]),o($VF,[2,417]),{21:[2,184]},o($VF,[2,189]),o($VF,[2,421]),{17:498,27:28,205:494,206:495,207:496,208:497,297:$V9,301:$Va},{18:[2,193]},o($VF,[2,202]),o($VF,[2,423]),{213:499,214:500,218:[1,501]},{18:[2,206]},o($VF,[2,242]),o($VF,[2,245]),o($VF,[2,447]),{187:$Vx1,267:502,273:503,276:$Vy1},{187:$Vx1,267:506,273:503,276:$Vy1},{187:$Vx1,267:507,273:503,276:$Vy1},o($VL,[2,258]),o($VL,[2,463]),{18:[2,140]},{18:[2,393]},{18:[2,396],54:509,125:$Vv,147:508},o($VL,[2,395]),o($VL,[2,400],{89:103,27:105,90:106,150:510,57:511,301:$Va}),o($Vo1,[2,399]),o($Vo1,[2,176]),o($Vr1,[2,162],{176:512,126:$Vn1}),o($Vz1,[2,290]),o($Vz1,[2,291]),o($Vz1,[2,292]),o($Vr1,[2,165]),o($Vr1,[2,171],{180:513,126:$Vk1}),o($Vs1,[2,168]),o($Vr1,[2,175]),o($Vm1,[2,330],{332:514,333:515,334:[1,516],335:[1,517]}),o($Vm1,[2,331]),o($Vm1,[2,332]),o($VA1,[2,333]),o($VA1,[2,334]),{27:174,29:155,46:$VJ,98:173,99:$Vm,191:$Vu1,260:88,261:89,281:519,282:170,287:171,290:482,291:483,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,318:518,321:$Vv1},{109:$VB1,241:$VC1,246:$VD1,253:$VE1,259:$VF1,320:$VG1,321:$VH1,323:[1,520],325:$VI1,326:$VJ1,327:$VK1,328:$VL1,329:$VM1,330:$VN1,331:$VO1},{261:535,313:$Vu},{261:536,313:$Vu},{191:[1,537]},{18:[2,150]},{18:[2,153]},{18:[2,415]},o($Vm1,[2,169]),o($Vm1,[2,408],{158:538,176:539,126:$Vn1}),{21:[1,540]},{18:[1,541]},{18:[2,196],126:[1,542]},{18:[2,197]},o($VP1,[2,198],{189:[1,543]}),{21:[1,544]},o($VQ1,[2,424],{215:545,224:546,221:547,222:[1,548],223:[1,549]}),{18:[1,550]},{21:[1,551]},{21:[2,251],187:$Vx1,267:552,273:503,276:$Vy1},{27:174,29:155,46:$VJ,68:$Vt1,98:173,99:$Vm,184:553,191:$Vu1,260:88,261:89,281:485,282:170,287:171,290:482,291:483,292:481,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,318:479,319:480,321:$Vv1,324:$Vw1},{18:[1,554]},{21:[1,555]},{21:[1,556]},{18:[2,141]},{18:[2,397]},{18:[2,402],54:558,125:$Vv,151:557},o($VL,[2,401]),o($Vr1,[2,163]),o($Vr1,[2,172]),o($Vm1,[2,356]),{27:174,29:155,46:$VJ,98:173,99:$Vm,191:$Vu1,260:88,261:89,281:519,282:170,287:171,290:482,291:483,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,318:559,321:$Vv1},o($VR1,[2,358]),o($VR1,[2,359]),{192:[1,560]},{109:$VB1,241:$VC1,246:$VD1,253:$VE1,259:$VF1,320:$VG1,321:$VH1,325:$VI1,326:$VJ1,327:$VK1,328:$VL1,329:$VM1,330:$VN1,331:$VO1},{27:67,46:$Vh,93:561,95:64,98:66,99:$Vi,301:$Va},o($VA1,[2,336]),{259:[1,563],320:[1,562]},{321:[1,565],322:[1,564]},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:566,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:567,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:568,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:569,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:570,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:571,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:572,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:573,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:574,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:575,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:576,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},{323:[1,577]},{323:[1,578]},{27:174,29:155,46:$VJ,98:173,99:$Vm,191:$Vu1,260:88,261:89,281:519,282:170,287:171,290:482,291:483,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu,318:579,321:$Vv1},o($Vm1,[2,145]),o($Vm1,[2,409]),{17:351,18:[1,580],27:28,202:581,204:350,297:$V9,301:$Va},{17:498,21:[2,194],27:28,205:582,206:495,207:496,208:497,297:$V9,301:$Va},{17:77,27:51,90:78,129:583,297:$V9,301:$Va},o($VP1,[2,199]),{17:354,18:[1,584],27:28,210:585,212:353,297:$V9,301:$Va},o($VQ1,[2,426],{216:586}),o($VQ1,[2,425]),{18:[1,587]},{18:[2,209]},{183:[1,588]},{19:[1,589]},o($VS1,[2,448],{268:590,18:[1,591]}),{21:[2,252]},{18:[1,592]},{19:[1,593]},o($VS1,[2,450],{270:594,18:[1,595]}),o($VS1,[2,452],{272:596,18:[1,597]}),{18:[2,142]},{18:[2,403]},o($Vm1,[2,357]),o($VA1,[2,335]),o($Vm1,[2,341]),o($VA1,[2,337]),{27:174,29:155,46:$VJ,98:173,99:$Vm,260:88,261:89,281:598,282:170,287:171,295:$VK,297:$Vn,301:$Va,302:$Vo,303:$Vp,304:$Vq,305:$Vr,306:$Vs,307:$Vt,313:$Vu},o($VA1,[2,338]),{322:[1,599]},o($VA1,[2,344]),o($VA1,[2,345]),o($VA1,[2,346]),o($VA1,[2,347]),o($VA1,[2,348]),o($VA1,[2,349]),o($VA1,[2,350]),o($VA1,[2,352]),o($VA1,[2,353]),o($VA1,[2,354]),o($VA1,[2,355]),{27:67,46:$Vh,93:600,95:64,98:66,99:$Vi,301:$Va},{27:67,46:$Vh,93:601,95:64,98:66,99:$Vi,301:$Va},{192:[1,602]},{21:[2,190]},{21:[2,191]},{21:[2,195]},{18:[2,200],189:[1,603]},{21:[2,203]},{21:[2,204]},{21:[2,428],217:604,227:607,228:[1,609],229:[1,610],230:605,247:606,248:[1,608]},{19:[1,611]},{18:[2,210]},{27:472,175:614,219:612,251:613,252:$VT1,253:$VU1,297:$Vp1,298:$Vq1,301:$Va},o($VS1,[2,246]),o($VS1,[2,449]),{19:[1,617]},{274:[1,618]},o($VS1,[2,247]),o($VS1,[2,451]),o($VS1,[2,248]),o($VS1,[2,453]),o($VA1,[2,351]),o($VA1,[2,339]),o($Vm1,[2,342]),o($Vm1,[2,343]),o($VA1,[2,340]),{18:[2,201]},{21:[2,207]},o($VQ1,[2,427]),{21:[2,429]},{17:620,18:[1,619],27:28,297:$V9,301:$Va},{18:[1,621]},o($VV1,[2,212]),{183:[1,622]},{27:472,175:624,225:623,297:$Vp1,298:$Vq1,301:$Va},{21:[1,625]},{18:[1,626]},{18:[2,236]},{18:[2,237],255:627,336:[1,628]},{254:629,336:[1,630]},{274:[1,631]},{21:[1,632]},{19:[1,633]},{18:[1,634]},{19:[1,635]},o($VV1,[2,213]),{21:[1,636]},{18:[1,637]},o($VW1,[2,430],{220:638,18:[1,639]}),{21:[2,234],27:472,175:614,219:640,251:613,252:$VT1,253:$VU1,297:$Vp1,298:$Vq1,301:$Va},{18:[2,239],336:[1,641]},o($VX1,[2,442]),{18:[2,238],336:[1,642]},o($VX1,[2,440]),{21:[1,643]},o($VY1,[2,456],{277:644,18:[1,645]}),{27:472,175:648,231:646,234:647,297:$Vp1,298:$Vq1,301:$Va},{19:[1,649]},{17:77,27:51,90:78,129:651,249:650,297:$V9,301:$Va},o($VQ1,[2,432],{226:652,18:[1,653]}),{21:[2,293],27:472,175:624,225:654,297:$Vp1,298:$Vq1,301:$Va},o($VW1,[2,208]),o($VW1,[2,431]),{21:[2,235]},o($VX1,[2,443]),o($VX1,[2,441]),o($VY1,[2,454],{275:655,18:[1,656]}),o($VY1,[2,254]),o($VY1,[2,457]),{21:[1,657]},{18:[1,658]},{18:[2,218],235:659,236:660,237:[1,661],238:[1,662],239:[1,663],240:[1,664],241:[1,665],242:[1,666],243:[1,667],244:[1,668],245:[1,669],246:[1,670]},{27:472,175:648,231:671,234:647,297:$Vp1,298:$Vq1,301:$Va},{21:[1,672]},{18:[1,673]},o($VQ1,[2,211]),o($VQ1,[2,433]),{21:[2,294]},o($VY1,[2,253]),o($VY1,[2,455]),o($VQ1,[2,434],{232:674,18:[1,675]}),{21:[2,216],27:472,175:648,231:676,234:647,297:$Vp1,298:$Vq1,301:$Va},{18:[2,219]},{18:[2,220]},{18:[2,221]},{18:[2,222]},{18:[2,223]},{18:[2,224]},{18:[2,225]},{18:[2,226]},{18:[2,227]},{18:[2,228]},{18:[2,229]},{18:[2,230]},{21:[1,677]},{18:[1,679],21:[2,438],250:678},{17:77,21:[2,232],27:51,90:78,129:651,249:680,297:$V9,301:$Va},o($VQ1,[2,214]),o($VQ1,[2,435]),{21:[2,217]},o($VQ1,[2,436],{233:681,18:[1,682]}),{21:[2,231]},{21:[2,439]},{21:[2,233]},o($VQ1,[2,215]),o($VQ1,[2,437])],
defaultActions: {2:[2,1],3:[2,2],24:[2,3],25:[2,5],75:[2,99],84:[2,20],98:[2,40],101:[2,130],150:[2,265],178:[2,41],179:[2,377],186:[2,84],188:[2,88],189:[2,85],190:[2,86],201:[2,105],226:[2,271],230:[2,17],233:[2,22],235:[2,318],247:[2,44],248:[2,42],249:[2,381],252:[2,26],258:[2,28],259:[2,30],264:[2,107],281:[2,243],282:[2,244],285:[2,267],306:[2,419],314:[2,273],315:[2,320],329:[2,135],330:[2,136],331:[2,137],344:[2,325],348:[2,186],369:[2,129],377:[2,149],379:[2,151],399:[2,250],405:[2,34],406:[2,35],409:[2,124],412:[2,127],419:[2,134],420:[2,139],433:[2,146],434:[2,152],435:[2,411],444:[2,327],447:[2,184],451:[2,193],455:[2,206],464:[2,140],465:[2,393],489:[2,150],490:[2,153],491:[2,415],497:[2,197],508:[2,141],509:[2,397],548:[2,209],552:[2,252],557:[2,142],558:[2,403],580:[2,190],581:[2,191],582:[2,195],584:[2,203],585:[2,204],588:[2,210],603:[2,201],604:[2,207],606:[2,429],614:[2,236],640:[2,235],654:[2,294],659:[2,219],660:[2,220],661:[2,221],662:[2,222],663:[2,223],664:[2,224],665:[2,225],666:[2,226],667:[2,227],668:[2,228],669:[2,229],670:[2,230],676:[2,217],678:[2,231],679:[2,439],680:[2,233]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'customize', 'override', 'api', 'modifier']);

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'modifier.*': 'modifier.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'modifier.$INDENT': 'modifier.block', 

        'override.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.views': 'entity.views', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',

        'entity.views.$INDENT': 'entity.views.dataSet',
        'entity.views.dataSet.$INDENT': 'entity.views.dataSet.item',

        'entity.views.dataSet.item.select': 'entity.views.dataSet.item.select',
        'entity.views.dataSet.item.select.$INDENT': 'entity.views.dataSet.item.select.item',

        'entity.views.dataSet.item.groupBy': 'entity.views.dataSet.item.groupBy',
        'entity.views.dataSet.item.groupBy.$INDENT': 'entity.views.dataSet.item.groupBy.item',

        'entity.views.dataSet.item.orderBy': 'entity.views.dataSet.item.orderBy',
        'entity.views.dataSet.item.orderBy.$INDENT': 'entity.views.dataSet.item.orderBy.item',        

        'entity.views.dataSet.item.options': 'entity.views.dataSet.item.options',
        'entity.views.dataSet.item.options.$INDENT': 'entity.views.dataSet.item.options.item',        
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', 'views', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'has', 'one', 'many', 'refers', 'to', 'belongs']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),    
        'entity.views': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of', 'connected', 'by', 'on']),               
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),        
        
        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        'entity.views.dataSet.item': new Set(['select', 'orderBy', 'order', 'groupBy', 'group', 'by', 'options']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),     

        // level 6
        'entity.views.dataSet.item.orderBy.item': new Set(['asc', 'desc', 'ASC', 'DESC', 'v', '^', 'ascend', 'descend']),      
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.views.dataSet', 2 ],
        [ 'entity.views.dataSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],  
        [ 'entity.views.dataSet.item.select', 2 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 2 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 2 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 2 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'modifier.item', 2 ], 
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.views.dataSet', 1 ],
        [ 'entity.views.dataSet.item', 1 ],        
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ],
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([      
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'float', 'int', 'integer', 'bigint', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);
    const TYPE_DEF_STATES = new Set([ 'type.item', 'type.block', 'entity.has', 'entity.input.inputSet.item' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xt: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (BUILTIN_TYPES.has(name)) {
                throw new Error(`Cannot use built-in type "${name}" as a custom type name at line: ${line}!`);
            }

            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            if (typeof name === 'object') {                
                this.define('entityTemplate', name.name, { ...value, templateArgs: name.args }, line);
            } else {
                this.define('entity', name, value, line);
            }
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        idOrFunctionToKV(value) {
            if (typeof value === 'string') {
                return { [value]: true };
            }

            return {
                [value.name]: value.args.length === 1 ? value.args[0] : value.args
            };
        }
    }

    // merge two objects
    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 19;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 18;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 21;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 18;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 18;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 305;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 297;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 297;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 297;
                        
break;
case 15:
                            state.matchAnyExceptNewline();

                            yy_.yytext = yy_.yytext.substring(2).trim();
                            yy_.yytext = state.isQuote(yy_.yytext) ? state.unquoteString(yy_.yytext, 1) : yy_.yytext 
                            return 125;
                        
break;
case 16:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 18;
                            }
                        
break;
case 17:/* skip whitespace, separate tokens */
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 99;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 303;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 302;
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 22:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 302;
                        
break;
case 23:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 24:      
                                state.matchAnyExceptNewline();

                                return 298;
                           
break;
case 25:      
                                state.matchAnyExceptNewline();

                                return 46;
                           
break;
case 26:      
                                state.matchAnyExceptNewline();

                                return 252;
                           
break;
case 27:      
                                state.matchAnyExceptNewline();

                                return 336;
                           
break;
case 28:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 306;
                           
break;
case 29:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 295;
                           
break;
case 30:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 31:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 304;
                           
break;
case 32:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 33:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 34:return yy_.yytext;   
break;
case 35:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    if (TYPE_DEF_STATES.has(state.lastState) && BUILTIN_TYPES.has(yy_.yytext)) {
                                        state.matchAnyExceptNewline();                                    
                                        return yy_.yytext;
                                    }

                                    state.matchAnyExceptNewline();                                    
                                }

                                return 301;
                            
break;
case 36:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(--(([^\n\/\r])|(\/[^\/]))*))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))?:)((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))*\.\\\*))/,/^(?:(-(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,36],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,36],"inclusive":true},"DEDENTED":{"rules":[9,36],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],"inclusive":true},"REPARSE":{"rules":[35,36],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}