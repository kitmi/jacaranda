/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,17],$V6=[1,21],$V7=[1,22],$V8=[1,25],$V9=[5,17,24,31,36,46,48,99,103,111],$Va=[1,31],$Vb=[1,32],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[19,59,91,93,95,109,110,125,126,160,162,163,181,184,185,203,263,289,306,312,319,320],$Vg=[2,297],$Vh=[1,64],$Vi=[1,72],$Vj=[1,69],$Vk=[1,73],$Vl=[303,306],$Vm=[19,109,110],$Vn=[1,85],$Vo=[19,91,93,95,109,110,125,289,306],$Vp=[1,96],$Vq=[1,97],$Vr=[1,91],$Vs=[1,92],$Vt=[1,93],$Vu=[1,98],$Vv=[1,99],$Vw=[1,100],$Vx=[1,101],$Vy=[1,107],$Vz=[1,144],$VA=[1,145],$VB=[1,146],$VC=[19,91,93,95,110,125,162,163,195,204,245,250,257,263,289,306,313,320,326,327,329,331,332,333,334,335,336,339,340],$VD=[1,147],$VE=[1,148],$VF=[22,42],$VG=[2,120],$VH=[1,153],$VI=[22,124,126,130,133,139,196,197,205,260,266],$VJ=[1,159],$VK=[19,289],$VL=[1,175],$VM=[1,173],$VN=[1,184],$VO=[1,181],$VP=[19,125],$VQ=[19,91,93,95,125],$VR=[19,110,125,162,163,195,204,245,250,257,263,289,306,313,320,326,327,329,331,332,333,334,335,336,339,340],$VS=[19,91,93,95,125,306],$VT=[1,232],$VU=[1,224],$VV=[1,225],$VW=[1,226],$VX=[1,227],$VY=[1,228],$VZ=[1,229],$V_=[1,230],$V$=[1,231],$V01=[1,233],$V11=[1,237],$V21=[2,272],$V31=[1,246],$V41=[289,313],$V51=[195,320],$V61=[1,253],$V71=[1,282],$V81=[1,286],$V91=[19,110,203],$Va1=[1,335],$Vb1=[1,353],$Vc1=[1,359],$Vd1=[1,360],$Ve1=[1,357],$Vf1=[1,358],$Vg1=[1,352],$Vh1=[1,354],$Vi1=[1,363],$Vj1=[1,374],$Vk1=[1,375],$Vl1=[1,376],$Vm1=[1,448],$Vn1=[1,441],$Vo1=[19,91,93,95,125,162,163,306],$Vp1=[1,457],$Vq1=[19,125,306],$Vr1=[1,487],$Vs1=[1,486],$Vt1=[19,125,163,306],$Vu1=[299,303,306],$Vv1=[1,499],$Vw1=[1,497],$Vx1=[1,501],$Vy1=[1,500],$Vz1=[1,513],$VA1=[1,514],$VB1=[19,125,126,163,241,242,243,244,245,246,247,248,249,250,306],$VC1=[19,91,93,95,125,162,163,195,306,339,340],$VD1=[1,532],$VE1=[1,541],$VF1=[1,534],$VG1=[1,533],$VH1=[1,542],$VI1=[1,539],$VJ1=[1,530],$VK1=[1,531],$VL1=[1,535],$VM1=[1,536],$VN1=[1,537],$VO1=[1,538],$VP1=[1,540],$VQ1=[1,543],$VR1=[22,226,229,233,252],$VS1=[45,98,194,299,301,303,306,307,308,309,310,311,312,319,327],$VT1=[22,229,233,252],$VU1=[22,270,273,275],$VV1=[22,233,252],$VW1=[1,616],$VX1=[1,617],$VY1=[22,223,224,226,229,233,252],$VZ1=[19,341],$V_1=[22,190,280];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"modifier_def_statement":11,"schema_statement":12,"customize_statement":13,"override_statement":14,"abstract_statement":15,"entity_statement":16,"import":17,"identifier_or_string":18,"NEWLINE":19,"INDENT":20,"import_statement_block":21,"DEDENT":22,"import_statement_option0":23,"const":24,"const_statement_item":25,"const_statement_block":26,"const_statement_option0":27,"identifier":28,"=":29,"literal":30,"modifier":31,"type_modifier":32,"modifier_def_statement_block":33,"modifier_def_statement_option0":34,"type_modifier_def":35,"schema":36,"schema_statement_block":37,"schema_statement_option0":38,"comment_or_not":39,"schema_statement_block_option0":40,"schema_entities":41,"entities":42,"schema_entities_block":43,"schema_entities_option0":44,"NAMESPACED":45,"customize":46,"customize_statement_option0":47,"type":48,"type_statement_item":49,"type_statement_block":50,"type_statement_option0":51,"type_base":52,"entity_or_field_comment":53,"type_modifiers_list":54,"type_statement_item_option0":55,"type_infos":56,"type_statement_item_option1":57,"type_statement_item_option2":58,":":59,"types":60,"int_keyword":61,"number_keyword":62,"text_keyword":63,"bool_keyword":64,"binary_keyword":65,"datetime_keyword":66,"any":67,"enum":68,"array":69,"object_keyword":70,"bigint":71,"int":72,"integer":73,"number":74,"float":75,"decimal":76,"text":77,"string":78,"bool":79,"boolean":80,"object":81,"json":82,"blob":83,"binary":84,"buffer":85,"datetime":86,"timestamp":87,"type_info":88,"simple_function_call":89,"type_modifiers":90,"|~":91,"type_modifier_validators":92,"|>":93,"identifier_or_general_function_call":94,"|=":95,"modifier_def_item":96,"general_function_call":97,"REGEXP":98,"override":99,"entity_statement_header":100,"entity_statement_block":101,"override_statement_option0":102,"abstract":103,"abstract_statement_option0":104,"entity_statement_option0":105,"entity_statement_header0":106,"entity_base_keywords":107,"id_or_string_or_call_list":108,"extends":109,"is":110,"entity":111,"entity_sub_items":112,"entity_sub_item":113,"with_features":114,"use_modifiers":115,"has_fields":116,"associations_statement":117,"key_statement":118,"index_statement":119,"views_statement":120,"data_statement":121,"code_statement":122,"triggers_statement":123,"code":124,"INLINE_COMMENT":125,"with":126,"with_features_block":127,"with_features_option0":128,"id_or_string_or_call":129,"use":130,"use_modifier_statement_block":131,"use_modifiers_option0":132,"has":133,"has_fields_block":134,"has_fields_option0":135,"field_item":136,"field_item_body":137,"modifiable_field":138,"associations":139,"associations_block":140,"associations_statement_option0":141,"association_item":142,"association_item_many_to_one":143,"association_item_new_field":144,"association_item_existing_field":145,"association_type_referee":146,"association_item_many_to_one_option0":147,"association_as":148,"association_item_many_to_one_option1":149,"association_item_many_to_one_option2":150,"association_through":151,"association_item_many_to_one_option3":152,"association_item_many_to_one_option4":153,"association_item_many_to_one_option5":154,"association_item_belong_refer_to_base":155,"belongs_to_keywords":156,"association_item_belong_refer_to_base_option0":157,"refers_to_keywords":158,"association_item_belong_refer_to_base_option1":159,"of":160,"association_item_belong_refer_to_base_option2":161,"on":162,"as":163,"association_item_fields_props":164,"association_item_fields_props_option0":165,"association_item_fields_props_option1":166,"association_item_fields_props_option2":167,"refersTo":168,"refers":169,"to":170,"belongsTo":171,"belongs":172,"hasOne":173,"one":174,"hasMany":175,"many":176,"connected_by_keywords":177,"identifier_string_or_dotname":178,"association_extra_condition":179,"association_connection":180,"being":181,"array_of_identifier_or_string":182,"association_condition":183,"connectedBy":184,"connected":185,"by":186,"conditional_expression":187,"association_cases_block":188,"association_cases":189,"when":190,"association_qualifiers":191,"optional":192,"default":193,"(":194,")":195,"key":196,"index":197,"index_item":198,"index_statement_block":199,"index_statement_option0":200,"index_item_body":201,"index_item_option0":202,"unique":203,"-":204,"views":205,"views_statement_block":206,"views_statement_option0":207,"views_statement_def":208,"entity_views_block":209,"views_statement_select":210,"entity_views_block_option0":211,"entity_views_block_option1":212,"entity_views_block_option2":213,"entity_views_block_repetition0":214,"entity_views_block_option3":215,"select":216,"entity_views_block_select":217,"views_statement_select_option0":218,"views_statement_relation":219,"views_statement_relation_keys":220,"identifier_string_or_dotname_block":221,"views_statement_relation_option0":222,"relation":223,"withRelations":224,"countby_keywords":225,"countBy":226,"views_statement_count_by":227,"groupby_keywords":228,"groupBy":229,"views_statement_group_by":230,"views_statement_group_by_option0":231,"orderby_keywords":232,"orderBy":233,"views_statement_order_by":234,"order_by_block":235,"views_statement_order_by_option0":236,"views_statement_order_by_option1":237,"order_by_clause":238,"order_ascend_keywords":239,"order_descend_keywords":240,"ascend":241,"ASC":242,"^":243,"asc":244,"<":245,"descend":246,"DESC":247,"v":248,"desc":249,">":250,"views_statement_options":251,"options":252,"entity_views_block_options":253,"views_statement_options_option0":254,"entity_views_block_select_item":255,"SELECT_ALL":256,"*":257,"entity_views_block_select_item_repetition_plus0":258,"entity_views_block_select_item_repetition_plus1":259,"data":260,"data_records":261,"data_statement_option0":262,"in":263,"inline_object":264,"inline_array":265,"triggers":266,"triggers_statement_block":267,"triggers_statement_option0":268,"triggers_operation":269,"onCreate":270,"triggers_operation_block":271,"triggers_operation_option0":272,"onCreateOrUpdate":273,"triggers_operation_option1":274,"onDelete":275,"triggers_operation_option2":276,"triggers_operation_item":277,"triggers_result_block":278,"triggers_operation_item_option0":279,"always":280,"triggers_operation_item_option1":281,"modifiable_field_option0":282,"modifiable_field_option1":283,"modifiable_field_option2":284,"modifiable_value":285,"gfc_param0":286,"modifiable_param":287,"id_or_string_or_call_list0":288,",":289,"simple_function_call_with_args":290,"nfc_param_list":291,"nfc_param":292,"nfc_param_list0":293,"literal_and_value_expression":294,"unary_expression":295,"binary_expression":296,"boolean_expression":297,"gfc_param_list":298,"DOTNAME":299,"gfc_param_list0":300,"REFERENCE":301,"?":302,"STRING":303,"identifier_string_or_dotname_list":304,"identifier_string_or_dotname_list0":305,"NAME":306,"INTEGER":307,"FLOAT":308,"BOOL":309,"SCRIPT":310,"SYMBOL":311,"{":312,"}":313,"kv_pairs":314,"kv_pair_item":315,"NESTED_KEY":316,"non_exist":317,"kv_pairs0":318,"[":319,"]":320,"identifier_or_string_list":321,"identifier_or_string_list0":322,"value":323,"simple_expression":324,"logical_expression":325,"exists":326,"not":327,"null":328,"~":329,"all":330,">=":331,"<=":332,"==":333,"!=":334,"+":335,"/":336,"logical_expression_right":337,"logical_operators":338,"and":339,"or":340,"EXCLUDE_COLUMN":341,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"import",19:"NEWLINE",20:"INDENT",22:"DEDENT",24:"const",29:"=",31:"modifier",36:"schema",42:"entities",45:"NAMESPACED",46:"customize",48:"type",59:":",67:"any",68:"enum",69:"array",71:"bigint",72:"int",73:"integer",74:"number",75:"float",76:"decimal",77:"text",78:"string",79:"bool",80:"boolean",81:"object",82:"json",83:"blob",84:"binary",85:"buffer",86:"datetime",87:"timestamp",91:"|~",93:"|>",95:"|=",98:"REGEXP",99:"override",103:"abstract",109:"extends",110:"is",111:"entity",124:"code",125:"INLINE_COMMENT",126:"with",130:"use",133:"has",139:"associations",160:"of",162:"on",163:"as",168:"refersTo",169:"refers",170:"to",171:"belongsTo",172:"belongs",173:"hasOne",174:"one",175:"hasMany",176:"many",181:"being",184:"connectedBy",185:"connected",186:"by",190:"when",192:"optional",193:"default",194:"(",195:")",196:"key",197:"index",203:"unique",204:"-",205:"views",216:"select",223:"relation",224:"withRelations",226:"countBy",229:"groupBy",233:"orderBy",241:"ascend",242:"ASC",243:"^",244:"asc",245:"<",246:"descend",247:"DESC",248:"v",249:"desc",250:">",252:"options",256:"SELECT_ALL",257:"*",260:"data",263:"in",266:"triggers",270:"onCreate",273:"onCreateOrUpdate",275:"onDelete",278:"triggers_result_block",280:"always",289:",",299:"DOTNAME",301:"REFERENCE",302:"?",303:"STRING",306:"NAME",307:"INTEGER",308:"FLOAT",309:"BOOL",310:"SCRIPT",311:"SYMBOL",312:"{",313:"}",316:"NESTED_KEY",319:"[",320:"]",326:"exists",327:"not",328:"null",329:"~",330:"all",331:">=",332:"<=",333:"==",334:"!=",335:"+",336:"/",339:"and",340:"or",341:"EXCLUDE_COLUMN"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[21,2],[21,3],[9,3],[9,6],[25,3],[26,2],[26,3],[11,3],[11,6],[33,2],[33,3],[12,7],[37,2],[41,6],[43,2],[43,2],[43,3],[43,3],[13,6],[10,3],[10,6],[49,2],[49,3],[49,4],[49,5],[50,2],[50,3],[52,2],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[61,1],[61,1],[62,1],[62,1],[62,1],[63,1],[63,1],[64,1],[64,1],[70,1],[70,1],[65,1],[65,1],[65,1],[66,1],[66,1],[56,1],[56,2],[88,1],[88,1],[54,1],[90,1],[90,2],[32,2],[32,2],[32,2],[35,2],[35,2],[35,2],[96,1],[96,1],[94,1],[94,1],[94,1],[92,1],[92,1],[14,3],[14,7],[15,3],[15,7],[16,2],[16,6],[100,1],[100,3],[107,1],[107,1],[106,2],[106,2],[101,1],[101,2],[112,1],[112,2],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[113,1],[122,3],[39,0],[39,2],[114,6],[127,2],[127,3],[115,6],[131,2],[131,3],[116,6],[134,2],[134,3],[136,1],[136,2],[53,1],[137,1],[117,6],[140,2],[140,3],[142,1],[142,1],[142,1],[143,2],[143,3],[143,4],[143,5],[143,6],[155,3],[155,3],[155,5],[145,3],[145,5],[144,1],[144,3],[144,2],[144,4],[164,1],[164,2],[164,3],[158,1],[158,2],[156,1],[156,2],[146,1],[146,2],[146,1],[146,2],[151,2],[151,3],[151,1],[151,2],[151,1],[177,1],[177,2],[179,2],[188,5],[180,2],[180,3],[189,3],[189,4],[183,2],[148,2],[191,1],[191,4],[118,3],[118,3],[119,3],[119,6],[199,2],[199,3],[198,1],[198,3],[198,2],[201,1],[201,1],[120,6],[206,6],[206,6],[208,1],[208,3],[209,6],[210,6],[219,6],[220,1],[220,1],[225,1],[227,3],[228,1],[230,6],[232,1],[234,6],[234,7],[235,2],[235,3],[238,1],[238,2],[238,2],[239,1],[239,1],[239,1],[239,1],[239,1],[240,1],[240,1],[240,1],[240,1],[240,1],[251,6],[253,2],[253,3],[217,2],[217,3],[255,1],[255,1],[255,1],[255,2],[255,2],[121,3],[121,4],[121,6],[261,1],[261,1],[123,6],[269,6],[269,6],[269,6],[267,1],[267,2],[271,1],[271,2],[277,7],[277,6],[138,1],[138,2],[138,3],[138,4],[285,1],[285,2],[287,1],[129,1],[129,1],[108,1],[108,2],[288,2],[288,3],[89,3],[89,1],[290,4],[291,1],[291,2],[293,2],[293,3],[292,1],[292,1],[294,1],[294,1],[294,1],[97,4],[97,4],[97,4],[298,1],[298,2],[300,2],[300,3],[300,1],[286,1],[286,1],[286,2],[286,1],[178,1],[178,1],[178,1],[221,2],[221,3],[304,1],[304,2],[305,2],[305,3],[18,1],[18,1],[28,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[264,2],[264,3],[315,3],[315,3],[315,2],[315,3],[317,0],[314,1],[314,2],[318,2],[318,3],[265,2],[265,3],[182,3],[321,1],[321,2],[322,2],[322,3],[323,1],[323,1],[187,1],[187,1],[187,1],[324,1],[324,1],[324,3],[295,2],[295,3],[295,3],[295,4],[295,4],[297,3],[297,4],[297,4],[296,3],[296,3],[296,3],[296,3],[296,3],[296,3],[296,3],[296,4],[296,3],[296,3],[296,3],[296,3],[325,2],[337,2],[338,1],[338,1],[23,0],[23,1],[27,0],[27,1],[34,0],[34,1],[38,0],[38,1],[40,0],[40,1],[44,0],[44,1],[47,0],[47,1],[51,0],[51,1],[55,0],[55,1],[57,0],[57,1],[58,0],[58,1],[102,0],[102,1],[104,0],[104,1],[105,0],[105,1],[128,0],[128,1],[132,0],[132,1],[135,0],[135,1],[141,0],[141,1],[147,0],[147,1],[149,0],[149,1],[150,0],[150,1],[152,0],[152,1],[153,0],[153,1],[154,0],[154,1],[157,0],[157,1],[159,0],[159,1],[161,0],[161,1],[165,0],[165,1],[166,0],[166,1],[167,0],[167,1],[200,0],[200,1],[202,0],[202,1],[207,0],[207,1],[211,0],[211,1],[212,0],[212,1],[213,0],[213,1],[214,0],[214,2],[215,0],[215,1],[218,0],[218,1],[222,0],[222,1],[231,0],[231,1],[236,0],[236,1],[237,0],[237,1],[254,0],[254,1],[258,1],[258,2],[259,1],[259,2],[262,0],[262,1],[268,0],[268,1],[272,0],[272,1],[274,0],[274,1],[276,0],[276,1],[279,0],[279,1],[281,0],[281,1],[282,0],[282,1],[283,0],[283,1],[284,0],[284,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 15:
this.$ = state.import($$[$0-1]) ;
break;
case 17:
this.$ = state.import($$[$0-1]);
break;
case 18:
this.$ = state.import($$[$0-2]);
break;
case 21:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 26:
this.$ = state.define($$[$0-1].$xt, $$[$0-1].name, $$[$0-1], _$[$0-1].first_line);
break;
case 27:
this.$ = state.define($$[$0-2].$xt, $$[$0-2].name, $$[$0-2], _$[$0-2].first_line);
break;
case 28:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 29: case 74: case 106: case 317: case 319:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 30:
this.$ = { entities: $$[$0-2] };
break;
case 31: case 32:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 33: case 34:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 35:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 38:
this.$ = state.defineType($$[$0-1], $$[$0], _$[$0-1].first_line);
break;
case 39:
this.$ = state.defineType($$[$0-2], { ...$$[$0-1], ...$$[$0] }, _$[$0-2].first_line);
break;
case 40:
this.$ = state.defineType($$[$0-3], { ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-3].first_line);
break;
case 41:
this.$ = state.defineType($$[$0-4], { ...$$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-4].first_line)    ;
break;
case 44: case 80: case 103: case 104: case 105: case 175: case 318:
this.$ = $$[$0];
break;
case 45:
this.$ = { type: 'integer' };
break;
case 46:
this.$ = { type: 'number' }    ;
break;
case 47:
this.$ = { type: 'text' };
break;
case 48:
this.$ = { type: 'boolean' };
break;
case 49:
this.$ = { type: 'binary' };
break;
case 50:
this.$ = { type: 'datetime' };
break;
case 51:
this.$ = { type: 'any' };
break;
case 52:
this.$ = { type: 'enum' };
break;
case 53:
this.$ = { type: 'array' };
break;
case 54:
this.$ = { type: 'object' };
break;
case 55:
this.$ = { type: $$[$0] };
break;
case 56:
this.$ = { type: 'bigint' };
break;
case 75:
this.$ = { [$$[$0]]: true };
break;
case 76:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 77:
this.$ = { modifiers: $$[$0] };
break;
case 78: case 245: case 247: case 260: case 262: case 267: case 269: case 281: case 293: case 295: case 323: case 325:
this.$ = [ $$[$0] ];
break;
case 79: case 246: case 248: case 263: case 268: case 270: case 282: case 296: case 324: case 326:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 81: case 84:
this.$ = state.normalizeProcessor(...$$[$0])        ;
break;
case 82: case 85:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 83: case 91:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 86: case 89: case 90: case 447: case 449:
this.$ = [$$[$0]];
break;
case 87: case 88:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 92:
this.$ = state.normalizeValidator('matches', $$[$0])        ;
break;
case 93:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 94:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 95:
this.$ = state.defineEntity($$[$0-1][0], { ...$$[$0-1][1], abstract: true }, _$[$0-2].first_line);
break;
case 96:
this.$ = state.defineEntity($$[$0-5][0], { ...$$[$0-5][1], ...$$[$0-2], abstract: true }, _$[$0-6].first_line);
break;
case 97:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 98:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 99:
this.$ = [ $$[$0], {} ];
break;
case 100:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 108:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 119:
this.$ = { code: $$[$0-1] };
break;
case 121:
this.$ = { comment: $$[$0-1] };
break;
case 122:
this.$ = { features: $$[$0-2] };
break;
case 123: case 126: case 136: case 177: case 187: case 211: case 229: case 291:
this.$ = [ $$[$0-1] ];
break;
case 124: case 137: case 188: case 212: case 230: case 292:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 125:
this.$ = { modifiers: $$[$0-2] };
break;
case 127:
this.$ = [ $$[$0-2], ...$$[$0] ];
break;
case 128:
this.$ = { fields: $$[$0-2] };
break;
case 129:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 130:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 132: case 156:
this.$ = { ...$$[$0-1], ...$$[$0] };
break;
case 133:
this.$ = { comment: $$[$0] };
break;
case 135:
this.$ = { associations: $$[$0-2] };
break;
case 141:
this.$ = { type: $$[$0-1], destEntity: $$[$0] }        ;
break;
case 142:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], fieldProps: $$[$0] }        ;
break;
case 143:
this.$ = { type: $$[$0-3], destEntity: $$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 144:
this.$ = { type: $$[$0-4], destEntity: $$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 145:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 146: case 147:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], ...$$[$0] }      ;
break;
case 148:
this.$ = { type: $$[$0-4], destEntity: $$[$0-1], destField: $$[$0-3], ...$$[$0] }          ;
break;
case 149:
this.$ = { ...$$[$0-2], srcField: $$[$0], existingField: true };
break;
case 150:
this.$ = { ...$$[$0-4], srcField: $$[$0-2], existingField: true, anchor: $$[$0] };
break;
case 152:
this.$ = { ...$$[$0-2], srcField: $$[$0] };
break;
case 153:
this.$ = { ...$$[$0-1], fieldProps: $$[$0] };
break;
case 154:
this.$ = { ...$$[$0-3], srcField: $$[$0-1], fieldProps: $$[$0] };
break;
case 157:
this.$ = { ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 163:
this.$ = "hasOne";
break;
case 165:
this.$ = "hasMany";
break;
case 166:
this.$ = { by: $$[$0] }    ;
break;
case 167:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 168:
this.$ = { remoteField: $$[$0] }     ;
break;
case 169:
this.$ = { remoteField: $$[$0] }      ;
break;
case 170:
this.$ = { with: $$[$0] };
break;
case 173:
this.$ = { with: $$[$0] }    ;
break;
case 174:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 176:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 178:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 179:
this.$ = $$[$0];;
break;
case 180:
this.$ = { srcField: $$[$0] };
break;
case 181:
this.$ = { optional: true };
break;
case 182:
this.$ = { default: $$[$0-1] };
break;
case 183:
this.$ = { key: $$[$0-1] };
break;
case 184:
this.$ = { key: $$[$0-1] } ;
break;
case 185:
this.$ = { indexes: [$$[$0-1]] };
break;
case 186:
this.$ = { indexes: $$[$0-2] };
break;
case 190:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 191:
this.$ = { ...$$[$0], overrideRemove: true };
break;
case 192: case 193:
this.$ = { fields: $$[$0] };
break;
case 194:
this.$ = { views: $$[$0-2] }     ;
break;
case 195:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 196:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 197:
this.$ = { name: $$[$0] };
break;
case 198:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 199:
this.$ = { $select: $$[$0-5], ...($$[$0-4] ? { $relation: $$[$0-4] } : null), ...($$[$0-3] ? { $countBy: $$[$0-3] } : null), ...($$[$0-2] ? { $groupBy: $$[$0-2] } : null), ...($$[$0-1] && $$[$0-1].length > 0 ? { $orderBy: state.processOrderByInView($$[$0-1]) } : null), ...$$[$0] };
break;
case 200: case 201: case 207: case 226:
this.$ = $$[$0-2];
break;
case 205: case 310: case 321: case 322: case 334:
this.$ = $$[$0-1];
break;
case 209:
this.$ = { "$default": state.processOrderByItemInView($$[$0-2]) };
break;
case 210:
this.$ = { [$$[$0-5]]: state.processOrderByItemInView($$[$0-2]) };
break;
case 213:
this.$ = { field: $$[$0], ascend: true };
break;
case 214:
this.$ = { field: $$[$0-1], ascend: true }    ;
break;
case 215:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 227:
this.$ = state.idOrFunctionToKV($$[$0-1]);
break;
case 228:
this.$ = { ...state.idOrFunctionToKV($$[$0-2]), ...$$[$0] };
break;
case 233:
this.$ = "*";
break;
case 234: case 235:
this.$ = { $xt: "ExclusiveSelect", columnSet: $$[$0-1], excludes: $$[$0] };
break;
case 236:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 237:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 238:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 241:
this.$ = { triggers: $$[$0-2] };
break;
case 242:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 243:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 244:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 249:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 250:
this.$ = { do: $$[$0-2] };
break;
case 251:
this.$ = { name: $$[$0], type: $$[$0] };
break;
case 252:
this.$ = { name: $$[$0-1], type: $$[$0-1], ...$$[$0] };
break;
case 253:
this.$ = { name: $$[$0-2], type: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 254:
this.$ = { name: $$[$0-3], type: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 255:
this.$ = state.normalizePipedValue($$[$0]);
break;
case 256:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 261: case 280:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 264:
this.$ = { name: $$[$0-2], args: [] };
break;
case 266: case 276: case 277: case 278:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 272:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 279:
this.$ = [ $$[$0] ]    ;
break;
case 283: case 320: case 431:
this.$ = [];
break;
case 286:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 294:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 309:
this.$ = {}    ;
break;
case 311: case 312: case 314:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 313:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 328:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 335:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 336:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 337:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 338:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 339:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 340:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 341:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 342:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 343:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 344:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 345:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 346:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 347:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 348:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 349:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 350:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 351:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 352:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 353:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 354:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 355:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 356:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 357:
this.$ = { operator: 'and' };
break;
case 358:
this.$ = { operator: 'or' };
break;
case 432: case 448: case 450:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,24:$V1,31:$V2,36:$V3,46:$V4,48:$V5,99:$V6,100:23,103:$V7,106:24,111:$V8},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,26]},{5:[2,4],6:27,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,24:$V1,31:$V2,36:$V3,46:$V4,48:$V5,99:$V6,100:23,103:$V7,106:24,111:$V8},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,14]),{18:28,19:[1,29],28:30,303:$Va,306:$Vb},{19:[1,34],25:33,28:35,306:$Vb},{18:38,19:[1,37],28:30,49:36,303:$Va,306:$Vb},{19:[1,40],32:39,91:$Vc,93:$Vd,95:$Ve},{18:44,28:30,303:$Va,306:$Vb},{19:[1,45]},{100:46,106:24,111:$V8},{100:47,106:24,111:$V8},{19:[1,48]},{19:[2,99],107:49,109:[1,50],110:[1,51]},{18:52,28:54,89:53,290:55,303:$Va,306:$Vb},{1:[2,3]},{5:[2,5]},{19:[1,56]},{20:[1,57]},o($Vf,$Vg),o($Vf,[2,298]),o([19,29,59,91,93,95,109,110,125,126,160,162,163,181,184,185,194,195,203,204,241,242,243,244,245,246,247,248,249,250,257,263,289,306,312,313,319,320,326,327,329,331,332,333,334,335,336,339,340],[2,299]),{19:[1,58]},{20:[1,59]},{29:[1,60]},{19:[1,61]},{20:[1,62]},{52:63,59:$Vh},{19:[1,65]},{20:[1,66]},{28:71,45:$Vi,92:67,94:68,97:70,98:$Vj,299:$Vk,306:$Vb},{28:71,45:$Vi,94:74,97:70,299:$Vk,306:$Vb},{28:71,45:$Vi,94:75,97:70,299:$Vk,306:$Vb},{19:[1,76]},{20:[1,77]},{19:[1,78]},{19:[1,79]},o($V9,[2,97],{20:[1,80]}),{18:83,28:54,89:84,108:81,129:82,290:55,303:$Va,306:$Vb},o($Vl,[2,101]),o($Vl,[2,102]),o($Vm,[2,103]),o($Vm,[2,104]),o([19,109,110,289],$Vg,{194:$Vn}),o($Vo,[2,265]),o($V9,[2,15]),{18:87,21:86,28:30,303:$Va,306:$Vb},o($V9,[2,19]),{25:89,26:88,28:35,306:$Vb},{30:90,98:$Vp,264:94,265:95,303:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},o($V9,[2,36]),{18:38,28:30,49:103,50:102,303:$Va,306:$Vb},{19:[2,38],28:111,32:110,53:104,54:105,56:106,88:109,89:112,90:108,91:$Vc,93:$Vd,95:$Ve,125:$Vy,290:55,306:$Vb},{18:124,28:30,60:113,61:114,62:115,63:116,64:117,65:118,66:119,67:[1,120],68:[1,121],69:[1,122],70:123,71:[1,125],72:[1,126],73:[1,127],74:[1,128],75:[1,129],76:[1,130],77:[1,131],78:[1,132],79:[1,133],80:[1,134],81:[1,140],82:[1,141],83:[1,135],84:[1,136],85:[1,137],86:[1,138],87:[1,139],303:$Va,306:$Vb},o($V9,[2,24]),{33:142,35:143,91:$Vz,93:$VA,95:$VB},o($VC,[2,80]),o($VC,[2,91]),o($VC,[2,92]),o($VC,[2,88]),o($VC,[2,89],{194:$VD}),o($VC,[2,90],{194:$VE}),{194:[1,149]},o($VC,[2,81]),o($VC,[2,82]),{20:[1,150]},o($VF,$VG,{37:151,39:152,125:$VH}),o($V9,[2,93],{20:[1,154]}),o($V9,[2,95],{20:[1,155]}),o($VI,$VG,{101:156,39:157,125:$VH}),{19:[2,100]},{19:[2,260],288:158,289:$VJ},o($VK,[2,258]),o($VK,[2,259]),{28:164,30:163,98:$Vp,195:[1,160],264:94,265:95,291:161,292:162,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{22:[1,165]},{19:[1,166]},{22:[1,167]},{19:[1,168]},{19:[2,21]},o($VC,[2,300]),o($VC,[2,301]),o($VC,[2,302]),o($VC,[2,303]),o($VC,[2,304]),o($VC,[2,305]),o($VC,[2,306]),o($VC,[2,307]),o($VC,[2,308]),{18:172,28:174,303:$Va,306:$Vb,307:$VL,313:[1,169],314:170,315:171,316:$VM},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:178,286:179,292:180,298:177,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,320:[1,176]},{22:[1,185]},{19:[1,186]},{19:[2,39]},{19:[2,375],53:188,55:187,125:$Vy},o($VP,[2,377],{90:108,32:110,57:189,54:190,91:$Vc,93:$Vd,95:$Ve}),{19:[2,133]},o($VC,[2,77]),o($VQ,[2,73],{290:55,88:109,28:111,89:112,56:191,306:$Vb}),o($VR,[2,78],{32:110,90:192,91:$Vc,93:$Vd,95:$Ve}),o($VS,[2,75],{194:$Vn}),o($VS,[2,76]),o($VS,[2,44]),o($VS,[2,45]),o($VS,[2,46]),o($VS,[2,47]),o($VS,[2,48]),o($VS,[2,49]),o($VS,[2,50]),o($VS,[2,51]),o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,62]),o($VS,[2,63]),o($VS,[2,64]),o($VS,[2,65]),o($VS,[2,68]),o($VS,[2,69]),o($VS,[2,70]),o($VS,[2,71]),o($VS,[2,72]),o($VS,[2,66]),o($VS,[2,67]),{22:[1,193]},{19:[1,194]},{28:196,89:197,96:195,290:55,306:$Vb},{28:196,89:197,96:198,290:55,306:$Vb},{28:196,89:197,96:199,290:55,306:$Vb},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:178,286:179,292:180,298:200,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:178,286:179,292:180,298:201,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:178,286:179,292:180,298:202,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},o($VF,$VG,{39:152,37:203,125:$VH}),{22:[1,204]},{22:[2,367],40:205,41:206,42:[1,207]},{19:[1,208]},o($VI,$VG,{39:157,101:209,125:$VH}),o($VI,$VG,{39:157,101:210,125:$VH}),{22:[1,211]},{22:[2,105],112:212,113:213,114:214,115:215,116:216,117:217,118:218,119:219,120:220,121:221,122:222,123:223,124:$VT,126:$VU,130:$VV,133:$VW,139:$VX,196:$VY,197:$VZ,205:$V_,260:$V$,266:$V01},{19:[2,261]},{18:83,28:54,89:84,129:234,290:55,303:$Va,306:$Vb},o($Vo,[2,264]),{195:[1,235]},{195:[2,267],289:$V11,293:236},o($VC,[2,271]),o([195,289],$V21),o($V9,[2,359],{23:238,19:[1,239]}),{18:87,21:240,22:[2,17],28:30,303:$Va,306:$Vb},o($V9,[2,361],{27:241,19:[1,242]}),{22:[2,22],25:89,26:243,28:35,306:$Vb},o($VC,[2,309]),{313:[1,244]},{289:$V31,313:[2,316],318:245},{59:[1,247]},{59:[1,248]},o($V41,[2,315],{317:249,59:$Vg}),{59:[1,250]},o($VC,[2,320]),{320:[1,251]},o($V51,[2,279],{300:252,289:$V61}),o($VR,[2,255],{90:108,32:110,54:254,91:$Vc,93:$Vd,95:$Ve}),o($VC,[2,284]),o($VC,[2,285],{302:[1,255]}),o($VC,[2,287]),o($VC,$V21,{194:$VD}),{194:$VE},o($V9,[2,373],{51:256,19:[1,257]}),{18:38,22:[2,42],28:30,49:103,50:258,303:$Va,306:$Vb},{19:[2,40]},{19:[2,376]},{19:[2,379],53:260,58:259,125:$Vy},o($VP,[2,378]),o($VQ,[2,74]),o($VC,[2,79]),o($V9,[2,363],{34:261,19:[1,262]}),{22:[2,26],33:263,35:143,91:$Vz,93:$VA,95:$VB},{19:[2,83]},{19:[2,86],194:$Vn},{19:[2,87]},{19:[2,84]},{19:[2,85]},{195:[1,264]},{195:[1,265]},{195:[1,266]},{22:[1,267]},o($V9,[2,371],{47:268,19:[1,269]}),{22:[2,29]},{22:[2,368]},{19:[1,270]},o([22,42,124,126,130,133,139,196,197,205,260,266],[2,121]),{22:[1,271]},{22:[1,272]},o($V9,[2,385],{105:273,19:[1,274]}),{22:[2,106]},{22:[2,107],112:275,113:213,114:214,115:215,116:216,117:217,118:218,119:219,120:220,121:221,122:222,123:223,124:$VT,126:$VU,130:$VV,133:$VW,139:$VX,196:$VY,197:$VZ,205:$V_,260:$V$,266:$V01},o($VI,[2,109]),o($VI,[2,110]),o($VI,[2,111]),o($VI,[2,112]),o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,115]),o($VI,[2,116]),o($VI,[2,117]),o($VI,[2,118]),{19:[1,276]},{19:[1,277]},{19:[1,278]},{19:[1,279]},{18:280,28:30,182:281,303:$Va,306:$Vb,319:$V71},{18:287,19:[1,284],28:30,182:288,198:283,201:285,204:$V81,303:$Va,306:$Vb,319:$V71},{19:[1,289]},{18:291,28:30,261:290,262:292,263:[2,451],264:293,265:294,303:$Va,306:$Vb,312:$Vw,319:$Vx},{18:295,28:30,303:$Va,306:$Vb},{19:[1,296]},{19:[2,262],288:297,289:$VJ},o($Vo,[2,266]),{195:[2,268]},{28:164,30:163,98:$Vp,264:94,265:95,292:298,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},o($V9,[2,16]),o($V9,[2,360]),{22:[2,18]},o($V9,[2,20]),o($V9,[2,362]),{22:[2,23]},o($VC,[2,310]),{313:[2,317]},{18:172,28:174,303:$Va,306:$Vb,307:$VL,315:299,316:$VM},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:300,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:301,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},o($V41,[2,313]),{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:302,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},o($VC,[2,321]),o($V51,[2,280]),o($V51,[2,283],{264:94,265:95,30:163,286:179,292:180,97:182,28:183,285:303,45:$VN,98:$Vp,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx}),o($VC,[2,256]),o($VC,[2,286]),o($V9,[2,37]),o($V9,[2,374]),{22:[2,43]},{19:[2,41]},{19:[2,380]},o($V9,[2,25]),o($V9,[2,364]),{22:[2,27]},o($VC,[2,276]),o($VC,[2,277]),o($VC,[2,278]),o($V9,[2,365],{38:304,19:[1,305]}),o($V9,[2,35]),o($V9,[2,372]),{20:[1,306]},o($V9,[2,381],{102:307,19:[1,308]}),o($V9,[2,383],{104:309,19:[1,310]}),o($V9,[2,98]),o($V9,[2,386]),{22:[2,108]},{20:[1,311]},{20:[1,312]},{20:[1,313]},{20:[1,314]},{19:[1,315]},{19:[1,316]},{18:318,28:30,303:$Va,306:$Vb,321:317},{19:[1,319]},{20:[1,320]},{19:[2,189],110:[1,322],202:321,203:[2,421]},{18:287,28:30,182:288,201:323,303:$Va,306:$Vb,319:$V71},o($V91,[2,192]),o($V91,[2,193]),{20:[1,324]},{19:[1,325]},{261:326,263:[2,452],264:293,265:294,312:$Vw,319:$Vx},{263:[1,327]},{19:[2,239]},{19:[2,240]},{19:[1,328]},{20:[1,329]},{19:[2,263]},{195:[2,269],289:$V11,293:330},{289:$V31,313:[2,318],318:331},o($V41,[2,311]),o($V41,[2,312]),o($V41,[2,314]),o($V51,[2,281],{300:332,289:$V61}),o($V9,[2,28]),o($V9,[2,366]),{18:334,28:30,43:333,45:$Va1,303:$Va,306:$Vb},o($V9,[2,94]),o($V9,[2,382]),o($V9,[2,96]),o($V9,[2,384]),{18:83,28:54,89:84,127:336,129:337,290:55,303:$Va,306:$Vb},{35:339,91:$Vz,93:$VA,95:$VB,131:338},{18:344,28:30,134:340,136:341,137:342,138:343,303:$Va,306:$Vb},{133:$Vb1,140:345,142:346,143:347,144:348,145:349,146:350,155:351,156:355,158:356,168:$Vc1,169:$Vd1,171:$Ve1,172:$Vf1,173:$Vg1,175:$Vh1},o($VI,[2,183]),o($VI,[2,184]),{320:[1,361]},{289:$Vi1,320:[2,323],322:362},o($VI,[2,185]),{18:287,28:30,182:288,198:365,199:364,201:285,204:$V81,303:$Va,306:$Vb,319:$V71},{203:[1,366]},{203:[2,422]},{19:[2,191]},{18:369,28:30,206:367,208:368,303:$Va,306:$Vb},o($VI,[2,236]),{19:[1,370]},{18:371,28:30,303:$Va,306:$Vb},o($VI,[2,119]),{267:372,269:373,270:$Vj1,273:$Vk1,275:$Vl1},{195:[2,270]},{313:[2,319]},o($V51,[2,282]),{22:[1,377]},{19:[1,378]},{19:[1,379]},{22:[1,380]},{19:[1,381]},{22:[1,382]},{19:[1,383]},{22:[1,384]},{19:[1,385]},{19:[2,131],53:386,125:$Vy},o($VP,[2,134]),o($VP,[2,251],{290:55,90:108,88:109,32:110,28:111,89:112,54:387,56:388,52:389,59:$Vh,91:$Vc,93:$Vd,95:$Ve,306:$Vb}),{22:[1,390]},{19:[1,391]},{19:[2,138]},{19:[2,139]},{19:[2,140]},{18:392,28:30,303:$Va,306:$Vb},{19:[2,151],28:111,32:110,53:396,54:397,56:398,88:109,89:112,90:108,91:$Vc,93:$Vd,95:$Ve,125:$Vy,162:[1,395],163:[1,393],164:394,290:55,306:$Vb},o($Vl,[2,162]),{174:[1,399],176:[1,400]},o($Vl,[2,164]),{18:401,28:30,303:$Va,306:$Vb},{18:402,28:30,303:$Va,306:$Vb},o($Vl,[2,160]),{170:[1,403]},o($Vl,[2,158]),{170:[1,404]},o([19,110,125,163,203,306],[2,322]),{320:[2,324]},{18:405,28:30,303:$Va,306:$Vb},{22:[1,406]},{19:[1,407]},{19:[2,190]},{22:[1,408]},{19:[1,409]},{19:[2,197],109:[1,410]},o($VI,[2,237]),{261:411,264:293,265:294,312:$Vw,319:$Vx},{22:[1,412]},{22:[2,245],267:413,269:373,270:$Vj1,273:$Vk1,275:$Vl1},{19:[1,414]},{19:[1,415]},{19:[1,416]},{19:[1,418],22:[2,369],44:417},{18:334,22:[2,31],28:30,43:419,45:$Va1,303:$Va,306:$Vb},{18:334,22:[2,32],28:30,43:420,45:$Va1,303:$Va,306:$Vb},o($VI,[2,387],{128:421,19:[1,422]}),{18:83,22:[2,123],28:54,89:84,127:423,129:337,290:55,303:$Va,306:$Vb},o($VI,[2,389],{132:424,19:[1,425]}),{22:[2,126],35:339,91:$Vz,93:$VA,95:$VB,131:426},o($VI,[2,391],{135:427,19:[1,428]}),{18:344,22:[2,129],28:30,134:429,136:341,137:342,138:343,303:$Va,306:$Vb},{19:[2,132]},o($VP,[2,252]),o($VP,[2,465],{90:108,32:110,282:430,54:431,91:$Vc,93:$Vd,95:$Ve}),o($VQ,[2,467],{290:55,88:109,28:111,89:112,283:432,56:433,306:$Vb}),o($VI,[2,393],{141:434,19:[1,435]}),{22:[2,136],133:$Vb1,140:436,142:346,143:347,144:348,145:349,146:350,155:351,156:355,158:356,168:$Vc1,169:$Vd1,171:$Ve1,172:$Vf1,173:$Vg1,175:$Vh1},{19:[2,141],28:111,53:437,56:438,88:109,89:112,125:$Vy,126:$Vm1,148:439,151:440,163:$Vn1,177:442,180:443,181:[1,444],183:445,184:[1,446],185:[1,447],290:55,306:$Vb},{18:449,28:30,303:$Va,306:$Vb},{19:[2,153]},{18:450,28:30,303:$Va,306:$Vb},{19:[2,155]},{19:[2,413],53:452,125:$Vy,165:451},o($VP,[2,415],{90:108,32:110,166:453,54:454,91:$Vc,93:$Vd,95:$Ve}),o($Vl,[2,163]),o($Vl,[2,165]),o($Vo1,[2,407],{157:455,179:456,126:$Vp1}),o($Vo1,[2,409],{159:458,179:460,126:$Vp1,160:[1,459]}),o($Vl,[2,161]),o($Vl,[2,159]),{289:$Vi1,320:[2,325],322:461},o($VI,[2,419],{200:462,19:[1,463]}),{18:287,22:[2,187],28:30,182:288,198:365,199:464,201:285,204:$V81,303:$Va,306:$Vb,319:$V71},o($VI,[2,423],{207:465,19:[1,466]}),{20:[1,467]},{18:468,28:30,303:$Va,306:$Vb},{19:[1,469]},o($VI,[2,453],{268:470,19:[1,471]}),{22:[2,246]},{20:[1,472]},{20:[1,473]},{20:[1,474]},{22:[2,30]},{22:[2,370]},{22:[2,33]},{22:[2,34]},o($VI,[2,122]),o($VI,[2,388]),{22:[2,124]},o($VI,[2,125]),o($VI,[2,390]),{22:[2,127]},o($VI,[2,128]),o($VI,[2,392]),{22:[2,130]},o($VP,[2,253]),o($VP,[2,466]),o($VP,[2,469],{90:108,32:110,284:475,54:476,91:$Vc,93:$Vd,95:$Ve}),o($VQ,[2,468]),o($VI,[2,135]),o($VI,[2,394]),{22:[2,137]},{19:[2,142]},{19:[2,395],53:478,125:$Vy,147:477},o($VP,[2,397],{290:55,88:109,28:111,89:112,149:479,56:480,306:$Vb}),o($Vq1,[2,401],{152:481,148:482,163:$Vn1}),{18:483,28:30,303:$Va,306:$Vb},{28:485,178:484,299:$Vr1,303:$Vs1,306:$Vb},o($Vt1,[2,168]),{18:489,28:30,182:488,303:$Va,306:$Vb,319:$V71},o($Vt1,[2,170]),o($Vu1,[2,171]),{186:[1,490]},{28:183,30:163,45:$VN,67:$Vv1,97:182,98:$Vp,187:491,194:$Vw1,264:94,265:95,285:498,286:179,292:180,295:495,296:496,297:494,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,324:492,325:493,327:$Vx1,330:$Vy1},{19:[2,152],28:111,32:110,53:396,54:397,56:398,88:109,89:112,90:108,91:$Vc,93:$Vd,95:$Ve,125:$Vy,164:502,290:55,306:$Vb},{19:[2,149],163:[1,503]},{19:[2,156]},{19:[2,414]},{19:[2,417],53:505,125:$Vy,167:504},o($VP,[2,416]),o($Vo1,[2,146]),o($Vo1,[2,408]),{28:183,30:163,45:$VN,67:$Vv1,97:182,98:$Vp,187:506,194:$Vw1,264:94,265:95,285:498,286:179,292:180,295:495,296:496,297:494,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,324:492,325:493,327:$Vx1,330:$Vy1},o($Vo1,[2,147]),{18:507,28:30,303:$Va,306:$Vb},o($Vo1,[2,410]),{320:[2,326]},o($VI,[2,186]),o($VI,[2,420]),{22:[2,188]},o($VI,[2,194]),o($VI,[2,424]),{209:508,210:509,216:[1,510]},{19:[2,198]},o($VI,[2,238]),o($VI,[2,241]),o($VI,[2,454]),{190:$Vz1,271:511,277:512,280:$VA1},{190:$Vz1,271:515,277:512,280:$VA1},{190:$Vz1,271:516,277:512,280:$VA1},o($VP,[2,254]),o($VP,[2,470]),{19:[2,143]},{19:[2,396]},{19:[2,399],53:518,125:$Vy,150:517},o($VP,[2,398]),o($VP,[2,403],{290:55,88:109,28:111,89:112,153:519,56:520,306:$Vb}),o($Vq1,[2,402]),o($Vq1,[2,180]),o($Vt1,[2,166],{179:521,126:$Vp1}),o($VB1,[2,288]),o($VB1,[2,289]),o($VB1,[2,290]),o($Vt1,[2,169]),o($Vt1,[2,175],{183:522,126:$Vm1}),o($Vu1,[2,172]),o($Vt1,[2,179]),o($Vo1,[2,329],{337:523,338:524,339:[1,525],340:[1,526]}),o($Vo1,[2,330]),o($Vo1,[2,331]),o($VC1,[2,332]),o($VC1,[2,333]),{28:183,30:163,45:$VN,97:182,98:$Vp,194:$Vw1,264:94,265:95,285:528,286:179,292:180,295:495,296:496,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,324:527,327:$Vx1},{110:$VD1,204:$VE1,245:$VF1,250:$VG1,257:$VH1,263:$VI1,326:$VJ1,327:$VK1,329:[1,529],331:$VL1,332:$VM1,333:$VN1,334:$VO1,335:$VP1,336:$VQ1},{265:544,319:$Vx},{265:545,319:$Vx},{194:[1,546]},{19:[2,154]},{18:547,28:30,303:$Va,306:$Vb},{19:[2,157]},{19:[2,418]},o($Vo1,[2,173]),o($Vo1,[2,411],{161:548,179:549,126:$Vp1}),{22:[1,550]},o($VR1,[2,425],{211:551,219:552,220:553,223:[1,554],224:[1,555]}),{19:[1,556]},{22:[1,557]},{22:[2,247],190:$Vz1,271:558,277:512,280:$VA1},{28:183,30:163,45:$VN,67:$Vv1,97:182,98:$Vp,187:559,194:$Vw1,264:94,265:95,285:498,286:179,292:180,295:495,296:496,297:494,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,324:492,325:493,327:$Vx1,330:$Vy1},{19:[1,560]},{22:[1,561]},{22:[1,562]},{19:[2,144]},{19:[2,400]},{19:[2,405],53:564,125:$Vy,154:563},o($VP,[2,404]),o($Vt1,[2,167]),o($Vt1,[2,176]),o($Vo1,[2,355]),{28:183,30:163,45:$VN,97:182,98:$Vp,194:$Vw1,264:94,265:95,285:528,286:179,292:180,295:495,296:496,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,324:565,327:$Vx1},o($VS1,[2,357]),o($VS1,[2,358]),{195:[1,566]},{110:$VD1,204:$VE1,245:$VF1,250:$VG1,257:$VH1,263:$VI1,326:$VJ1,327:$VK1,331:$VL1,332:$VM1,333:$VN1,334:$VO1,335:$VP1,336:$VQ1},{28:71,45:$Vi,92:567,94:68,97:70,98:$Vj,299:$Vk,306:$Vb},o($VC1,[2,335]),{263:[1,569],326:[1,568]},{327:[1,571],328:[1,570]},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:572,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:573,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:574,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:575,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:576,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:577,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:578,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:579,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:580,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:581,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:582,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},{329:[1,583]},{329:[1,584]},{28:183,30:163,45:$VN,97:182,98:$Vp,194:$Vw1,264:94,265:95,285:528,286:179,292:180,295:495,296:496,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx,324:585,327:$Vx1},{19:[2,150]},o($Vo1,[2,148]),o($Vo1,[2,412]),{18:369,19:[1,586],28:30,206:587,208:368,303:$Va,306:$Vb},o($VT1,[2,427],{212:588,227:589,225:590,226:[1,591]}),o($VR1,[2,426]),{19:[1,592]},{19:[2,202]},{19:[2,203]},{20:[1,593]},o($VU1,[2,455],{272:594,19:[1,595]}),{22:[2,248]},{19:[1,596]},{20:[1,597]},o($VU1,[2,457],{274:598,19:[1,599]}),o($VU1,[2,459],{276:600,19:[1,601]}),{19:[2,145]},{19:[2,406]},o($Vo1,[2,356]),o($VC1,[2,334]),o($Vo1,[2,340]),o($VC1,[2,336]),{28:183,30:163,45:$VN,97:182,98:$Vp,264:94,265:95,285:602,286:179,292:180,299:$Vk,301:$VO,303:$Vq,306:$Vb,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,312:$Vw,319:$Vx},o($VC1,[2,337]),{328:[1,603]},o($VC1,[2,343]),o($VC1,[2,344]),o($VC1,[2,345]),o($VC1,[2,346]),o($VC1,[2,347]),o($VC1,[2,348]),o($VC1,[2,349]),o($VC1,[2,351]),o($VC1,[2,352]),o($VC1,[2,353]),o($VC1,[2,354]),{28:71,45:$Vi,92:604,94:68,97:70,98:$Vj,299:$Vk,306:$Vb},{28:71,45:$Vi,92:605,94:68,97:70,98:$Vj,299:$Vk,306:$Vb},{195:[1,606]},{22:[2,195]},{22:[2,196]},o($VV1,[2,429],{213:607,230:608,228:609,229:[1,610]}),o($VT1,[2,428]),{28:485,178:611,299:$Vr1,303:$Vs1,306:$Vb},o($Vu1,[2,204]),{20:[1,612]},{28:485,178:615,217:613,255:614,256:$VW1,257:$VX1,299:$Vr1,303:$Vs1,306:$Vb},o($VU1,[2,242]),o($VU1,[2,456]),{20:[1,618]},{278:[1,619]},o($VU1,[2,243]),o($VU1,[2,458]),o($VU1,[2,244]),o($VU1,[2,460]),o($VC1,[2,350]),o($VC1,[2,338]),o($Vo1,[2,341]),o($Vo1,[2,342]),o($VC1,[2,339]),o($VV1,[2,431],{214:620}),o($VV1,[2,430]),{19:[1,621]},{19:[2,206]},{19:[1,622]},{28:485,178:624,221:623,299:$Vr1,303:$Vs1,306:$Vb},{22:[1,625]},{19:[1,626]},{19:[2,231]},{19:[2,232],259:627,341:[1,628]},{19:[2,233],258:629,341:[1,630]},{278:[1,631]},{22:[1,632]},{22:[2,433],215:633,232:636,233:[1,638],234:634,251:635,252:[1,637]},{20:[1,639]},o($VT1,[2,205]),{22:[1,640]},{19:[1,641]},o($VY1,[2,435],{218:642,19:[1,643]}),{22:[2,229],28:485,178:615,217:644,255:614,256:$VW1,257:$VX1,299:$Vr1,303:$Vs1,306:$Vb},{19:[2,235],341:[1,645]},o($VZ1,[2,449]),{19:[2,234],341:[1,646]},o($VZ1,[2,447]),{22:[1,647]},o($V_1,[2,463],{281:648,19:[1,649]}),{22:[2,199]},o($VV1,[2,432]),{22:[2,434]},{18:651,19:[1,650],28:30,303:$Va,306:$Vb},{19:[1,652]},o([19,303,306],[2,208]),{28:485,178:624,221:653,299:$Vr1,303:$Vs1,306:$Vb},o($VR1,[2,437],{222:654,19:[1,655]}),{22:[2,291],28:485,178:624,221:656,299:$Vr1,303:$Vs1,306:$Vb},o($VY1,[2,200]),o($VY1,[2,436]),{22:[2,230]},o($VZ1,[2,450]),o($VZ1,[2,448]),o($V_1,[2,461],{279:657,19:[1,658]}),o($V_1,[2,250]),o($V_1,[2,464]),{20:[1,659]},{19:[1,660]},{20:[1,661]},{22:[1,662]},o($VR1,[2,201]),o($VR1,[2,438]),{22:[2,292]},o($V_1,[2,249]),o($V_1,[2,462]),{28:485,178:665,235:663,238:664,299:$Vr1,303:$Vs1,306:$Vb},{20:[1,666]},{18:83,28:54,89:84,129:668,253:667,290:55,303:$Va,306:$Vb},o($VV1,[2,439],{231:669,19:[1,670]}),{22:[1,671]},{19:[1,672]},{19:[2,213],239:673,240:674,241:[1,675],242:[1,676],243:[1,677],244:[1,678],245:[1,679],246:[1,680],247:[1,681],248:[1,682],249:[1,683],250:[1,684]},{28:485,178:665,235:685,238:664,299:$Vr1,303:$Vs1,306:$Vb},{22:[1,686]},{19:[1,687]},o($VV1,[2,207]),o($VV1,[2,440]),o($VV1,[2,441],{236:688,19:[1,689]}),{22:[2,211],28:485,178:665,235:690,238:664,299:$Vr1,303:$Vs1,306:$Vb},{19:[2,214]},{19:[2,215]},{19:[2,216]},{19:[2,217]},{19:[2,218]},{19:[2,219]},{19:[2,220]},{19:[2,221]},{19:[2,222]},{19:[2,223]},{19:[2,224]},{19:[2,225]},{22:[1,691]},{19:[1,693],22:[2,445],254:692},{18:83,22:[2,227],28:54,89:84,129:668,253:694,290:55,303:$Va,306:$Vb},o($VV1,[2,209]),o($VV1,[2,442]),{22:[2,212]},o($VV1,[2,443],{237:695,19:[1,696]}),{22:[2,226]},{22:[2,446]},{22:[2,228]},o($VV1,[2,210]),o($VV1,[2,444])],
defaultActions: {2:[2,1],3:[2,2],26:[2,3],27:[2,5],81:[2,100],90:[2,21],104:[2,39],107:[2,133],158:[2,261],187:[2,40],188:[2,376],195:[2,83],197:[2,87],198:[2,84],199:[2,85],205:[2,29],206:[2,368],212:[2,106],236:[2,268],240:[2,18],243:[2,23],245:[2,317],258:[2,43],259:[2,41],260:[2,380],263:[2,27],275:[2,108],293:[2,239],294:[2,240],297:[2,263],322:[2,422],323:[2,191],330:[2,270],331:[2,319],347:[2,138],348:[2,139],349:[2,140],362:[2,324],366:[2,190],386:[2,132],394:[2,153],396:[2,155],413:[2,246],417:[2,30],418:[2,370],419:[2,33],420:[2,34],423:[2,124],426:[2,127],429:[2,130],436:[2,137],437:[2,142],451:[2,156],452:[2,414],461:[2,326],464:[2,188],468:[2,198],477:[2,143],478:[2,396],502:[2,154],504:[2,157],505:[2,418],517:[2,144],518:[2,400],547:[2,150],554:[2,202],555:[2,203],558:[2,248],563:[2,145],564:[2,406],586:[2,195],587:[2,196],610:[2,206],615:[2,231],633:[2,199],635:[2,434],644:[2,230],656:[2,292],673:[2,214],674:[2,215],675:[2,216],676:[2,217],677:[2,218],678:[2,219],679:[2,220],680:[2,221],681:[2,222],682:[2,223],683:[2,224],684:[2,225],690:[2,212],692:[2,226],693:[2,446],694:[2,228]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'customize', 'override', 'api', 'modifier', 'abstract']);

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'modifier.*': 'modifier.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'modifier.$INDENT': 'modifier.block', 

        'override.entity': 'entity',       
        'abstract.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.use': 'entity.use', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        //'entity.input': 'entity.input', 
        'entity.views': 'entity.views', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        //'entity.input.$INDENT': 'entity.input.inputSet',
        //'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',

        'entity.views.$INDENT': 'entity.views.dataSet',
        'entity.views.dataSet.$INDENT': 'entity.views.dataSet.item',

        'entity.views.dataSet.item.select': 'entity.views.dataSet.item.select',
        'entity.views.dataSet.item.select.$INDENT': 'entity.views.dataSet.item.select.item',

        'entity.views.dataSet.item.relation': 'entity.views.dataSet.item.relation',
        'entity.views.dataSet.item.relation.$INDENT': 'entity.views.dataSet.item.relation.item',

        'entity.views.dataSet.item.withRelations': 'entity.views.dataSet.item.relation',
        'entity.views.dataSet.item.withRelations.$INDENT': 'entity.views.dataSet.item.relation.item',

        'entity.views.dataSet.item.countBy': 'entity.views.dataSet.item.countBy',

        'entity.views.dataSet.item.groupBy': 'entity.views.dataSet.item.groupBy',
        'entity.views.dataSet.item.groupBy.$INDENT': 'entity.views.dataSet.item.groupBy.item',

        'entity.views.dataSet.item.orderBy': 'entity.views.dataSet.item.orderBy',
        'entity.views.dataSet.item.orderBy.$INDENT': 'entity.views.dataSet.item.orderBy.item',        

        'entity.views.dataSet.item.options': 'entity.views.dataSet.item.options',
        'entity.views.dataSet.item.options.$INDENT': 'entity.views.dataSet.item.options.item',        
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'abstract': new Set(['entity']),    
        'schema': new Set(['entities']),
        'entity': new Set([ 'is', 'extends', 'with', 'use', 'has', 'associations', 'key', 'index', 'data', 'input', 'views', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'has', 'one', 'many', 'refers', 'to', 'belongs']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        //'entity.input': new Set(['extends']),    
        'entity.views': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of', 'connected', 'by', 'on']),               
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),        
        
        //'entity.input.inputSet.item': new Set(['optional', 'default', 'with']),     

        'entity.views.dataSet.item': new Set(['select', 'relation', 'withRelations', 'orderBy', 'countBy', 'groupBy', 'options']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),     

        // level 6
        'entity.views.dataSet.item.orderBy.item': new Set(['asc', 'desc', 'ASC', 'DESC', 'v', '^', 'ascend', 'descend']),      
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.use', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        //[ 'entity.input.inputSet', 2 ],
        //[ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.views.dataSet', 2 ],
        [ 'entity.views.dataSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],  
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 2 ],
        [ 'entity.views.dataSet.item.relation', 1 ],
        [ 'entity.views.dataSet.item.relation.item', 2 ],
        [ 'entity.views.dataSet.item.countBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 2 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 2 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 2 ],        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'modifier.item', 2 ], 
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        //[ 'entity.input.inputSet', 1 ],
        //[ 'entity.input.inputSet.item', 1 ],
        [ 'entity.views.dataSet', 1 ],
        [ 'entity.views.dataSet.item', 1 ],        
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.relation', 1 ],
        [ 'entity.views.dataSet.item.relation.item', 1 ],
        [ 'entity.views.dataSet.item.countBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ],
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([      
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'float', 'int', 'integer', 'bigint', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);
    const TYPE_DEF_STATES = new Set([ 'type.item', 'type.block', 'entity.has', 'entity.input.inputSet.item' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.doNewline();

            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xt: 'Symbol', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (BUILTIN_TYPES.has(name)) {
                throw new Error(`Cannot use built-in type "${name}" as a custom type name at line: ${line}!`);
            }

            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            if (typeof name === 'object') {                
                this.define('entityTemplate', name.name, { ...value, templateArgs: name.args }, line);
            } else {
                this.define('entity', name, value, line);
            }
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        idOrFunctionToKV(value) {
            if (typeof value === 'string') {
                return { [value]: true };
            }

            return {
                [value.name]: value.args.length === 1 ? value.args[0] : value.args
            };
        }

        processOrderByInView(orderBys) {
            return orderBys.reduce((result, item) => {
                Object.assign(result, item);
                return result;
            }, {});
        }

        processOrderByItemInView(orderByItem) {
            return orderByItem.reduce((result, item) => {
                return { ...result, [item.field]: item.ascend };
            }, {});
        }
    }

    // merge two objects
    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 20;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 19;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 22;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 19;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 19;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 310;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 303;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 303;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 303;
                        
break;
case 15:
                            state.matchAnyExceptNewline();

                            yy_.yytext = yy_.yytext.substring(2).trim();
                            yy_.yytext = state.isQuote(yy_.yytext) ? state.unquoteString(yy_.yytext, 1) : yy_.yytext 
                            return 125;
                        
break;
case 16:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 19;
                            }
                        
break;
case 17:/* skip whitespace, separate tokens */
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 98;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 308;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 307;
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 22:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 307;
                        
break;
case 23:
                            state.matchAnyExceptNewline();                            
                            return 316;  
                        
break;
case 24:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 25:      
                                state.matchAnyExceptNewline();

                                return 299;
                           
break;
case 26:      
                                state.matchAnyExceptNewline();

                                return 45;
                           
break;
case 27:      
                                state.matchAnyExceptNewline();

                                return 256;
                           
break;
case 28:      
                                state.matchAnyExceptNewline();
                                yy_.yytext = yy_.yytext.substring(1);
                                return 341;
                           
break;
case 29:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 311;
                           
break;
case 30:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 301;
                           
break;
case 31:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 32:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 309;
                           
break;
case 33:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 34:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 35:return yy_.yytext;   
break;
case 36:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    if (TYPE_DEF_STATES.has(state.lastState) && BUILTIN_TYPES.has(yy_.yytext)) {
                                        state.matchAnyExceptNewline();                                    
                                        return yy_.yytext;
                                    }

                                    state.matchAnyExceptNewline();                                    
                                }

                                return 306;
                            
break;
case 37:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(--(([^\n\/\r])|(\/[^\/]))*))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((:)(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))?:)((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))*\.\\\*))/,/^(?:(-(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((:)(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*)))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,37],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,37],"inclusive":true},"DEDENTED":{"rules":[9,37],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true},"REPARSE":{"rules":[36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}