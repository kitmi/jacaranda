/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,17],$V6=[1,21],$V7=[1,22],$V8=[1,25],$V9=[5,17,24,31,36,48,50,101,105,113],$Va=[1,31],$Vb=[1,32],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[19,61,93,95,97,111,112,128,129,160,162,163,181,184,185,192,203,263,289,305,311,318,319],$Vg=[2,305],$Vh=[1,63],$Vi=[1,71],$Vj=[1,68],$Vk=[1,72],$Vl=[302,305],$Vm=[19,111,112],$Vn=[1,84],$Vo=[1,95],$Vp=[1,96],$Vq=[1,90],$Vr=[1,91],$Vs=[1,92],$Vt=[1,97],$Vu=[1,98],$Vv=[1,99],$Vw=[1,100],$Vx=[1,106],$Vy=[1,143],$Vz=[1,144],$VA=[1,145],$VB=[19,93,95,97,112,128,162,163,195,204,245,250,257,263,289,305,312,319,325,326,328,330,331,332,333,334,335,338,339],$VC=[1,146],$VD=[1,147],$VE=[22,42,44],$VF=[2,123],$VG=[1,152],$VH=[22,125,127,129,133,139,196,197,205,213,260,266],$VI=[1,158],$VJ=[19,192,289],$VK=[1,174],$VL=[1,172],$VM=[1,183],$VN=[1,180],$VO=[19,128],$VP=[19,93,95,97,128],$VQ=[19,112,128,162,163,195,204,245,250,257,263,289,305,312,319,325,326,328,330,331,332,333,334,335,338,339],$VR=[19,93,95,97,128,305],$VS=[22,42],$VT=[1,222],$VU=[1,232],$VV=[1,224],$VW=[1,225],$VX=[1,226],$VY=[1,227],$VZ=[1,228],$V_=[1,229],$V$=[1,230],$V01=[1,231],$V11=[1,233],$V21=[19,93,95,97,111,112,128,192,289,305],$V31=[1,237],$V41=[2,280],$V51=[1,246],$V61=[289,312],$V71=[195,319],$V81=[1,253],$V91=[1,283],$Va1=[1,287],$Vb1=[19,112,203],$Vc1=[1,337],$Vd1=[1,353],$Ve1=[1,359],$Vf1=[1,360],$Vg1=[1,357],$Vh1=[1,358],$Vi1=[1,352],$Vj1=[1,354],$Vk1=[1,363],$Vl1=[1,377],$Vm1=[1,378],$Vn1=[1,379],$Vo1=[1,449],$Vp1=[1,442],$Vq1=[19,93,95,97,128,162,163,305],$Vr1=[1,458],$Vs1=[19,128,305],$Vt1=[1,492],$Vu1=[1,491],$Vv1=[19,128,163,305],$Vw1=[298,302,305],$Vx1=[1,504],$Vy1=[1,502],$Vz1=[1,506],$VA1=[1,505],$VB1=[1,523],$VC1=[1,524],$VD1=[19,128,129,163,241,242,243,244,245,246,247,248,249,250,305],$VE1=[19,93,95,97,128,162,163,195,305,338,339],$VF1=[1,542],$VG1=[1,551],$VH1=[1,544],$VI1=[1,543],$VJ1=[1,552],$VK1=[1,549],$VL1=[1,540],$VM1=[1,541],$VN1=[1,545],$VO1=[1,546],$VP1=[1,547],$VQ1=[1,548],$VR1=[1,550],$VS1=[1,553],$VT1=[19,129],$VU1=[22,232,233,252],$VV1=[47,100,194,298,300,302,305,306,307,308,309,310,311,318,326],$VW1=[22,270,273,275],$VX1=[1,635],$VY1=[1,636],$VZ1=[19,302,305],$V_1=[22,226,227,232,233,252],$V$1=[19,340],$V02=[22,190,280];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"modifier_def_statement":11,"schema_statement":12,"customize_statement":13,"override_statement":14,"abstract_statement":15,"entity_statement":16,"import":17,"identifier_or_string":18,"NEWLINE":19,"INDENT":20,"import_statement_block":21,"DEDENT":22,"import_statement_option0":23,"const":24,"const_statement_item":25,"const_statement_block":26,"const_statement_option0":27,"identifier":28,"=":29,"literal":30,"modifier":31,"type_modifier":32,"modifier_def_statement_block":33,"modifier_def_statement_option0":34,"type_modifier_def":35,"schema":36,"schema_statement_block":37,"schema_statement_option0":38,"comment_or_not":39,"schema_statement_block_option0":40,"schema_views_or_not":41,"schema_views":42,"schema_entities":43,"entities":44,"schema_entities_block":45,"schema_entities_option0":46,"NAMESPACED":47,"customize":48,"customize_statement_option0":49,"type":50,"type_statement_item":51,"type_statement_block":52,"type_statement_option0":53,"type_base":54,"entity_or_field_comment":55,"type_modifiers_list":56,"type_statement_item_option0":57,"type_infos":58,"type_statement_item_option1":59,"type_statement_item_option2":60,":":61,"types":62,"int_keyword":63,"number_keyword":64,"text_keyword":65,"bool_keyword":66,"binary_keyword":67,"datetime_keyword":68,"any":69,"enum":70,"array":71,"object_keyword":72,"bigint":73,"int":74,"integer":75,"number":76,"float":77,"decimal":78,"text":79,"string":80,"bool":81,"boolean":82,"object":83,"json":84,"blob":85,"binary":86,"buffer":87,"datetime":88,"timestamp":89,"type_info":90,"simple_function_call":91,"type_modifiers":92,"|~":93,"type_modifier_validators":94,"|>":95,"identifier_or_general_function_call":96,"|=":97,"modifier_def_item":98,"general_function_call":99,"REGEXP":100,"override":101,"entity_statement_header":102,"entity_statement_block":103,"override_statement_option0":104,"abstract":105,"abstract_statement_option0":106,"entity_statement_option0":107,"entity_statement_header0":108,"entity_base_keywords":109,"id_or_string_or_call_list":110,"extends":111,"is":112,"entity":113,"entity_sub_items":114,"entity_sub_item":115,"with_features":116,"has_fields":117,"associations_statement":118,"key_statement":119,"index_statement":120,"input_statement":121,"views_statement":122,"data_statement":123,"code_statement":124,"interfaces_statement":125,"triggers_statement":126,"code":127,"INLINE_COMMENT":128,"with":129,"with_features_block":130,"with_features_option0":131,"id_or_string_or_call":132,"has":133,"has_fields_block":134,"has_fields_option0":135,"field_item":136,"field_item_body":137,"modifiable_field":138,"associations":139,"associations_block":140,"associations_statement_option0":141,"association_item":142,"association_item_many_to_one":143,"association_item_new_field":144,"association_item_existing_field":145,"association_type_referee":146,"association_item_many_to_one_option0":147,"association_as":148,"association_item_many_to_one_option1":149,"association_item_many_to_one_option2":150,"association_through":151,"association_item_many_to_one_option3":152,"association_item_many_to_one_option4":153,"association_item_many_to_one_option5":154,"association_item_belong_refer_to_base":155,"belongs_to_keywords":156,"association_item_belong_refer_to_base_option0":157,"refers_to_keywords":158,"association_item_belong_refer_to_base_option1":159,"of":160,"association_item_belong_refer_to_base_option2":161,"on":162,"as":163,"association_item_fields_props":164,"association_item_fields_props_option0":165,"association_item_fields_props_option1":166,"association_item_fields_props_option2":167,"refersTo":168,"refers":169,"to":170,"belongsTo":171,"belongs":172,"hasOne":173,"one":174,"hasMany":175,"many":176,"connected_by_keywords":177,"identifier_string_or_dotname":178,"association_extra_condition":179,"association_connection":180,"being":181,"array_of_identifier_or_string":182,"association_condition":183,"connectedBy":184,"connected":185,"by":186,"conditional_expression":187,"association_cases_block":188,"association_cases":189,"when":190,"association_qualifiers":191,"optional":192,"default":193,"(":194,")":195,"key":196,"index":197,"index_item":198,"index_statement_block":199,"index_statement_option0":200,"index_item_body":201,"index_item_option0":202,"unique":203,"-":204,"input":205,"input_statement_block":206,"input_statement_option0":207,"input_statement_def":208,"input_block":209,"input_block_item":210,"input_block_item_base":211,"input_block_item_with_spec":212,"views":213,"views_statement_block":214,"views_statement_option0":215,"views_statement_def":216,"entity_views_block":217,"views_statement_select":218,"entity_views_block_option0":219,"entity_views_block_repetition0":220,"entity_views_block_option1":221,"select":222,"entity_views_block_select":223,"views_statement_select_option0":224,"groupby_keywords":225,"groupBy":226,"group":227,"views_statement_group_by":228,"identifier_string_or_dotname_block":229,"views_statement_group_by_option0":230,"orderby_keywords":231,"orderBy":232,"order":233,"views_statement_order_by":234,"order_by_block":235,"views_statement_order_by_option0":236,"views_statement_order_by_option1":237,"order_by_clause":238,"order_ascend_keywords":239,"order_descend_keywords":240,"ascend":241,"ASC":242,"^":243,"asc":244,"<":245,"descend":246,"DESC":247,"v":248,"desc":249,">":250,"views_statement_options":251,"options":252,"entity_views_block_options":253,"views_statement_options_option0":254,"entity_views_block_select_item":255,"SELECT_ALL":256,"*":257,"entity_views_block_select_item_repetition_plus0":258,"entity_views_block_select_item_repetition_plus1":259,"data":260,"data_records":261,"data_statement_option0":262,"in":263,"inline_object":264,"inline_array":265,"triggers":266,"triggers_statement_block":267,"triggers_statement_option0":268,"triggers_operation":269,"onCreate":270,"triggers_operation_block":271,"triggers_operation_option0":272,"onCreateOrUpdate":273,"triggers_operation_option1":274,"onDelete":275,"triggers_operation_option2":276,"triggers_operation_item":277,"triggers_result_block":278,"triggers_operation_item_option0":279,"always":280,"triggers_operation_item_option1":281,"modifiable_field_option0":282,"modifiable_field_option1":283,"modifiable_field_option2":284,"modifiable_value":285,"gfc_param0":286,"modifiable_param":287,"id_or_string_or_call_list0":288,",":289,"nfc_param_list":290,"nfc_param":291,"nfc_param_list0":292,"literal_and_value_expression":293,"unary_expression":294,"binary_expression":295,"boolean_expression":296,"gfc_param_list":297,"DOTNAME":298,"gfc_param_list0":299,"REFERENCE":300,"?":301,"STRING":302,"identifier_string_or_dotname_list":303,"identifier_string_or_dotname_list0":304,"NAME":305,"INTEGER":306,"FLOAT":307,"BOOL":308,"SCRIPT":309,"SYMBOL":310,"{":311,"}":312,"kv_pairs":313,"kv_pair_item":314,"NESTED_KEY":315,"non_exist":316,"kv_pairs0":317,"[":318,"]":319,"identifier_or_string_list":320,"identifier_or_string_list0":321,"value":322,"simple_expression":323,"logical_expression":324,"exists":325,"not":326,"null":327,"~":328,"all":329,">=":330,"<=":331,"==":332,"!=":333,"+":334,"/":335,"logical_expression_right":336,"logical_operators":337,"and":338,"or":339,"EXCLUDE_COLUMN":340,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"import",19:"NEWLINE",20:"INDENT",22:"DEDENT",24:"const",29:"=",31:"modifier",36:"schema",42:"schema_views",44:"entities",47:"NAMESPACED",48:"customize",50:"type",61:":",69:"any",70:"enum",71:"array",73:"bigint",74:"int",75:"integer",76:"number",77:"float",78:"decimal",79:"text",80:"string",81:"bool",82:"boolean",83:"object",84:"json",85:"blob",86:"binary",87:"buffer",88:"datetime",89:"timestamp",93:"|~",95:"|>",97:"|=",100:"REGEXP",101:"override",105:"abstract",111:"extends",112:"is",113:"entity",125:"interfaces_statement",127:"code",128:"INLINE_COMMENT",129:"with",133:"has",139:"associations",160:"of",162:"on",163:"as",168:"refersTo",169:"refers",170:"to",171:"belongsTo",172:"belongs",173:"hasOne",174:"one",175:"hasMany",176:"many",181:"being",184:"connectedBy",185:"connected",186:"by",190:"when",192:"optional",193:"default",194:"(",195:")",196:"key",197:"index",203:"unique",204:"-",205:"input",213:"views",222:"select",226:"groupBy",227:"group",232:"orderBy",233:"order",241:"ascend",242:"ASC",243:"^",244:"asc",245:"<",246:"descend",247:"DESC",248:"v",249:"desc",250:">",252:"options",256:"SELECT_ALL",257:"*",260:"data",263:"in",266:"triggers",270:"onCreate",273:"onCreateOrUpdate",275:"onDelete",278:"triggers_result_block",280:"always",289:",",298:"DOTNAME",300:"REFERENCE",301:"?",302:"STRING",305:"NAME",306:"INTEGER",307:"FLOAT",308:"BOOL",309:"SCRIPT",310:"SYMBOL",311:"{",312:"}",315:"NESTED_KEY",318:"[",319:"]",325:"exists",326:"not",327:"null",328:"~",329:"all",330:">=",331:"<=",332:"==",333:"!=",334:"+",335:"/",338:"and",339:"or",340:"EXCLUDE_COLUMN"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[21,2],[21,3],[9,3],[9,6],[25,3],[26,2],[26,3],[11,3],[11,6],[33,2],[33,3],[12,7],[37,3],[41,0],[41,1],[43,6],[45,2],[45,2],[45,3],[45,3],[13,6],[10,3],[10,6],[51,2],[51,3],[51,4],[51,5],[52,2],[52,3],[54,2],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[63,1],[63,1],[64,1],[64,1],[64,1],[65,1],[65,1],[66,1],[66,1],[72,1],[72,1],[67,1],[67,1],[67,1],[68,1],[68,1],[58,1],[58,2],[90,1],[90,1],[56,1],[92,1],[92,2],[32,2],[32,2],[32,2],[35,2],[35,2],[35,2],[98,1],[98,1],[96,1],[96,1],[96,1],[94,1],[94,1],[14,3],[14,7],[15,3],[15,7],[16,2],[16,6],[102,1],[102,3],[109,1],[109,1],[108,2],[108,2],[103,1],[103,2],[114,1],[114,2],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[124,3],[39,0],[39,2],[116,6],[130,2],[130,3],[117,6],[134,2],[134,3],[136,1],[136,2],[55,1],[137,1],[118,6],[140,2],[140,3],[142,1],[142,1],[142,1],[143,2],[143,3],[143,4],[143,5],[143,6],[155,3],[155,3],[155,5],[145,3],[145,5],[144,1],[144,3],[144,2],[144,4],[164,1],[164,2],[164,3],[158,1],[158,2],[156,1],[156,2],[146,1],[146,2],[146,1],[146,2],[151,2],[151,3],[151,1],[151,2],[151,1],[177,1],[177,2],[179,2],[188,5],[180,2],[180,3],[189,3],[189,4],[183,2],[148,2],[191,1],[191,4],[119,3],[119,3],[120,3],[120,6],[199,2],[199,3],[198,1],[198,3],[198,2],[201,1],[201,1],[121,6],[206,6],[206,6],[208,1],[208,3],[209,2],[209,3],[210,1],[210,1],[211,1],[211,2],[212,3],[212,4],[122,6],[214,6],[214,6],[216,1],[216,3],[217,4],[218,6],[225,1],[225,2],[228,6],[231,1],[231,2],[234,6],[234,7],[235,2],[235,3],[238,1],[238,2],[238,2],[239,1],[239,1],[239,1],[239,1],[239,1],[240,1],[240,1],[240,1],[240,1],[240,1],[251,6],[253,2],[253,3],[223,2],[223,3],[255,1],[255,1],[255,2],[255,2],[123,3],[123,4],[123,6],[261,1],[261,1],[126,6],[269,6],[269,6],[269,6],[267,1],[267,2],[271,1],[271,2],[277,7],[277,6],[138,1],[138,2],[138,3],[138,4],[285,1],[285,2],[287,1],[132,1],[132,1],[110,1],[110,2],[288,2],[288,3],[91,3],[91,4],[290,1],[290,2],[292,2],[292,3],[291,1],[291,1],[293,1],[293,1],[293,1],[99,4],[99,4],[99,4],[297,1],[297,2],[299,2],[299,3],[299,1],[286,1],[286,1],[286,2],[286,1],[178,1],[178,1],[178,1],[229,2],[229,3],[303,1],[303,2],[304,2],[304,3],[18,1],[18,1],[28,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[264,2],[264,3],[314,3],[314,3],[314,2],[314,3],[316,0],[313,1],[313,2],[317,2],[317,3],[265,2],[265,3],[182,3],[320,1],[320,2],[321,2],[321,3],[322,1],[322,1],[187,1],[187,1],[187,1],[323,1],[323,1],[323,3],[294,2],[294,3],[294,3],[294,4],[294,4],[296,3],[296,4],[296,4],[295,3],[295,3],[295,3],[295,3],[295,3],[295,3],[295,3],[295,4],[295,3],[295,3],[295,3],[295,3],[324,2],[336,2],[337,1],[337,1],[23,0],[23,1],[27,0],[27,1],[34,0],[34,1],[38,0],[38,1],[40,0],[40,1],[46,0],[46,1],[49,0],[49,1],[53,0],[53,1],[57,0],[57,1],[59,0],[59,1],[60,0],[60,1],[104,0],[104,1],[106,0],[106,1],[107,0],[107,1],[131,0],[131,1],[135,0],[135,1],[141,0],[141,1],[147,0],[147,1],[149,0],[149,1],[150,0],[150,1],[152,0],[152,1],[153,0],[153,1],[154,0],[154,1],[157,0],[157,1],[159,0],[159,1],[161,0],[161,1],[165,0],[165,1],[166,0],[166,1],[167,0],[167,1],[200,0],[200,1],[202,0],[202,1],[207,0],[207,1],[215,0],[215,1],[219,0],[219,1],[220,0],[220,2],[221,0],[221,1],[224,0],[224,1],[230,0],[230,1],[236,0],[236,1],[237,0],[237,1],[254,0],[254,1],[258,1],[258,2],[259,1],[259,2],[262,0],[262,1],[268,0],[268,1],[272,0],[272,1],[274,0],[274,1],[276,0],[276,1],[279,0],[279,1],[281,0],[281,1],[282,0],[282,1],[283,0],[283,1],[284,0],[284,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 15:
this.$ = state.import($$[$0-1]) ;
break;
case 17:
this.$ = state.import($$[$0-1]);
break;
case 18:
this.$ = state.import($$[$0-2]);
break;
case 21:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 26:
this.$ = state.define($$[$0-1].$xt, $$[$0-1].name, $$[$0-1], _$[$0-1].first_line);
break;
case 27:
this.$ = state.define($$[$0-2].$xt, $$[$0-2].name, $$[$0-2], _$[$0-2].first_line);
break;
case 28:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 29:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 32:
this.$ = { entities: $$[$0-2] };
break;
case 33: case 34:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 35: case 36:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 37:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 40:
this.$ = state.defineType($$[$0-1], $$[$0], _$[$0-1].first_line);
break;
case 41:
this.$ = state.defineType($$[$0-2], { ...$$[$0-1], ...$$[$0] }, _$[$0-2].first_line);
break;
case 42:
this.$ = state.defineType($$[$0-3], { ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-3].first_line);
break;
case 43:
this.$ = state.defineType($$[$0-4], { ...$$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-4].first_line)    ;
break;
case 46: case 82: case 105: case 106: case 107: case 175: case 326:
this.$ = $$[$0];
break;
case 47:
this.$ = { type: 'integer' };
break;
case 48:
this.$ = { type: 'number' }    ;
break;
case 49:
this.$ = { type: 'text' };
break;
case 50:
this.$ = { type: 'boolean' };
break;
case 51:
this.$ = { type: 'binary' };
break;
case 52:
this.$ = { type: 'datetime' };
break;
case 53:
this.$ = { type: 'any' };
break;
case 54:
this.$ = { type: 'enum' };
break;
case 55:
this.$ = { type: 'array' };
break;
case 56:
this.$ = { type: 'object' };
break;
case 57:
this.$ = { type: $$[$0] };
break;
case 58:
this.$ = { type: 'bigint' };
break;
case 76: case 108: case 325: case 327:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 77:
this.$ = { [$$[$0]]: true };
break;
case 78:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 79:
this.$ = { modifiers: $$[$0] };
break;
case 80: case 254: case 256: case 269: case 271: case 275: case 277: case 289: case 301: case 303: case 331: case 333:
this.$ = [ $$[$0] ];
break;
case 81: case 255: case 257: case 272: case 276: case 278: case 290: case 304: case 332: case 334:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 83: case 86:
this.$ = state.normalizeProcessor(...$$[$0])        ;
break;
case 84: case 87:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 85: case 93:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 88: case 91: case 92: case 449: case 451:
this.$ = [$$[$0]];
break;
case 89: case 90:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 94:
this.$ = state.normalizeValidator('matches', $$[$0])        ;
break;
case 95:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 96:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 97:
this.$ = state.defineEntity($$[$0-1][0], { ...$$[$0-1][1], abstract: true }, _$[$0-2].first_line);
break;
case 98:
this.$ = state.defineEntity($$[$0-5][0], { ...$$[$0-5][1], ...$$[$0-2], abstract: true }, _$[$0-6].first_line);
break;
case 99:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 100:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 101:
this.$ = [ $$[$0], {} ];
break;
case 102:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 110:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 122:
this.$ = { code: $$[$0-1] };
break;
case 124:
this.$ = { comment: $$[$0-1] };
break;
case 125:
this.$ = { features: $$[$0-2] };
break;
case 126: case 136: case 177: case 187: case 199: case 221: case 239: case 299:
this.$ = [ $$[$0-1] ];
break;
case 127: case 137: case 188: case 200: case 222: case 240: case 300:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 128:
this.$ = { fields: $$[$0-2] };
break;
case 129:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 130:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 132: case 156:
this.$ = { ...$$[$0-1], ...$$[$0] };
break;
case 133:
this.$ = { comment: $$[$0] };
break;
case 135:
this.$ = { associations: $$[$0-2] };
break;
case 141:
this.$ = { type: $$[$0-1], destEntity: $$[$0] }        ;
break;
case 142:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], fieldProps: $$[$0] }        ;
break;
case 143:
this.$ = { type: $$[$0-3], destEntity: $$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 144:
this.$ = { type: $$[$0-4], destEntity: $$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 145:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 146: case 147:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], ...$$[$0] }      ;
break;
case 148:
this.$ = { type: $$[$0-4], destEntity: $$[$0-1], destField: $$[$0-3], ...$$[$0] }          ;
break;
case 149:
this.$ = { ...$$[$0-2], srcField: $$[$0], existingField: true };
break;
case 150:
this.$ = { ...$$[$0-4], srcField: $$[$0-2], existingField: true, anchor: $$[$0] };
break;
case 152:
this.$ = { ...$$[$0-2], srcField: $$[$0] };
break;
case 153:
this.$ = { ...$$[$0-1], fieldProps: $$[$0] };
break;
case 154:
this.$ = { ...$$[$0-3], srcField: $$[$0-1], fieldProps: $$[$0] };
break;
case 157:
this.$ = { ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 163:
this.$ = "hasOne";
break;
case 165:
this.$ = "hasMany";
break;
case 166:
this.$ = { by: $$[$0] }    ;
break;
case 167:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 168:
this.$ = { remoteField: $$[$0] }     ;
break;
case 169:
this.$ = { remoteField: $$[$0] }      ;
break;
case 170:
this.$ = { with: $$[$0] };
break;
case 173:
this.$ = { with: $$[$0] }    ;
break;
case 174:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 176:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 178:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 179:
this.$ = $$[$0];;
break;
case 180:
this.$ = { srcField: $$[$0] };
break;
case 181:
this.$ = { optional: true };
break;
case 182:
this.$ = { default: $$[$0-1] };
break;
case 183:
this.$ = { key: $$[$0-1] };
break;
case 184:
this.$ = { key: $$[$0-1] } ;
break;
case 185:
this.$ = { indexes: [$$[$0-1]] };
break;
case 186:
this.$ = { indexes: $$[$0-2] };
break;
case 190:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 191:
this.$ = { ...$$[$0], overrideRemove: true };
break;
case 192: case 193:
this.$ = { fields: $$[$0] };
break;
case 194:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 195: case 208:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 196: case 209:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 197: case 203: case 210:
this.$ = { name: $$[$0] };
break;
case 198: case 211:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 204:
this.$ = { name: $$[$0-1], optional: true };
break;
case 205:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 206:
this.$ = { ...$$[$0-3], spec: $$[$0-1], optional: true };
break;
case 207:
this.$ = { views: $$[$0-2] }     ;
break;
case 212:
this.$ = { $select: $$[$0-3], ...($$[$0-2] ? { $groupBy: $$[$0-2] } : null), ...($$[$0-1] && $$[$0-1].length > 0 ? { $orderBySet: $$[$0-1] } : null), ...$$[$0] };
break;
case 213: case 216: case 236:
this.$ = $$[$0-2];
break;
case 219:
this.$ = { "$default": $$[$0-2] };
break;
case 220:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 223:
this.$ = { field: $$[$0], ascend: true };
break;
case 224:
this.$ = { field: $$[$0-1], ascend: true }    ;
break;
case 225:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 237:
this.$ = state.idOrFunctionToKV($$[$0-1]);
break;
case 238:
this.$ = { ...state.idOrFunctionToKV($$[$0-2]), ...$$[$0] };
break;
case 243: case 244:
this.$ = { $xt: "ExclusiveSelect", columnSet: $$[$0-1], excludes: $$[$0] };
break;
case 245:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 246:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 247:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 250:
this.$ = { triggers: $$[$0-2] };
break;
case 251:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 252:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 253:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 258:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 259:
this.$ = { do: $$[$0-2] };
break;
case 260:
this.$ = { name: $$[$0], type: $$[$0] };
break;
case 261:
this.$ = { name: $$[$0-1], type: $$[$0-1], ...$$[$0] };
break;
case 262:
this.$ = { name: $$[$0-2], type: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 263:
this.$ = { name: $$[$0-3], type: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 264:
this.$ = state.normalizePipedValue($$[$0]);
break;
case 265:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 270: case 288:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 273:
this.$ = { name: $$[$0-2], args: [] };
break;
case 274: case 284: case 285: case 286:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 280:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 287:
this.$ = [ $$[$0] ]    ;
break;
case 291: case 328: case 435:
this.$ = [];
break;
case 294:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 302:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 317:
this.$ = {}    ;
break;
case 318: case 329: case 330: case 342:
this.$ = $$[$0-1];
break;
case 319: case 320: case 322:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 321:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 336:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 343:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 344:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 345:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 346:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 347:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 348:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 349:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 350:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 351:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 352:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 353:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 354:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 355:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 356:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 357:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 358:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 359:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 360:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 361:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 362:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 364:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 365:
this.$ = { operator: 'and' };
break;
case 366:
this.$ = { operator: 'or' };
break;
case 436: case 450: case 452:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,24:$V1,31:$V2,36:$V3,48:$V4,50:$V5,101:$V6,102:23,105:$V7,108:24,113:$V8},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,26]},{5:[2,4],6:27,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,24:$V1,31:$V2,36:$V3,48:$V4,50:$V5,101:$V6,102:23,105:$V7,108:24,113:$V8},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,14]),{18:28,19:[1,29],28:30,302:$Va,305:$Vb},{19:[1,34],25:33,28:35,305:$Vb},{18:38,19:[1,37],28:30,51:36,302:$Va,305:$Vb},{19:[1,40],32:39,93:$Vc,95:$Vd,97:$Ve},{18:44,28:30,302:$Va,305:$Vb},{19:[1,45]},{102:46,108:24,113:$V8},{102:47,108:24,113:$V8},{19:[1,48]},{19:[2,101],109:49,111:[1,50],112:[1,51]},{18:52,28:54,91:53,302:$Va,305:$Vb},{1:[2,3]},{5:[2,5]},{19:[1,55]},{20:[1,56]},o($Vf,$Vg),o($Vf,[2,306]),o([19,29,61,93,95,97,111,112,128,129,160,162,163,181,184,185,192,194,195,203,204,241,242,243,244,245,246,247,248,249,250,257,263,289,305,311,312,318,319,325,326,328,330,331,332,333,334,335,338,339],[2,307]),{19:[1,57]},{20:[1,58]},{29:[1,59]},{19:[1,60]},{20:[1,61]},{54:62,61:$Vh},{19:[1,64]},{20:[1,65]},{28:70,47:$Vi,94:66,96:67,99:69,100:$Vj,298:$Vk,305:$Vb},{28:70,47:$Vi,96:73,99:69,298:$Vk,305:$Vb},{28:70,47:$Vi,96:74,99:69,298:$Vk,305:$Vb},{19:[1,75]},{20:[1,76]},{19:[1,77]},{19:[1,78]},o($V9,[2,99],{20:[1,79]}),{18:82,28:54,91:83,110:80,132:81,302:$Va,305:$Vb},o($Vl,[2,103]),o($Vl,[2,104]),o($Vm,[2,105]),o($Vm,[2,106]),o([19,111,112,192,289],$Vg,{194:$Vn}),o($V9,[2,15]),{18:86,21:85,28:30,302:$Va,305:$Vb},o($V9,[2,19]),{25:88,26:87,28:35,305:$Vb},{30:89,100:$Vo,264:93,265:94,302:$Vp,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},o($V9,[2,38]),{18:38,28:30,51:102,52:101,302:$Va,305:$Vb},{19:[2,40],28:110,32:109,55:103,56:104,58:105,90:108,91:111,92:107,93:$Vc,95:$Vd,97:$Ve,128:$Vx,305:$Vb},{18:123,28:30,62:112,63:113,64:114,65:115,66:116,67:117,68:118,69:[1,119],70:[1,120],71:[1,121],72:122,73:[1,124],74:[1,125],75:[1,126],76:[1,127],77:[1,128],78:[1,129],79:[1,130],80:[1,131],81:[1,132],82:[1,133],83:[1,139],84:[1,140],85:[1,134],86:[1,135],87:[1,136],88:[1,137],89:[1,138],302:$Va,305:$Vb},o($V9,[2,24]),{33:141,35:142,93:$Vy,95:$Vz,97:$VA},o($VB,[2,82]),o($VB,[2,93]),o($VB,[2,94]),o($VB,[2,90]),o($VB,[2,91],{194:$VC}),o($VB,[2,92],{194:$VD}),{194:[1,148]},o($VB,[2,83]),o($VB,[2,84]),{20:[1,149]},o($VE,$VF,{37:150,39:151,128:$VG}),o($V9,[2,95],{20:[1,153]}),o($V9,[2,97],{20:[1,154]}),o($VH,$VF,{103:155,39:156,128:$VG}),{19:[2,102]},{19:[2,269],288:157,289:$VI},o($VJ,[2,267]),o($VJ,[2,268]),{28:163,30:162,100:$Vo,195:[1,159],264:93,265:94,290:160,291:161,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{22:[1,164]},{19:[1,165]},{22:[1,166]},{19:[1,167]},{19:[2,21]},o($VB,[2,308]),o($VB,[2,309]),o($VB,[2,310]),o($VB,[2,311]),o($VB,[2,312]),o($VB,[2,313]),o($VB,[2,314]),o($VB,[2,315]),o($VB,[2,316]),{18:171,28:173,302:$Va,305:$Vb,306:$VK,312:[1,168],313:169,314:170,315:$VL},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:177,286:178,291:179,297:176,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,319:[1,175]},{22:[1,184]},{19:[1,185]},{19:[2,41]},{19:[2,383],55:187,57:186,128:$Vx},o($VO,[2,385],{92:107,32:109,59:188,56:189,93:$Vc,95:$Vd,97:$Ve}),{19:[2,133]},o($VB,[2,79]),o($VP,[2,75],{90:108,28:110,91:111,58:190,305:$Vb}),o($VQ,[2,80],{32:109,92:191,93:$Vc,95:$Vd,97:$Ve}),o($VR,[2,77],{194:$Vn}),o($VR,[2,78]),o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,48]),o($VR,[2,49]),o($VR,[2,50]),o($VR,[2,51]),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,54]),o($VR,[2,55]),o($VR,[2,56]),o($VR,[2,57]),o($VR,[2,58]),o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),o($VR,[2,62]),o($VR,[2,63]),o($VR,[2,64]),o($VR,[2,65]),o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,70]),o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,68]),o($VR,[2,69]),{22:[1,192]},{19:[1,193]},{28:195,91:196,98:194,305:$Vb},{28:195,91:196,98:197,305:$Vb},{28:195,91:196,98:198,305:$Vb},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:177,286:178,291:179,297:199,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:177,286:178,291:179,297:200,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:177,286:178,291:179,297:201,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},o($VE,$VF,{39:151,37:202,128:$VG}),{22:[1,203]},o($VS,[2,375],{40:204,43:205,44:[1,206]}),{19:[1,207]},o($VH,$VF,{39:156,103:208,128:$VG}),o($VH,$VF,{39:156,103:209,128:$VG}),{22:[1,210]},{22:[2,107],114:211,115:212,116:213,117:214,118:215,119:216,120:217,121:218,122:219,123:220,124:221,125:$VT,126:223,127:$VU,129:$VV,133:$VW,139:$VX,196:$VY,197:$VZ,205:$V_,213:$V$,260:$V01,266:$V11},{19:[2,270]},{18:82,28:54,91:83,132:234,302:$Va,305:$Vb},o($V21,[2,273]),{195:[1,235]},{195:[2,275],289:$V31,292:236},o($VB,[2,279]),o([195,289],$V41),o($V9,[2,367],{23:238,19:[1,239]}),{18:86,21:240,22:[2,17],28:30,302:$Va,305:$Vb},o($V9,[2,369],{27:241,19:[1,242]}),{22:[2,22],25:88,26:243,28:35,305:$Vb},o($VB,[2,317]),{312:[1,244]},{289:$V51,312:[2,324],317:245},{61:[1,247]},{61:[1,248]},o($V61,[2,323],{316:249,61:$Vg}),{61:[1,250]},o($VB,[2,328]),{319:[1,251]},o($V71,[2,287],{299:252,289:$V81}),o($VQ,[2,264],{92:107,32:109,56:254,93:$Vc,95:$Vd,97:$Ve}),o($VB,[2,292]),o($VB,[2,293],{301:[1,255]}),o($VB,[2,295]),o($VB,$V41,{194:$VC}),{194:$VD},o($V9,[2,381],{53:256,19:[1,257]}),{18:38,22:[2,44],28:30,51:102,52:258,302:$Va,305:$Vb},{19:[2,42]},{19:[2,384]},{19:[2,387],55:260,60:259,128:$Vx},o($VO,[2,386]),o($VP,[2,76]),o($VB,[2,81]),o($V9,[2,371],{34:261,19:[1,262]}),{22:[2,26],33:263,35:142,93:$Vy,95:$Vz,97:$VA},{19:[2,85]},{19:[2,88],194:$Vn},{19:[2,89]},{19:[2,86]},{19:[2,87]},{195:[1,264]},{195:[1,265]},{195:[1,266]},{22:[1,267]},o($V9,[2,379],{49:268,19:[1,269]}),{22:[2,30],41:270,42:[1,271]},o($VS,[2,376]),{19:[1,272]},o([22,42,44,125,127,129,133,139,196,197,205,213,260,266],[2,124]),{22:[1,273]},{22:[1,274]},o($V9,[2,393],{107:275,19:[1,276]}),{22:[2,108]},{22:[2,109],114:277,115:212,116:213,117:214,118:215,119:216,120:217,121:218,122:219,123:220,124:221,125:$VT,126:223,127:$VU,129:$VV,133:$VW,139:$VX,196:$VY,197:$VZ,205:$V_,213:$V$,260:$V01,266:$V11},o($VH,[2,111]),o($VH,[2,112]),o($VH,[2,113]),o($VH,[2,114]),o($VH,[2,115]),o($VH,[2,116]),o($VH,[2,117]),o($VH,[2,118]),o($VH,[2,119]),o($VH,[2,120]),o($VH,[2,121]),{19:[1,278]},{19:[1,279]},{19:[1,280]},{18:281,28:30,182:282,302:$Va,305:$Vb,318:$V91},{18:288,19:[1,285],28:30,182:289,198:284,201:286,204:$Va1,302:$Va,305:$Vb,318:$V91},{19:[1,290]},{19:[1,291]},{18:293,28:30,261:292,262:294,263:[2,453],264:295,265:296,302:$Va,305:$Vb,311:$Vv,318:$Vw},{18:297,28:30,302:$Va,305:$Vb},{19:[1,298]},{19:[2,271],288:299,289:$VI},o($V21,[2,274]),{195:[2,276]},{28:163,30:162,100:$Vo,264:93,265:94,291:300,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},o($V9,[2,16]),o($V9,[2,368]),{22:[2,18]},o($V9,[2,20]),o($V9,[2,370]),{22:[2,23]},o($VB,[2,318]),{312:[2,325]},{18:171,28:173,302:$Va,305:$Vb,306:$VK,314:301,315:$VL},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:302,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:303,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},o($V61,[2,321]),{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:304,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},o($VB,[2,329]),o($V71,[2,288]),o($V71,[2,291],{264:93,265:94,30:162,286:178,291:179,99:181,28:182,285:305,47:$VM,100:$Vo,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw}),o($VB,[2,265]),o($VB,[2,294]),o($V9,[2,39]),o($V9,[2,382]),{22:[2,45]},{19:[2,43]},{19:[2,388]},o($V9,[2,25]),o($V9,[2,372]),{22:[2,27]},o($VB,[2,284]),o($VB,[2,285]),o($VB,[2,286]),o($V9,[2,373],{38:306,19:[1,307]}),o($V9,[2,37]),o($V9,[2,380]),{22:[2,29]},{22:[2,31]},{20:[1,308]},o($V9,[2,389],{104:309,19:[1,310]}),o($V9,[2,391],{106:311,19:[1,312]}),o($V9,[2,100]),o($V9,[2,394]),{22:[2,110]},{20:[1,313]},{20:[1,314]},{20:[1,315]},{19:[1,316]},{19:[1,317]},{18:319,28:30,302:$Va,305:$Vb,320:318},{19:[1,320]},{20:[1,321]},{19:[2,189],112:[1,323],202:322,203:[2,427]},{18:288,28:30,182:289,201:324,302:$Va,305:$Vb,318:$V91},o($Vb1,[2,192]),o($Vb1,[2,193]),{20:[1,325]},{20:[1,326]},{19:[1,327]},{261:328,263:[2,454],264:295,265:296,311:$Vv,318:$Vw},{263:[1,329]},{19:[2,248]},{19:[2,249]},{19:[1,330]},{20:[1,331]},{19:[2,272]},{195:[2,277],289:$V31,292:332},{289:$V51,312:[2,326],317:333},o($V61,[2,319]),o($V61,[2,320]),o($V61,[2,322]),o($V71,[2,289],{299:334,289:$V81}),o($V9,[2,28]),o($V9,[2,374]),{18:336,28:30,45:335,47:$Vc1,302:$Va,305:$Vb},o($V9,[2,96]),o($V9,[2,390]),o($V9,[2,98]),o($V9,[2,392]),{18:82,28:54,91:83,130:338,132:339,302:$Va,305:$Vb},{18:344,28:30,134:340,136:341,137:342,138:343,302:$Va,305:$Vb},{133:$Vd1,140:345,142:346,143:347,144:348,145:349,146:350,155:351,156:355,158:356,168:$Ve1,169:$Vf1,171:$Vg1,172:$Vh1,173:$Vi1,175:$Vj1},o($VH,[2,183]),o($VH,[2,184]),{319:[1,361]},{289:$Vk1,319:[2,331],321:362},o($VH,[2,185]),{18:288,28:30,182:289,198:365,199:364,201:286,204:$Va1,302:$Va,305:$Vb,318:$V91},{203:[1,366]},{203:[2,428]},{19:[2,191]},{18:369,28:30,206:367,208:368,302:$Va,305:$Vb},{18:372,28:30,214:370,216:371,302:$Va,305:$Vb},o($VH,[2,245]),{19:[1,373]},{18:374,28:30,302:$Va,305:$Vb},o($VH,[2,122]),{267:375,269:376,270:$Vl1,273:$Vm1,275:$Vn1},{195:[2,278]},{312:[2,327]},o($V71,[2,290]),{22:[1,380]},{19:[1,381]},{19:[1,382]},{22:[1,383]},{19:[1,384]},{22:[1,385]},{19:[1,386]},{19:[2,131],55:387,128:$Vx},o($VO,[2,134]),o($VO,[2,260],{92:107,90:108,32:109,28:110,91:111,56:388,58:389,54:390,61:$Vh,93:$Vc,95:$Vd,97:$Ve,305:$Vb}),{22:[1,391]},{19:[1,392]},{19:[2,138]},{19:[2,139]},{19:[2,140]},{18:393,28:30,302:$Va,305:$Vb},{19:[2,151],28:110,32:109,55:397,56:398,58:399,90:108,91:111,92:107,93:$Vc,95:$Vd,97:$Ve,128:$Vx,162:[1,396],163:[1,394],164:395,305:$Vb},o($Vl,[2,162]),{174:[1,400],176:[1,401]},o($Vl,[2,164]),{18:402,28:30,302:$Va,305:$Vb},{18:403,28:30,302:$Va,305:$Vb},o($Vl,[2,160]),{170:[1,404]},o($Vl,[2,158]),{170:[1,405]},o([19,112,128,163,203,305],[2,330]),{319:[2,332]},{18:406,28:30,302:$Va,305:$Vb},{22:[1,407]},{19:[1,408]},{19:[2,190]},{22:[1,409]},{19:[1,410]},{19:[2,197],111:[1,411]},{22:[1,412]},{19:[1,413]},{19:[2,210],111:[1,414]},o($VH,[2,246]),{261:415,264:295,265:296,311:$Vv,318:$Vw},{22:[1,416]},{22:[2,254],267:417,269:376,270:$Vl1,273:$Vm1,275:$Vn1},{19:[1,418]},{19:[1,419]},{19:[1,420]},o($VS,[2,377],{46:421,19:[1,422]}),{18:336,22:[2,33],28:30,45:423,47:$Vc1,302:$Va,305:$Vb},{18:336,22:[2,34],28:30,45:424,47:$Vc1,302:$Va,305:$Vb},o($VH,[2,395],{131:425,19:[1,426]}),{18:82,22:[2,126],28:54,91:83,130:427,132:339,302:$Va,305:$Vb},o($VH,[2,397],{135:428,19:[1,429]}),{18:344,22:[2,129],28:30,134:430,136:341,137:342,138:343,302:$Va,305:$Vb},{19:[2,132]},o($VO,[2,261]),o($VO,[2,467],{92:107,32:109,282:431,56:432,93:$Vc,95:$Vd,97:$Ve}),o($VP,[2,469],{90:108,28:110,91:111,283:433,58:434,305:$Vb}),o($VH,[2,399],{141:435,19:[1,436]}),{22:[2,136],133:$Vd1,140:437,142:346,143:347,144:348,145:349,146:350,155:351,156:355,158:356,168:$Ve1,169:$Vf1,171:$Vg1,172:$Vh1,173:$Vi1,175:$Vj1},{19:[2,141],28:110,55:438,58:439,90:108,91:111,128:$Vx,129:$Vo1,148:440,151:441,163:$Vp1,177:443,180:444,181:[1,445],183:446,184:[1,447],185:[1,448],305:$Vb},{18:450,28:30,302:$Va,305:$Vb},{19:[2,153]},{18:451,28:30,302:$Va,305:$Vb},{19:[2,155]},{19:[2,419],55:453,128:$Vx,165:452},o($VO,[2,421],{92:107,32:109,166:454,56:455,93:$Vc,95:$Vd,97:$Ve}),o($Vl,[2,163]),o($Vl,[2,165]),o($Vq1,[2,413],{157:456,179:457,129:$Vr1}),o($Vq1,[2,415],{159:459,179:461,129:$Vr1,160:[1,460]}),o($Vl,[2,161]),o($Vl,[2,159]),{289:$Vk1,319:[2,333],321:462},o($VH,[2,425],{200:463,19:[1,464]}),{18:288,22:[2,187],28:30,182:289,198:365,199:465,201:286,204:$Va1,302:$Va,305:$Vb,318:$V91},o($VH,[2,429],{207:466,19:[1,467]}),{20:[1,468]},{18:469,28:30,302:$Va,305:$Vb},o($VH,[2,431],{215:470,19:[1,471]}),{20:[1,472]},{18:473,28:30,302:$Va,305:$Vb},{19:[1,474]},o($VH,[2,455],{268:475,19:[1,476]}),{22:[2,255]},{20:[1,477]},{20:[1,478]},{20:[1,479]},o($VS,[2,32]),o($VS,[2,378]),{22:[2,35]},{22:[2,36]},o($VH,[2,125]),o($VH,[2,396]),{22:[2,127]},o($VH,[2,128]),o($VH,[2,398]),{22:[2,130]},o($VO,[2,262]),o($VO,[2,468]),o($VO,[2,471],{92:107,32:109,284:480,56:481,93:$Vc,95:$Vd,97:$Ve}),o($VP,[2,470]),o($VH,[2,135]),o($VH,[2,400]),{22:[2,137]},{19:[2,142]},{19:[2,401],55:483,128:$Vx,147:482},o($VO,[2,403],{90:108,28:110,91:111,149:484,58:485,305:$Vb}),o($Vs1,[2,407],{152:486,148:487,163:$Vp1}),{18:488,28:30,302:$Va,305:$Vb},{28:490,178:489,298:$Vt1,302:$Vu1,305:$Vb},o($Vv1,[2,168]),{18:494,28:30,182:493,302:$Va,305:$Vb,318:$V91},o($Vv1,[2,170]),o($Vw1,[2,171]),{186:[1,495]},{28:182,30:162,47:$VM,69:$Vx1,99:181,100:$Vo,187:496,194:$Vy1,264:93,265:94,285:503,286:178,291:179,294:500,295:501,296:499,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,323:497,324:498,326:$Vz1,329:$VA1},{19:[2,152],28:110,32:109,55:397,56:398,58:399,90:108,91:111,92:107,93:$Vc,95:$Vd,97:$Ve,128:$Vx,164:507,305:$Vb},{19:[2,149],163:[1,508]},{19:[2,156]},{19:[2,420]},{19:[2,423],55:510,128:$Vx,167:509},o($VO,[2,422]),o($Vq1,[2,146]),o($Vq1,[2,414]),{28:182,30:162,47:$VM,69:$Vx1,99:181,100:$Vo,187:511,194:$Vy1,264:93,265:94,285:503,286:178,291:179,294:500,295:501,296:499,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,323:497,324:498,326:$Vz1,329:$VA1},o($Vq1,[2,147]),{18:512,28:30,302:$Va,305:$Vb},o($Vq1,[2,416]),{319:[2,334]},o($VH,[2,186]),o($VH,[2,426]),{22:[2,188]},o($VH,[2,194]),o($VH,[2,430]),{18:517,28:30,209:513,210:514,211:515,212:516,302:$Va,305:$Vb},{19:[2,198]},o($VH,[2,207]),o($VH,[2,432]),{217:518,218:519,222:[1,520]},{19:[2,211]},o($VH,[2,247]),o($VH,[2,250]),o($VH,[2,456]),{190:$VB1,271:521,277:522,280:$VC1},{190:$VB1,271:525,277:522,280:$VC1},{190:$VB1,271:526,277:522,280:$VC1},o($VO,[2,263]),o($VO,[2,472]),{19:[2,143]},{19:[2,402]},{19:[2,405],55:528,128:$Vx,150:527},o($VO,[2,404]),o($VO,[2,409],{90:108,28:110,91:111,153:529,58:530,305:$Vb}),o($Vs1,[2,408]),o($Vs1,[2,180]),o($Vv1,[2,166],{179:531,129:$Vr1}),o($VD1,[2,296]),o($VD1,[2,297]),o($VD1,[2,298]),o($Vv1,[2,169]),o($Vv1,[2,175],{183:532,129:$Vo1}),o($Vw1,[2,172]),o($Vv1,[2,179]),o($Vq1,[2,337],{336:533,337:534,338:[1,535],339:[1,536]}),o($Vq1,[2,338]),o($Vq1,[2,339]),o($VE1,[2,340]),o($VE1,[2,341]),{28:182,30:162,47:$VM,99:181,100:$Vo,194:$Vy1,264:93,265:94,285:538,286:178,291:179,294:500,295:501,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,323:537,326:$Vz1},{112:$VF1,204:$VG1,245:$VH1,250:$VI1,257:$VJ1,263:$VK1,325:$VL1,326:$VM1,328:[1,539],330:$VN1,331:$VO1,332:$VP1,333:$VQ1,334:$VR1,335:$VS1},{265:554,318:$Vw},{265:555,318:$Vw},{194:[1,556]},{19:[2,154]},{18:557,28:30,302:$Va,305:$Vb},{19:[2,157]},{19:[2,424]},o($Vq1,[2,173]),o($Vq1,[2,417],{161:558,179:559,129:$Vr1}),{22:[1,560]},{19:[1,561]},{19:[2,201],129:[1,562]},{19:[2,202]},o($VT1,[2,203],{192:[1,563]}),{22:[1,564]},o($VU1,[2,433],{219:565,228:566,225:567,226:[1,568],227:[1,569]}),{19:[1,570]},{22:[1,571]},{22:[2,256],190:$VB1,271:572,277:522,280:$VC1},{28:182,30:162,47:$VM,69:$Vx1,99:181,100:$Vo,187:573,194:$Vy1,264:93,265:94,285:503,286:178,291:179,294:500,295:501,296:499,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,323:497,324:498,326:$Vz1,329:$VA1},{19:[1,574]},{22:[1,575]},{22:[1,576]},{19:[2,144]},{19:[2,406]},{19:[2,411],55:578,128:$Vx,154:577},o($VO,[2,410]),o($Vv1,[2,167]),o($Vv1,[2,176]),o($Vq1,[2,363]),{28:182,30:162,47:$VM,99:181,100:$Vo,194:$Vy1,264:93,265:94,285:538,286:178,291:179,294:500,295:501,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,323:579,326:$Vz1},o($VV1,[2,365]),o($VV1,[2,366]),{195:[1,580]},{112:$VF1,204:$VG1,245:$VH1,250:$VI1,257:$VJ1,263:$VK1,325:$VL1,326:$VM1,330:$VN1,331:$VO1,332:$VP1,333:$VQ1,334:$VR1,335:$VS1},{28:70,47:$Vi,94:581,96:67,99:69,100:$Vj,298:$Vk,305:$Vb},o($VE1,[2,343]),{263:[1,583],325:[1,582]},{326:[1,585],327:[1,584]},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:586,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:587,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:588,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:589,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:590,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:591,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:592,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:593,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:594,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:595,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:596,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},{328:[1,597]},{328:[1,598]},{28:182,30:162,47:$VM,99:181,100:$Vo,194:$Vy1,264:93,265:94,285:538,286:178,291:179,294:500,295:501,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw,323:599,326:$Vz1},{19:[2,150]},o($Vq1,[2,148]),o($Vq1,[2,418]),{18:369,19:[1,600],28:30,206:601,208:368,302:$Va,305:$Vb},{18:517,22:[2,199],28:30,209:602,210:514,211:515,212:516,302:$Va,305:$Vb},{18:82,28:54,91:83,132:603,302:$Va,305:$Vb},o($VT1,[2,204]),{18:372,19:[1,604],28:30,214:605,216:371,302:$Va,305:$Vb},o($VU1,[2,435],{220:606}),o($VU1,[2,434]),{19:[1,607]},{19:[2,214]},{186:[1,608]},{20:[1,609]},o($VW1,[2,457],{272:610,19:[1,611]}),{22:[2,257]},{19:[1,612]},{20:[1,613]},o($VW1,[2,459],{274:614,19:[1,615]}),o($VW1,[2,461],{276:616,19:[1,617]}),{19:[2,145]},{19:[2,412]},o($Vq1,[2,364]),o($VE1,[2,342]),o($Vq1,[2,348]),o($VE1,[2,344]),{28:182,30:162,47:$VM,99:181,100:$Vo,264:93,265:94,285:618,286:178,291:179,298:$Vk,300:$VN,302:$Vp,305:$Vb,306:$Vq,307:$Vr,308:$Vs,309:$Vt,310:$Vu,311:$Vv,318:$Vw},o($VE1,[2,345]),{327:[1,619]},o($VE1,[2,351]),o($VE1,[2,352]),o($VE1,[2,353]),o($VE1,[2,354]),o($VE1,[2,355]),o($VE1,[2,356]),o($VE1,[2,357]),o($VE1,[2,359]),o($VE1,[2,360]),o($VE1,[2,361]),o($VE1,[2,362]),{28:70,47:$Vi,94:620,96:67,99:69,100:$Vj,298:$Vk,305:$Vb},{28:70,47:$Vi,94:621,96:67,99:69,100:$Vj,298:$Vk,305:$Vb},{195:[1,622]},{22:[2,195]},{22:[2,196]},{22:[2,200]},{19:[2,205],192:[1,623]},{22:[2,208]},{22:[2,209]},{22:[2,437],221:624,231:627,232:[1,629],233:[1,630],234:625,251:626,252:[1,628]},{20:[1,631]},{19:[2,215]},{28:490,178:634,223:632,255:633,256:$VX1,257:$VY1,298:$Vt1,302:$Vu1,305:$Vb},o($VW1,[2,251]),o($VW1,[2,458]),{20:[1,637]},{278:[1,638]},o($VW1,[2,252]),o($VW1,[2,460]),o($VW1,[2,253]),o($VW1,[2,462]),o($VE1,[2,358]),o($VE1,[2,346]),o($Vq1,[2,349]),o($Vq1,[2,350]),o($VE1,[2,347]),{19:[2,206]},{22:[2,212]},o($VU1,[2,436]),{22:[2,438]},{18:640,19:[1,639],28:30,302:$Va,305:$Vb},{19:[1,641]},o($VZ1,[2,217]),{186:[1,642]},{28:490,178:644,229:643,298:$Vt1,302:$Vu1,305:$Vb},{22:[1,645]},{19:[1,646]},{19:[2,241]},{19:[2,242],259:647,340:[1,648]},{258:649,340:[1,650]},{278:[1,651]},{22:[1,652]},{20:[1,653]},{19:[1,654]},{20:[1,655]},o($VZ1,[2,218]),{22:[1,656]},{19:[1,657]},o($V_1,[2,439],{224:658,19:[1,659]}),{22:[2,239],28:490,178:634,223:660,255:633,256:$VX1,257:$VY1,298:$Vt1,302:$Vu1,305:$Vb},{19:[2,244],340:[1,661]},o($V$1,[2,451]),{19:[2,243],340:[1,662]},o($V$1,[2,449]),{22:[1,663]},o($V02,[2,465],{281:664,19:[1,665]}),{28:490,178:668,235:666,238:667,298:$Vt1,302:$Vu1,305:$Vb},{20:[1,669]},{18:82,28:54,91:83,132:671,253:670,302:$Va,305:$Vb},o($VU1,[2,441],{230:672,19:[1,673]}),{22:[2,299],28:490,178:644,229:674,298:$Vt1,302:$Vu1,305:$Vb},o($V_1,[2,213]),o($V_1,[2,440]),{22:[2,240]},o($V$1,[2,452]),o($V$1,[2,450]),o($V02,[2,463],{279:675,19:[1,676]}),o($V02,[2,259]),o($V02,[2,466]),{22:[1,677]},{19:[1,678]},{19:[2,223],239:679,240:680,241:[1,681],242:[1,682],243:[1,683],244:[1,684],245:[1,685],246:[1,686],247:[1,687],248:[1,688],249:[1,689],250:[1,690]},{28:490,178:668,235:691,238:667,298:$Vt1,302:$Vu1,305:$Vb},{22:[1,692]},{19:[1,693]},o($VU1,[2,216]),o($VU1,[2,442]),{22:[2,300]},o($V02,[2,258]),o($V02,[2,464]),o($VU1,[2,443],{236:694,19:[1,695]}),{22:[2,221],28:490,178:668,235:696,238:667,298:$Vt1,302:$Vu1,305:$Vb},{19:[2,224]},{19:[2,225]},{19:[2,226]},{19:[2,227]},{19:[2,228]},{19:[2,229]},{19:[2,230]},{19:[2,231]},{19:[2,232]},{19:[2,233]},{19:[2,234]},{19:[2,235]},{22:[1,697]},{19:[1,699],22:[2,447],254:698},{18:82,22:[2,237],28:54,91:83,132:671,253:700,302:$Va,305:$Vb},o($VU1,[2,219]),o($VU1,[2,444]),{22:[2,222]},o($VU1,[2,445],{237:701,19:[1,702]}),{22:[2,236]},{22:[2,448]},{22:[2,238]},o($VU1,[2,220]),o($VU1,[2,446])],
defaultActions: {2:[2,1],3:[2,2],26:[2,3],27:[2,5],80:[2,102],89:[2,21],103:[2,41],106:[2,133],157:[2,270],186:[2,42],187:[2,384],194:[2,85],196:[2,89],197:[2,86],198:[2,87],211:[2,108],236:[2,276],240:[2,18],243:[2,23],245:[2,325],258:[2,45],259:[2,43],260:[2,388],263:[2,27],270:[2,29],271:[2,31],277:[2,110],295:[2,248],296:[2,249],299:[2,272],323:[2,428],324:[2,191],332:[2,278],333:[2,327],347:[2,138],348:[2,139],349:[2,140],362:[2,332],366:[2,190],387:[2,132],395:[2,153],397:[2,155],417:[2,255],423:[2,35],424:[2,36],427:[2,127],430:[2,130],437:[2,137],438:[2,142],452:[2,156],453:[2,420],462:[2,334],465:[2,188],469:[2,198],473:[2,211],482:[2,143],483:[2,402],507:[2,154],509:[2,157],510:[2,424],516:[2,202],527:[2,144],528:[2,406],557:[2,150],568:[2,214],572:[2,257],577:[2,145],578:[2,412],600:[2,195],601:[2,196],602:[2,200],604:[2,208],605:[2,209],608:[2,215],623:[2,206],624:[2,212],626:[2,438],634:[2,241],660:[2,240],674:[2,300],679:[2,224],680:[2,225],681:[2,226],682:[2,227],683:[2,228],684:[2,229],685:[2,230],686:[2,231],687:[2,232],688:[2,233],689:[2,234],690:[2,235],696:[2,222],698:[2,236],699:[2,448],700:[2,238]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'customize', 'override', 'api', 'modifier', 'abstract']);

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'modifier.*': 'modifier.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'modifier.$INDENT': 'modifier.block', 

        'override.entity': 'entity',       
        'abstract.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.views': 'entity.views', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',

        'entity.views.$INDENT': 'entity.views.dataSet',
        'entity.views.dataSet.$INDENT': 'entity.views.dataSet.item',

        'entity.views.dataSet.item.select': 'entity.views.dataSet.item.select',
        'entity.views.dataSet.item.select.$INDENT': 'entity.views.dataSet.item.select.item',

        'entity.views.dataSet.item.groupBy': 'entity.views.dataSet.item.groupBy',
        'entity.views.dataSet.item.groupBy.$INDENT': 'entity.views.dataSet.item.groupBy.item',

        'entity.views.dataSet.item.orderBy': 'entity.views.dataSet.item.orderBy',
        'entity.views.dataSet.item.orderBy.$INDENT': 'entity.views.dataSet.item.orderBy.item',        

        'entity.views.dataSet.item.options': 'entity.views.dataSet.item.options',
        'entity.views.dataSet.item.options.$INDENT': 'entity.views.dataSet.item.options.item',        
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'abstract': new Set(['entity']),    
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', 'views', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'has', 'one', 'many', 'refers', 'to', 'belongs']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),    
        'entity.views': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of', 'connected', 'by', 'on']),               
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),        
        
        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        'entity.views.dataSet.item': new Set(['select', 'orderBy', 'order', 'groupBy', 'group', 'by', 'options']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),     

        // level 6
        'entity.views.dataSet.item.orderBy.item': new Set(['asc', 'desc', 'ASC', 'DESC', 'v', '^', 'ascend', 'descend']),      
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.views.dataSet', 2 ],
        [ 'entity.views.dataSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],  
        [ 'entity.views.dataSet.item.select', 2 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 2 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 2 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 2 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'modifier.item', 2 ], 
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.views.dataSet', 1 ],
        [ 'entity.views.dataSet.item', 1 ],        
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ],
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([      
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'float', 'int', 'integer', 'bigint', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);
    const TYPE_DEF_STATES = new Set([ 'type.item', 'type.block', 'entity.has', 'entity.input.inputSet.item' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xt: 'Symbol', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (BUILTIN_TYPES.has(name)) {
                throw new Error(`Cannot use built-in type "${name}" as a custom type name at line: ${line}!`);
            }

            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            if (typeof name === 'object') {                
                this.define('entityTemplate', name.name, { ...value, templateArgs: name.args }, line);
            } else {
                this.define('entity', name, value, line);
            }
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        idOrFunctionToKV(value) {
            if (typeof value === 'string') {
                return { [value]: true };
            }

            return {
                [value.name]: value.args.length === 1 ? value.args[0] : value.args
            };
        }
    }

    // merge two objects
    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 20;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 19;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 22;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 19;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 19;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 309;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 302;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 302;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 302;
                        
break;
case 15:
                            state.matchAnyExceptNewline();

                            yy_.yytext = yy_.yytext.substring(2).trim();
                            yy_.yytext = state.isQuote(yy_.yytext) ? state.unquoteString(yy_.yytext, 1) : yy_.yytext 
                            return 128;
                        
break;
case 16:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 19;
                            }
                        
break;
case 17:/* skip whitespace, separate tokens */
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 100;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 307;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 306;
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 22:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 306;
                        
break;
case 23:
                            state.matchAnyExceptNewline();                            
                            return 315;  
                        
break;
case 24:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 25:      
                                state.matchAnyExceptNewline();

                                return 298;
                           
break;
case 26:      
                                state.matchAnyExceptNewline();

                                return 47;
                           
break;
case 27:      
                                state.matchAnyExceptNewline();

                                return 256;
                           
break;
case 28:      
                                state.matchAnyExceptNewline();
                                yy_.yytext = yy_.yytext.substring(1);
                                return 340;
                           
break;
case 29:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 310;
                           
break;
case 30:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 300;
                           
break;
case 31:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 32:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 308;
                           
break;
case 33:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 34:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 35:return yy_.yytext;   
break;
case 36:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    if (TYPE_DEF_STATES.has(state.lastState) && BUILTIN_TYPES.has(yy_.yytext)) {
                                        state.matchAnyExceptNewline();                                    
                                        return yy_.yytext;
                                    }

                                    state.matchAnyExceptNewline();                                    
                                }

                                return 305;
                            
break;
case 37:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(--(([^\n\/\r])|(\/[^\/]))*))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((:)(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))?:)((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))*\.\\\*))/,/^(?:(-(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((:)(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*)))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,37],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,37],"inclusive":true},"DEDENTED":{"rules":[9,37],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true},"REPARSE":{"rules":[36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}