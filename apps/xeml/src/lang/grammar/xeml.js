/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,17],$V4=[1,15],$V5=[1,18],$V6=[1,21],$V7=[5,15,22,29,40,42,94,104],$V8=[1,27],$V9=[1,28],$Va=[17,50,83,85,87,102,103,119,121,147,154,158,165,167,176,236,259,273,279,285,286],$Vb=[2,264],$Vc=[1,53],$Vd=[120,273],$Ve=[17,102,103],$Vf=[1,62],$Vg=[1,73],$Vh=[1,74],$Vi=[1,68],$Vj=[1,69],$Vk=[1,70],$Vl=[1,75],$Vm=[1,76],$Vn=[1,77],$Vo=[1,78],$Vp=[17,83,85,87,119],$Vq=[2,63],$Vr=[20,35,37],$Vs=[2,108],$Vt=[1,117],$Vu=[20,116,118,121,125,132,169,170,177,185,233,239],$Vv=[1,122],$Vw=[17,167,259],$Vx=[17,83,85,87,90,103,119,165,218,223,230,236,259,273,280,286,291,292,294,296,297,298,299,300,301,302,305,306],$Vy=[1,137],$Vz=[1,143],$VA=[17,119],$VB=[2,69],$VC=[1,151],$VD=[1,152],$VE=[1,153],$VF=[17,83,85,87,119,273],$VG=[20,35],$VH=[1,174],$VI=[1,184],$VJ=[1,176],$VK=[1,177],$VL=[1,178],$VM=[1,179],$VN=[1,180],$VO=[1,181],$VP=[1,182],$VQ=[1,183],$VR=[1,185],$VS=[17,83,85,87,102,103,119,167,259,273],$VT=[1,189],$VU=[2,241],$VV=[1,198],$VW=[259,280],$VX=[90,286],$VY=[1,204],$VZ=[17,90,103,119,165,218,223,230,236,259,273,280,286,291,292,294,296,297,298,299,300,301,302,305,306],$V_=[1,207],$V$=[2,117],$V01=[1,212],$V11=[1,217],$V21=[1,216],$V31=[1,239],$V41=[1,266],$V51=[1,268],$V61=[1,274],$V71=[1,275],$V81=[17,103,176],$V91=[1,306],$Va1=[1,307],$Vb1=[17,83,85,87,90,119,165,273,305,306],$Vc1=[1,311],$Vd1=[1,313],$Ve1=[1,312],$Vf1=[1,321],$Vg1=[1,318],$Vh1=[1,309],$Vi1=[1,310],$Vj1=[1,314],$Vk1=[1,315],$Vl1=[1,316],$Vm1=[1,317],$Vn1=[1,319],$Vo1=[1,320],$Vp1=[1,322],$Vq1=[1,340],$Vr1=[1,341],$Vs1=[1,342],$Vt1=[1,343],$Vu1=[1,346],$Vv1=[1,360],$Vw1=[1,361],$Vx1=[1,362],$Vy1=[17,83,85,87,90,119,165,273],$Vz1=[88,92,120,268,273,274,275,276,277,278,279,285,292],$VA1=[17,120,273],$VB1=[17,119,165,273],$VC1=[1,438],$VD1=[17,83,85,87,119,165,273],$VE1=[1,442],$VF1=[17,119,273],$VG1=[1,467],$VH1=[1,470],$VI1=[1,471],$VJ1=[1,495],$VK1=[1,496],$VL1=[17,119,121,165,214,215,216,217,218,219,220,221,222,223,273],$VM1=[17,121],$VN1=[20,205,206,225],$VO1=[20,243,246,248],$VP1=[1,569],$VQ1=[1,570],$VR1=[1,575],$VS1=[20,198,199,205,206,225],$VT1=[17,307],$VU1=[20,163,253];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"customize_statement":12,"override_statement":13,"entity_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"customize":40,"customize_statement_option0":41,"type":42,"type_statement_item":43,"type_statement_block":44,"type_statement_option0":45,"type_base":46,"type_info_or_not":47,"type_modifiers_or_not":48,"field_comment_or_not":49,":":50,"types":51,"int_keyword":52,"number_keyword":53,"text_keyword":54,"bool_keyword":55,"binary_keyword":56,"datetime_keyword":57,"any":58,"enum":59,"array":60,"object_keyword":61,"int":62,"integer":63,"number":64,"float":65,"decimal":66,"text":67,"string":68,"bool":69,"boolean":70,"object":71,"json":72,"blob":73,"binary":74,"buffer":75,"datetime":76,"timestamp":77,"type_infos":78,"type_info":79,"simple_function_call":80,"type_modifiers":81,"type_modifier":82,"|~":83,"type_modifier_validators":84,"|>":85,"identifier_or_general_function_call":86,"|=":87,"(":88,"literal_and_value_expression":89,")":90,"general_function_call":91,"REGEXP":92,"logical_expression":93,"override":94,"entity_statement_header":95,"entity_statement_block":96,"override_statement_option0":97,"entity_statement_option0":98,"entity_statement_header0":99,"entity_base_keywords":100,"id_or_string_or_call_list":101,"extends":102,"is":103,"entity":104,"entity_sub_items":105,"entity_sub_item":106,"with_features":107,"has_fields":108,"associations_statement":109,"key_statement":110,"index_statement":111,"input_statement":112,"views_statement":113,"data_statement":114,"code_statement":115,"interfaces_statement":116,"triggers_statement":117,"code":118,"--":119,"STRING":120,"with":121,"with_features_block":122,"with_features_option0":123,"id_or_string_or_call":124,"has":125,"has_fields_block":126,"has_fields_option0":127,"field_item":128,"field_item_body":129,"modifiable_field":130,"type_base_or_not":131,"associations":132,"associations_block":133,"associations_statement_option0":134,"association_item":135,"association_type_referee":136,"association_item_option0":137,"association_item_option1":138,"association_cases_block":139,"association_item_option2":140,"belongsTo":141,"association_item_option3":142,"association_item_option4":143,"refersTo":144,"association_item_option5":145,"association_item_option6":146,"of":147,"association_item_option7":148,"association_item_option8":149,"hasOne":150,"hasMany":151,"association_type_referer":152,"association_through":153,"connectedBy":154,"identifier_string_or_dotname":155,"association_extra_condition":156,"association_connection":157,"being":158,"array_of_identifier_or_string":159,"association_condition":160,"conditional_expression":161,"association_cases":162,"when":163,"association_as":164,"as":165,"association_qualifiers":166,"optional":167,"default":168,"key":169,"index":170,"index_item":171,"index_statement_block":172,"index_statement_option0":173,"index_item_body":174,"index_item_option0":175,"unique":176,"input":177,"input_statement_block":178,"input_statement_option0":179,"input_statement_def":180,"input_block":181,"input_block_item":182,"input_block_item_base":183,"input_block_item_with_spec":184,"views":185,"views_statement_block":186,"views_statement_option0":187,"views_statement_def":188,"entity_views_block":189,"views_statement_select":190,"entity_views_block_option0":191,"entity_views_block_repetition0":192,"entity_views_block_option1":193,"select":194,"entity_views_block_select":195,"views_statement_select_option0":196,"groupby_keywords":197,"groupBy":198,"group":199,"by":200,"views_statement_group_by":201,"identifier_string_or_dotname_block":202,"views_statement_group_by_option0":203,"orderby_keywords":204,"orderBy":205,"order":206,"views_statement_order_by":207,"order_by_block":208,"views_statement_order_by_option0":209,"views_statement_order_by_option1":210,"order_by_clause":211,"order_ascend_keywords":212,"order_descend_keywords":213,"ascend":214,"ASC":215,"^":216,"asc":217,"<":218,"descend":219,"DESC":220,"v":221,"desc":222,">":223,"views_statement_options":224,"options":225,"entity_views_block_options":226,"views_statement_options_option0":227,"entity_views_block_select_item":228,"SELECT_ALL":229,"*":230,"entity_views_block_select_item_repetition_plus0":231,"entity_views_block_select_item_repetition_plus1":232,"data":233,"data_records":234,"data_statement_option0":235,"in":236,"inline_object":237,"inline_array":238,"triggers":239,"triggers_statement_block":240,"triggers_statement_option0":241,"triggers_operation":242,"onCreate":243,"triggers_operation_block":244,"triggers_operation_option0":245,"onCreateOrUpdate":246,"triggers_operation_option1":247,"onDelete":248,"triggers_operation_option2":249,"triggers_operation_item":250,"triggers_result_block":251,"triggers_operation_item_option0":252,"always":253,"triggers_operation_item_option1":254,"modifiable_value":255,"gfc_param0":256,"modifiable_param":257,"id_or_string_or_call_list0":258,",":259,"nfc_param_list":260,"nfc_param":261,"nfc_param_list0":262,"unary_expression":263,"binary_expression":264,"boolean_expression":265,"gfc_param_list":266,"gfc_param_list0":267,"REFERENCE":268,"?":269,"DOTNAME":270,"identifier_string_or_dotname_list":271,"identifier_string_or_dotname_list0":272,"NAME":273,"INTEGER":274,"FLOAT":275,"BOOL":276,"SCRIPT":277,"SYMBOL":278,"{":279,"}":280,"kv_pairs":281,"kv_pair_item":282,"non_exist":283,"kv_pairs0":284,"[":285,"]":286,"identifier_or_string_list":287,"identifier_or_string_list0":288,"value":289,"simple_expression":290,"exists":291,"not":292,"null":293,"~":294,"all":295,">=":296,"<=":297,"==":298,"!=":299,"+":300,"-":301,"/":302,"logical_expression_right":303,"logical_operators":304,"and":305,"or":306,"EXCLUDE_COLUMN":307,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",35:"schema_views",37:"entities",40:"customize",42:"type",50:":",58:"any",59:"enum",60:"array",62:"int",63:"integer",64:"number",65:"float",66:"decimal",67:"text",68:"string",69:"bool",70:"boolean",71:"object",72:"json",73:"blob",74:"binary",75:"buffer",76:"datetime",77:"timestamp",83:"|~",85:"|>",87:"|=",88:"(",90:")",92:"REGEXP",94:"override",102:"extends",103:"is",104:"entity",116:"interfaces_statement",118:"code",119:"--",120:"STRING",121:"with",125:"has",132:"associations",141:"belongsTo",144:"refersTo",147:"of",150:"hasOne",151:"hasMany",154:"connectedBy",158:"being",163:"when",165:"as",167:"optional",168:"default",169:"key",170:"index",176:"unique",177:"input",185:"views",194:"select",198:"groupBy",199:"group",200:"by",205:"orderBy",206:"order",214:"ascend",215:"ASC",216:"^",217:"asc",218:"<",219:"descend",220:"DESC",221:"v",222:"desc",223:">",225:"options",229:"SELECT_ALL",230:"*",233:"data",236:"in",239:"triggers",243:"onCreate",246:"onCreateOrUpdate",248:"onDelete",251:"triggers_result_block",253:"always",259:",",268:"REFERENCE",269:"?",270:"DOTNAME",273:"NAME",274:"INTEGER",275:"FLOAT",276:"BOOL",277:"SCRIPT",278:"SYMBOL",279:"{",280:"}",285:"[",286:"]",291:"exists",292:"not",293:"null",294:"~",295:"all",296:">=",297:"<=",298:"==",299:"!=",300:"+",301:"-",302:"/",305:"and",306:"or",307:"EXCLUDE_COLUMN"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[12,6],[10,3],[10,6],[43,5],[44,2],[44,3],[46,2],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[52,1],[52,1],[53,1],[53,1],[53,1],[54,1],[54,1],[55,1],[55,1],[61,1],[61,1],[56,1],[56,1],[56,1],[57,1],[57,1],[47,0],[47,1],[78,1],[78,2],[79,1],[79,1],[48,0],[48,1],[81,1],[81,2],[82,2],[82,2],[82,4],[82,2],[86,1],[86,1],[84,1],[84,1],[84,3],[13,3],[13,7],[14,2],[14,6],[95,1],[95,3],[100,1],[100,1],[99,2],[99,2],[96,1],[96,2],[105,1],[105,2],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[106,1],[115,3],[32,0],[32,3],[107,6],[122,2],[122,3],[108,6],[126,2],[126,3],[128,2],[49,0],[49,2],[129,1],[131,0],[131,1],[109,6],[133,2],[133,3],[135,6],[135,10],[135,7],[135,7],[135,9],[136,1],[136,1],[152,1],[152,1],[153,2],[153,3],[153,1],[153,2],[153,1],[156,2],[139,5],[157,2],[157,3],[162,3],[162,4],[160,2],[164,2],[166,1],[166,4],[110,3],[110,3],[111,3],[111,6],[172,2],[172,3],[171,1],[171,3],[174,1],[174,1],[112,6],[178,6],[178,6],[180,1],[180,3],[181,2],[181,3],[182,1],[182,1],[183,1],[183,2],[184,3],[184,4],[113,6],[186,6],[186,6],[188,1],[188,3],[189,4],[190,6],[197,1],[197,2],[201,6],[204,1],[204,2],[207,6],[207,7],[208,2],[208,3],[211,1],[211,2],[211,2],[212,1],[212,1],[212,1],[212,1],[212,1],[213,1],[213,1],[213,1],[213,1],[213,1],[224,6],[226,2],[226,3],[195,2],[195,3],[228,1],[228,1],[228,2],[228,2],[114,3],[114,4],[114,6],[234,1],[234,1],[117,6],[242,6],[242,6],[242,6],[240,1],[240,2],[244,1],[244,2],[250,7],[250,6],[130,4],[255,2],[257,1],[124,1],[124,1],[101,1],[101,2],[258,2],[258,3],[80,3],[80,4],[260,1],[260,2],[262,2],[262,3],[261,1],[261,1],[89,1],[89,1],[89,1],[91,4],[266,1],[266,2],[267,2],[267,3],[267,1],[256,1],[256,1],[256,2],[256,1],[155,1],[155,1],[155,1],[202,2],[202,3],[271,1],[271,2],[272,2],[272,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[237,2],[237,3],[282,3],[282,2],[282,3],[283,0],[281,1],[281,2],[284,2],[284,3],[238,2],[238,3],[159,3],[287,1],[287,2],[288,2],[288,3],[289,1],[289,1],[161,1],[161,1],[161,1],[290,1],[290,1],[290,3],[263,2],[263,3],[263,3],[263,4],[263,4],[265,3],[265,4],[265,4],[264,3],[264,3],[264,3],[264,3],[264,3],[264,3],[264,3],[264,4],[264,3],[264,3],[264,3],[264,3],[93,2],[303,2],[304,1],[304,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[41,0],[41,1],[45,0],[45,1],[97,0],[97,1],[98,0],[98,1],[123,0],[123,1],[127,0],[127,1],[134,0],[134,1],[137,0],[137,1],[138,0],[138,1],[140,0],[140,1],[142,0],[142,1],[143,0],[143,1],[145,0],[145,1],[146,0],[146,1],[148,0],[148,1],[149,0],[149,1],[173,0],[173,1],[175,0],[175,1],[179,0],[179,1],[187,0],[187,1],[191,0],[191,1],[192,0],[192,2],[193,0],[193,1],[196,0],[196,1],[203,0],[203,1],[209,0],[209,1],[210,0],[210,1],[227,0],[227,1],[231,1],[231,2],[232,1],[232,2],[235,0],[235,1],[241,0],[241,1],[245,0],[245,1],[247,0],[247,1],[249,0],[249,1],[252,0],[252,1],[254,0],[254,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 32:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 35: case 73: case 90: case 91: case 92: case 141: case 284:
this.$ = $$[$0];
break;
case 36:
this.$ = { type: 'integer' };
break;
case 37:
this.$ = { type: 'number' }    ;
break;
case 38:
this.$ = { type: 'text' };
break;
case 39:
this.$ = { type: 'boolean' };
break;
case 40:
this.$ = { type: 'binary' };
break;
case 41:
this.$ = { type: 'datetime' };
break;
case 42:
this.$ = { type: 'any' };
break;
case 43:
this.$ = { type: 'enum' };
break;
case 44:
this.$ = { type: 'array' };
break;
case 45:
this.$ = { type: 'object' };
break;
case 46:
this.$ = { type: $$[$0] };
break;
case 66: case 93: case 116: case 283: case 285:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 219: case 221: case 230: case 232: case 236: case 238: case 248: case 260: case 262: case 289: case 291:
this.$ = [ $$[$0] ];
break;
case 72: case 220: case 222: case 233: case 237: case 239: case 249: case 263: case 290: case 292:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 75:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 76:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 77:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 78: case 391: case 393:
this.$ = [$$[$0]];
break;
case 79:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 80:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 81:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 82:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 83:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 84:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 85:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 86:
this.$ = [ $$[$0], {} ];
break;
case 87:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 95:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 107:
this.$ = { code: $$[$0-1] };
break;
case 109:
this.$ = { comment: $$[$0-1] };
break;
case 110:
this.$ = { features: $$[$0-2] };
break;
case 111: case 123: case 143: case 153: case 164: case 186: case 204: case 258:
this.$ = [ $$[$0-1] ];
break;
case 112: case 124: case 154: case 165: case 187: case 205: case 259:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 113:
this.$ = { fields: $$[$0-2] };
break;
case 114:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 115:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 118:
this.$ = { comment: $$[$0] };
break;
case 122:
this.$ = { associations: $$[$0-2] };
break;
case 125:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 126:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 127: case 128:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 129:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 134:
this.$ = { by: $$[$0] }    ;
break;
case 135:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 136:
this.$ = { remoteField: $$[$0] }     ;
break;
case 137:
this.$ = { remoteField: $$[$0] }      ;
break;
case 138:
this.$ = { with: $$[$0] };
break;
case 139:
this.$ = { with: $$[$0] }    ;
break;
case 140:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 142:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 144:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 145:
this.$ = $$[$0];;
break;
case 146:
this.$ = { srcField: $$[$0] };
break;
case 147:
this.$ = { optional: true };
break;
case 148:
this.$ = { default: $$[$0-1] };
break;
case 149:
this.$ = { key: $$[$0-1] };
break;
case 150:
this.$ = { key: $$[$0-1] } ;
break;
case 151:
this.$ = { indexes: [$$[$0-1]] };
break;
case 152:
this.$ = { indexes: $$[$0-2] };
break;
case 156:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 157: case 158:
this.$ = { fields: $$[$0] };
break;
case 159:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 160: case 173:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 161: case 174:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 162: case 168: case 175:
this.$ = { name: $$[$0] };
break;
case 163: case 176:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 169:
this.$ = { name: $$[$0-1], optional: true };
break;
case 170:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 171:
this.$ = { ...$$[$0-3], spec: $$[$0-1], optional: true };
break;
case 172:
this.$ = { views: $$[$0-2] }     ;
break;
case 177:
this.$ = { $select: $$[$0-3], ...($$[$0-2] ? { $groupBy: $$[$0-2] } : null), ...($$[$0-1] && $$[$0-1].length > 0 ? { $orderBySet: $$[$0-1] } : null), ...$$[$0] };
break;
case 178: case 181: case 201:
this.$ = $$[$0-2];
break;
case 184:
this.$ = { "$default": $$[$0-2] };
break;
case 185:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 188:
this.$ = { field: $$[$0], ascend: true };
break;
case 189:
this.$ = { field: $$[$0-1], ascend: true }    ;
break;
case 190:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 202:
this.$ = state.idOrFunctionToKV($$[$0-1]);
break;
case 203:
this.$ = { ...state.idOrFunctionToKV($$[$0-2]), ...$$[$0] };
break;
case 208: case 209:
this.$ = { $xt: "ExclusiveSelect", columnSet: $$[$0-1], excludes: $$[$0] };
break;
case 210:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 211:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 212:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 215:
this.$ = { triggers: $$[$0-2] };
break;
case 216:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 217:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 218:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 223:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 224:
this.$ = { do: $$[$0-2] };
break;
case 225:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 226:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 231: case 247:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 234:
this.$ = { name: $$[$0-2], args: [] };
break;
case 235: case 245:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 241:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 246:
this.$ = [ $$[$0] ]    ;
break;
case 250: case 286: case 377:
this.$ = [];
break;
case 253:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 261:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 276:
this.$ = {}    ;
break;
case 277: case 287: case 288: case 300:
this.$ = $$[$0-1];
break;
case 278: case 280:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 279:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 294:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 301:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 302:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 303:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 304:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 305:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 306:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 307:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 308:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 309:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 310:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 311:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 312:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 313:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 314:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 315:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 316:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 317:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 318:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 319:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 320:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 321:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 322:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 323:
this.$ = { operator: 'and' };
break;
case 324:
this.$ = { operator: 'or' };
break;
case 378: case 392: case 394:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,42:$V4,94:$V5,95:19,99:20,104:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,42:$V4,94:$V5,95:19,99:20,104:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,120:$V8,273:$V9},{17:[1,30],23:29,26:31,273:$V9},{16:34,17:[1,33],26:26,43:32,120:$V8,273:$V9},{16:35,26:26,120:$V8,273:$V9},{17:[1,36]},{95:37,99:20,104:$V6},{17:[1,38]},{17:[2,86],100:39,102:[1,40],103:[1,41]},{16:42,26:44,80:43,120:$V8,273:$V9},{1:[2,3]},{5:[2,5]},{17:[1,45]},{18:[1,46]},o($Va,$Vb),o($Va,[2,265]),o([17,27,50,83,85,87,88,90,102,103,119,121,147,154,158,165,167,176,214,215,216,217,218,219,220,221,222,223,230,236,259,273,279,280,285,286,291,292,294,296,297,298,299,300,301,302,305,306],[2,266]),{17:[1,47]},{18:[1,48]},{27:[1,49]},{17:[1,50]},{18:[1,51]},{46:52,50:$Vc},{17:[1,54]},{18:[1,55]},{17:[1,56]},o($V7,[2,84],{18:[1,57]}),{16:60,26:44,80:61,101:58,120:$V8,124:59,273:$V9},o($Vd,[2,88]),o($Vd,[2,89]),o($Ve,[2,90]),o($Ve,[2,91]),o([17,102,103,167,259],$Vb,{88:$Vf}),o($V7,[2,13]),{16:64,19:63,26:26,120:$V8,273:$V9},o($V7,[2,17]),{23:66,24:65,26:31,273:$V9},{28:67,92:$Vg,120:$Vh,237:71,238:72,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},o($V7,[2,30]),{16:34,26:26,43:80,44:79,120:$V8,273:$V9},o($Vp,$Vq,{47:81,78:82,79:83,26:84,80:85,273:$V9}),{16:97,26:26,51:86,52:87,53:88,54:89,55:90,56:91,57:92,58:[1,93],59:[1,94],60:[1,95],61:96,62:[1,98],63:[1,99],64:[1,100],65:[1,101],66:[1,102],67:[1,103],68:[1,104],69:[1,105],70:[1,106],71:[1,112],72:[1,113],73:[1,107],74:[1,108],75:[1,109],76:[1,110],77:[1,111],120:$V8,273:$V9},{18:[1,114]},o($Vr,$Vs,{30:115,32:116,119:$Vt}),o($V7,[2,82],{18:[1,118]}),o($Vu,$Vs,{96:119,32:120,119:$Vt}),{17:[2,87]},{17:[2,230],258:121,259:$Vv},o($Vw,[2,228]),o($Vw,[2,229]),{26:127,28:126,90:[1,123],92:$Vg,120:$Vh,237:71,238:72,260:124,261:125,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{20:[1,128]},{17:[1,129]},{20:[1,130]},{17:[1,131]},{17:[2,19]},o($Vx,[2,267]),o($Vx,[2,268]),o($Vx,[2,269]),o($Vx,[2,270]),o($Vx,[2,271]),o($Vx,[2,272]),o($Vx,[2,273]),o($Vx,[2,274]),o($Vx,[2,275]),{16:135,26:136,120:$V8,273:$V9,274:$Vy,280:[1,132],281:133,282:134},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:140,256:141,261:142,266:139,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,286:[1,138]},{20:[1,146]},{17:[1,147]},o($VA,$VB,{48:148,81:149,82:150,83:$VC,85:$VD,87:$VE}),o($Vp,[2,64]),o($Vp,[2,65],{79:83,26:84,80:85,78:154,273:$V9}),o($VF,[2,67],{88:$Vf}),o($VF,[2,68]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),o($VF,[2,55]),o($VF,[2,58]),o($VF,[2,59]),o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,56]),o($VF,[2,57]),o($Vr,$Vs,{32:116,30:155,119:$Vt}),{20:[1,156]},o($VG,[2,331],{33:157,36:158,37:[1,159]}),{120:[1,160]},o($Vu,$Vs,{32:120,96:161,119:$Vt}),{20:[1,162]},{20:[2,92],105:163,106:164,107:165,108:166,109:167,110:168,111:169,112:170,113:171,114:172,115:173,116:$VH,117:175,118:$VI,121:$VJ,125:$VK,132:$VL,169:$VM,170:$VN,177:$VO,185:$VP,233:$VQ,239:$VR},{17:[2,231]},{16:60,26:44,80:61,120:$V8,124:186,273:$V9},o($VS,[2,234]),{90:[1,187]},{90:[2,236],259:$VT,262:188},o($Vx,[2,240]),o([90,259],$VU),o($V7,[2,325],{21:190,17:[1,191]}),{16:64,19:192,20:[2,15],26:26,120:$V8,273:$V9},o($V7,[2,327],{25:193,17:[1,194]}),{20:[2,20],23:66,24:195,26:31,273:$V9},o($Vx,[2,276]),{280:[1,196]},{259:$VV,280:[2,282],284:197},{50:[1,199]},o($VW,[2,281],{283:200,50:$Vb}),{50:[1,201]},o($Vx,[2,286]),{286:[1,202]},o($VX,[2,246],{267:203,259:$VY}),o($VZ,$VB,{81:149,82:150,48:205,83:$VC,85:$VD,87:$VE}),o($Vx,[2,251]),o($Vx,[2,252],{269:[1,206]}),o($Vx,[2,254]),o($Vx,$VU,{88:$V_}),o($V7,[2,337],{45:208,17:[1,209]}),{16:34,20:[2,33],26:26,43:80,44:210,120:$V8,273:$V9},{17:$V$,49:211,119:$V01},o($Vx,[2,70]),o($VZ,[2,71],{82:150,81:213,83:$VC,85:$VD,87:$VE}),{26:219,84:214,86:215,88:$V11,91:218,92:$V21,273:$V9},{26:219,86:220,91:218,273:$V9},{26:219,86:222,88:[1,221],91:218,273:$V9},o($Vp,[2,66]),{20:[1,223]},o($V7,[2,335],{41:224,17:[1,225]}),{20:[2,24],34:226,35:[1,227]},o($VG,[2,332]),{17:[1,228]},{17:[1,229]},{20:[1,230]},o($V7,[2,341],{98:231,17:[1,232]}),{20:[2,93]},{20:[2,94],105:233,106:164,107:165,108:166,109:167,110:168,111:169,112:170,113:171,114:172,115:173,116:$VH,117:175,118:$VI,121:$VJ,125:$VK,132:$VL,169:$VM,170:$VN,177:$VO,185:$VP,233:$VQ,239:$VR},o($Vu,[2,96]),o($Vu,[2,97]),o($Vu,[2,98]),o($Vu,[2,99]),o($Vu,[2,100]),o($Vu,[2,101]),o($Vu,[2,102]),o($Vu,[2,103]),o($Vu,[2,104]),o($Vu,[2,105]),o($Vu,[2,106]),{17:[1,234]},{17:[1,235]},{17:[1,236]},{16:237,26:26,120:$V8,159:238,273:$V9,285:$V31},{16:243,17:[1,241],26:26,120:$V8,159:244,171:240,174:242,273:$V9,285:$V31},{17:[1,245]},{17:[1,246]},{16:248,26:26,120:$V8,234:247,235:249,236:[2,395],237:250,238:251,273:$V9,279:$Vn,285:$Vo},{16:252,26:26,120:$V8,273:$V9},{17:[1,253]},{17:[2,232],258:254,259:$Vv},o($VS,[2,235]),{90:[2,237]},{26:127,28:126,92:$Vg,120:$Vh,237:71,238:72,261:255,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},o($V7,[2,14]),o($V7,[2,326]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,328]),{20:[2,21]},o($Vx,[2,277]),{280:[2,283]},{16:135,26:136,120:$V8,273:$V9,274:$Vy,282:256},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:257,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},o($VW,[2,279]),{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:258,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},o($Vx,[2,287]),o($VX,[2,247]),o($VX,[2,250],{237:71,238:72,28:126,256:141,261:142,91:144,26:145,255:259,92:$Vg,120:$Vh,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo}),o($Vx,[2,226]),o($Vx,[2,253]),{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:140,256:141,261:142,266:260,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},o($V7,[2,31]),o($V7,[2,338]),{20:[2,34]},{17:[2,32]},{120:[1,261]},o($Vx,[2,72]),o($Vx,[2,73]),o($Vx,[2,79]),o($Vx,[2,80]),{26:145,28:126,88:$V41,91:144,92:$Vg,93:262,120:$Vh,237:71,238:72,255:267,256:141,261:142,263:264,264:265,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:263,292:$V51},o($Vx,[2,77]),o($Vx,[2,78],{88:$V_}),o($Vx,[2,74]),{26:145,28:126,58:$V61,89:269,91:144,92:$Vg,120:$Vh,237:71,238:72,255:273,256:141,261:142,263:270,264:271,265:272,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,292:$V51,295:$V71},o($Vx,[2,76]),o($V7,[2,329],{31:276,17:[1,277]}),o($V7,[2,29]),o($V7,[2,336]),{20:[2,23]},{20:[2,25]},{18:[1,278]},o([20,35,37,116,118,121,125,132,169,170,177,185,233,239],[2,109]),o($V7,[2,339],{97:279,17:[1,280]}),o($V7,[2,85]),o($V7,[2,342]),{20:[2,95]},{18:[1,281]},{18:[1,282]},{18:[1,283]},{17:[1,284]},{17:[1,285]},{16:287,26:26,120:$V8,273:$V9,287:286},{17:[1,288]},{18:[1,289]},{17:[2,155],103:[1,291],175:290,176:[2,369]},o($V81,[2,157]),o($V81,[2,158]),{18:[1,292]},{18:[1,293]},{17:[1,294]},{234:295,236:[2,396],237:250,238:251,279:$Vn,285:$Vo},{236:[1,296]},{17:[2,213]},{17:[2,214]},{17:[1,297]},{18:[1,298]},{17:[2,233]},{90:[2,238],259:$VT,262:299},{259:$VV,280:[2,284],284:300},o($VW,[2,278]),o($VW,[2,280]),o($VX,[2,248],{267:301,259:$VY}),{90:[1,302]},{17:[2,118]},{90:[1,303]},{303:304,304:305,305:$V91,306:$Va1},o($Vb1,[2,298]),o($Vb1,[2,299]),{26:145,28:126,88:$V41,91:144,92:$Vg,120:$Vh,237:71,238:72,255:267,256:141,261:142,263:264,264:265,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:308,292:$V51},{103:$Vc1,218:$Vd1,223:$Ve1,230:$Vf1,236:$Vg1,291:$Vh1,292:$Vi1,296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1},{88:[1,323]},{90:[1,324]},{90:[2,242]},{90:[2,243]},{90:[2,244]},{103:$Vc1,218:$Vd1,223:$Ve1,230:$Vf1,236:$Vg1,291:$Vh1,292:$Vi1,294:[1,325],296:$Vj1,297:$Vk1,298:$Vl1,299:$Vm1,300:$Vn1,301:$Vo1,302:$Vp1},{238:326,285:$Vo},{238:327,285:$Vo},o($V7,[2,22]),o($V7,[2,330]),{16:329,26:26,38:328,120:$V8,273:$V9},o($V7,[2,83]),o($V7,[2,340]),{16:60,26:44,80:61,120:$V8,122:330,124:331,273:$V9},{16:336,26:26,120:$V8,126:332,128:333,129:334,130:335,273:$V9},{133:337,135:338,136:339,141:$Vq1,144:$Vr1,150:$Vs1,151:$Vt1},o($Vu,[2,149]),o($Vu,[2,150]),{286:[1,344]},{259:$Vu1,286:[2,289],288:345},o($Vu,[2,151]),{16:243,26:26,120:$V8,159:244,171:348,172:347,174:242,273:$V9,285:$V31},{176:[1,349]},{176:[2,370]},{16:352,26:26,120:$V8,178:350,180:351,273:$V9},{16:355,26:26,120:$V8,186:353,188:354,273:$V9},o($Vu,[2,210]),{17:[1,356]},{16:357,26:26,120:$V8,273:$V9},o($Vu,[2,107]),{240:358,242:359,243:$Vv1,246:$Vw1,248:$Vx1},{90:[2,239]},{280:[2,285]},o($VX,[2,249]),o($Vx,[2,245]),o($Vx,[2,81]),o($Vy1,[2,321]),{26:145,28:126,88:$V41,91:144,92:$Vg,120:$Vh,237:71,238:72,255:267,256:141,261:142,263:264,264:265,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:363,292:$V51},o($Vz1,[2,323]),o($Vz1,[2,324]),{90:[1,364]},o($Vb1,[2,301]),{236:[1,366],291:[1,365]},{292:[1,368],293:[1,367]},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:369,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:370,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:371,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:372,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:373,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:374,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:375,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:376,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:377,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:378,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:379,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},{26:145,28:126,88:$V41,91:144,92:$Vg,120:$Vh,237:71,238:72,255:267,256:141,261:142,263:264,264:265,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:380,292:$V51},o($Vx,[2,75]),{26:219,84:381,86:215,88:$V11,91:218,92:$V21,273:$V9},{294:[1,382]},{294:[1,383]},{20:[1,384]},{17:[1,385]},{20:[1,386]},{17:[1,387]},{20:[1,388]},{17:[1,389]},{17:$V$,49:390,119:$V01},o($VA,[2,119]),o($VF,[2,120],{131:391,46:392,50:$Vc}),{20:[1,393]},{17:[1,394]},{16:395,17:[1,396],26:26,120:$V8,273:$V9},{16:397,26:26,120:$V8,273:$V9},{16:398,26:26,120:$V8,273:$V9},o($VA1,[2,130]),o($VA1,[2,131]),o([17,103,119,165,176,273],[2,288]),{286:[2,290]},{16:399,26:26,120:$V8,273:$V9},{20:[1,400]},{17:[1,401]},{17:[2,156]},{20:[1,402]},{17:[1,403]},{17:[2,162],102:[1,404]},{20:[1,405]},{17:[1,406]},{17:[2,175],102:[1,407]},o($Vu,[2,211]),{234:408,237:250,238:251,279:$Vn,285:$Vo},{20:[1,409]},{20:[2,219],240:410,242:359,243:$Vv1,246:$Vw1,248:$Vx1},{17:[1,411]},{17:[1,412]},{17:[1,413]},o($Vy1,[2,322]),o($Vb1,[2,300]),o($Vb1,[2,302]),{26:145,28:126,91:144,92:$Vg,120:$Vh,237:71,238:72,255:414,256:141,261:142,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo},o($Vb1,[2,303]),{293:[1,415]},o($Vb1,[2,309]),o($Vb1,[2,310]),o($Vb1,[2,311]),o($Vb1,[2,312]),o($Vb1,[2,313]),o($Vb1,[2,314]),o($Vb1,[2,315]),o($Vb1,[2,317]),o($Vb1,[2,318]),o($Vb1,[2,319]),o($Vb1,[2,320]),{90:[1,416]},o($Vy1,[2,306]),{26:219,84:417,86:215,88:$V11,91:218,92:$V21,273:$V9},{26:219,84:418,86:215,88:$V11,91:218,92:$V21,273:$V9},o($VG,[2,333],{39:419,17:[1,420]}),{16:329,20:[2,27],26:26,38:421,120:$V8,273:$V9},o($Vu,[2,343],{123:422,17:[1,423]}),{16:60,20:[2,111],26:44,80:61,120:$V8,122:424,124:331,273:$V9},o($Vu,[2,345],{127:425,17:[1,426]}),{16:336,20:[2,114],26:26,120:$V8,126:427,128:333,129:334,130:335,273:$V9},{17:[2,116]},o($Vp,$Vq,{78:82,79:83,26:84,80:85,47:428,273:$V9}),o($VF,[2,121]),o($Vu,[2,347],{134:429,17:[1,430]}),{20:[2,123],133:431,135:338,136:339,141:$Vq1,144:$Vr1,150:$Vs1,151:$Vt1},o($VB1,[2,349],{137:432,153:433,157:435,160:437,121:$VC1,154:[1,434],158:[1,436]}),{18:[1,439]},o($VD1,[2,355],{142:440,156:441,121:$VE1}),o($VD1,[2,359],{145:443,156:445,121:$VE1,147:[1,444]}),{259:$Vu1,286:[2,291],288:446},o($Vu,[2,367],{173:447,17:[1,448]}),{16:243,20:[2,153],26:26,120:$V8,159:244,171:348,172:449,174:242,273:$V9,285:$V31},o($Vu,[2,371],{179:450,17:[1,451]}),{18:[1,452]},{16:453,26:26,120:$V8,273:$V9},o($Vu,[2,373],{187:454,17:[1,455]}),{18:[1,456]},{16:457,26:26,120:$V8,273:$V9},{17:[1,458]},o($Vu,[2,397],{241:459,17:[1,460]}),{20:[2,220]},{18:[1,461]},{18:[1,462]},{18:[1,463]},o($Vb1,[2,316]),o($Vb1,[2,304]),o($Vb1,[2,305]),o($Vy1,[2,307]),o($Vy1,[2,308]),o($VG,[2,26]),o($VG,[2,334]),{20:[2,28]},o($Vu,[2,110]),o($Vu,[2,344]),{20:[2,112]},o($Vu,[2,113]),o($Vu,[2,346]),{20:[2,115]},o($VA,$VB,{81:149,82:150,48:464,83:$VC,85:$VD,87:$VE}),o($Vu,[2,122]),o($Vu,[2,348]),{20:[2,124]},o($VF1,[2,351],{138:465,164:466,165:$VG1}),o($VB1,[2,350]),{26:469,120:$VH1,155:468,270:$VI1,273:$V9},o($VB1,[2,136]),{16:473,26:26,120:$V8,159:472,273:$V9,285:$V31},o($VB1,[2,138]),{26:145,28:126,58:$V61,88:$V41,91:144,92:$Vg,93:476,120:$Vh,161:474,237:71,238:72,255:273,256:141,261:142,263:264,264:265,265:477,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:475,292:$V51,295:$V71},{16:478,26:26,120:$V8,273:$V9},o($VF,[2,357],{143:479,164:480,165:$VG1}),o($VD1,[2,356]),{26:145,28:126,58:$V61,88:$V41,91:144,92:$Vg,93:476,120:$Vh,161:481,237:71,238:72,255:273,256:141,261:142,263:264,264:265,265:477,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:475,292:$V51,295:$V71},o($VF,[2,361],{146:482,164:483,165:$VG1}),{16:484,26:26,120:$V8,273:$V9},o($VD1,[2,360]),{286:[2,292]},o($Vu,[2,152]),o($Vu,[2,368]),{20:[2,154]},o($Vu,[2,159]),o($Vu,[2,372]),{16:489,26:26,120:$V8,181:485,182:486,183:487,184:488,273:$V9},{17:[2,163]},o($Vu,[2,172]),o($Vu,[2,374]),{189:490,190:491,194:[1,492]},{17:[2,176]},o($Vu,[2,212]),o($Vu,[2,215]),o($Vu,[2,398]),{163:$VJ1,244:493,250:494,253:$VK1},{163:$VJ1,244:497,250:494,253:$VK1},{163:$VJ1,244:498,250:494,253:$VK1},o($VA,[2,225]),o($VA,$Vq,{78:82,79:83,26:84,80:85,47:499,273:$V9}),o($VF1,[2,352]),{16:500,26:26,120:$V8,273:$V9},o($VB1,[2,134],{156:501,121:$VE1}),o($VL1,[2,255]),o($VL1,[2,256]),o($VL1,[2,257]),o($VB1,[2,137]),o($VB1,[2,141],{160:502,121:$VC1}),o($VB1,[2,145]),o($VD1,[2,295],{303:304,304:305,305:$V91,306:$Va1}),o($VD1,[2,296]),o($VD1,[2,297]),{50:[1,504],139:503},o($Vp,$Vq,{78:82,79:83,26:84,80:85,47:505,273:$V9}),o($VF,[2,358]),o($VD1,[2,139]),o($Vp,$Vq,{78:82,79:83,26:84,80:85,47:506,273:$V9}),o($VF,[2,362]),o($VD1,[2,363],{148:507,156:508,121:$VE1}),{20:[1,509]},{17:[1,510]},{17:[2,166],121:[1,511]},{17:[2,167]},o($VM1,[2,168],{167:[1,512]}),{20:[1,513]},o($VN1,[2,375],{191:514,201:515,197:516,198:[1,517],199:[1,518]}),{17:[1,519]},{20:[1,520]},{20:[2,221],163:$VJ1,244:521,250:494,253:$VK1},{26:145,28:126,58:$V61,88:$V41,91:144,92:$Vg,93:476,120:$Vh,161:522,237:71,238:72,255:273,256:141,261:142,263:264,264:265,265:477,268:$Vz,273:$V9,274:$Vi,275:$Vj,276:$Vk,277:$Vl,278:$Vm,279:$Vn,285:$Vo,290:475,292:$V51,295:$V71},{17:[1,523]},{20:[1,524]},{20:[1,525]},{17:$V$,49:526,119:$V01},o($VF,[2,146]),o($VB1,[2,135]),o($VB1,[2,142]),o($VF1,[2,353],{140:527,164:528,165:$VG1}),{17:[1,529]},o($VA,$VB,{81:149,82:150,48:530,83:$VC,85:$VD,87:$VE}),o($VA,$VB,{81:149,82:150,48:531,83:$VC,85:$VD,87:$VE}),o($VF,[2,365],{149:532,164:533,165:$VG1}),o($VD1,[2,364]),{16:352,17:[1,534],26:26,120:$V8,178:535,180:351,273:$V9},{16:489,20:[2,164],26:26,120:$V8,181:536,182:486,183:487,184:488,273:$V9},{16:60,26:44,80:61,120:$V8,124:537,273:$V9},o($VM1,[2,169]),{16:355,17:[1,538],26:26,120:$V8,186:539,188:354,273:$V9},o($VN1,[2,377],{192:540}),o($VN1,[2,376]),{17:[1,541]},{17:[2,179]},{200:[1,542]},{18:[1,543]},o($VO1,[2,399],{245:544,17:[1,545]}),{20:[2,222]},{17:[1,546]},{18:[1,547]},o($VO1,[2,401],{247:548,17:[1,549]}),o($VO1,[2,403],{249:550,17:[1,551]}),{17:[2,125]},o($VA,$Vq,{78:82,79:83,26:84,80:85,47:552,273:$V9}),o($VF1,[2,354]),{18:[1,553]},{17:$V$,49:554,119:$V01},{17:$V$,49:555,119:$V01},o($Vp,$Vq,{78:82,79:83,26:84,80:85,47:556,273:$V9}),o($VF,[2,366]),{20:[2,160]},{20:[2,161]},{20:[2,165]},{17:[2,170],167:[1,557]},{20:[2,173]},{20:[2,174]},{20:[2,379],193:558,204:561,205:[1,563],206:[1,564],207:559,224:560,225:[1,562]},{18:[1,565]},{17:[2,180]},{26:469,120:$VH1,155:568,195:566,228:567,229:$VP1,230:$VQ1,270:$VI1,273:$V9},o($VO1,[2,216]),o($VO1,[2,400]),{18:[1,571]},{251:[1,572]},o($VO1,[2,217]),o($VO1,[2,402]),o($VO1,[2,218]),o($VO1,[2,404]),{17:$V$,49:573,119:$V01},{162:574,163:$VR1},{17:[2,127]},{17:[2,128]},o($VA,$VB,{81:149,82:150,48:576,83:$VC,85:$VD,87:$VE}),{17:[2,171]},{20:[2,177]},o($VN1,[2,378]),{20:[2,380]},{16:578,17:[1,577],26:26,120:$V8,273:$V9},{17:[1,579]},o($VA1,[2,182]),{200:[1,580]},{26:469,120:$VH1,155:582,202:581,270:$VI1,273:$V9},{20:[1,583]},{17:[1,584]},{17:[2,206]},{17:[2,207],232:585,307:[1,586]},{231:587,307:[1,588]},{251:[1,589]},{20:[1,590]},{17:[1,591]},{20:[1,592]},{157:593,158:[1,594]},{17:$V$,49:595,119:$V01},{18:[1,596]},{17:[1,597]},{18:[1,598]},o($VA1,[2,183]),{20:[1,599]},{17:[1,600]},o($VS1,[2,381],{196:601,17:[1,602]}),{20:[2,204],26:469,120:$VH1,155:568,195:603,228:567,229:$VP1,230:$VQ1,270:$VI1,273:$V9},{17:[2,209],307:[1,604]},o($VT1,[2,393]),{17:[2,208],307:[1,605]},o($VT1,[2,391]),{20:[1,606]},o($VU1,[2,407],{254:607,17:[1,608]}),{20:[1,609]},o($VB1,[2,140]),{17:[1,610]},{16:473,26:26,120:$V8,273:$V9},{17:[2,129]},{26:469,120:$VH1,155:613,208:611,211:612,270:$VI1,273:$V9},{18:[1,614]},{16:60,26:44,80:61,120:$V8,124:616,226:615,273:$V9},o($VN1,[2,383],{203:617,17:[1,618]}),{20:[2,258],26:469,120:$VH1,155:582,202:619,270:$VI1,273:$V9},o($VS1,[2,178]),o($VS1,[2,382]),{20:[2,205]},o($VT1,[2,394]),o($VT1,[2,392]),o($VU1,[2,405],{252:620,17:[1,621]}),o($VU1,[2,224]),o($VU1,[2,408]),{17:[2,126]},{20:[2,143],162:622,163:$VR1},{20:[1,623]},{17:[1,624]},{17:[2,188],212:625,213:626,214:[1,627],215:[1,628],216:[1,629],217:[1,630],218:[1,631],219:[1,632],220:[1,633],221:[1,634],222:[1,635],223:[1,636]},{26:469,120:$VH1,155:613,208:637,211:612,270:$VI1,273:$V9},{20:[1,638]},{17:[1,639]},o($VN1,[2,181]),o($VN1,[2,384]),{20:[2,259]},o($VU1,[2,223]),o($VU1,[2,406]),{20:[2,144]},o($VN1,[2,385],{209:640,17:[1,641]}),{20:[2,186],26:469,120:$VH1,155:613,208:642,211:612,270:$VI1,273:$V9},{17:[2,189]},{17:[2,190]},{17:[2,191]},{17:[2,192]},{17:[2,193]},{17:[2,194]},{17:[2,195]},{17:[2,196]},{17:[2,197]},{17:[2,198]},{17:[2,199]},{17:[2,200]},{20:[1,643]},{17:[1,645],20:[2,389],227:644},{16:60,20:[2,202],26:44,80:61,120:$V8,124:616,226:646,273:$V9},o($VN1,[2,184]),o($VN1,[2,386]),{20:[2,187]},o($VN1,[2,387],{210:647,17:[1,648]}),{20:[2,201]},{20:[2,390]},{20:[2,203]},o($VN1,[2,185]),o($VN1,[2,388])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],58:[2,87],67:[2,19],121:[2,231],163:[2,93],188:[2,237],192:[2,16],195:[2,21],197:[2,283],210:[2,34],211:[2,32],226:[2,23],227:[2,25],233:[2,95],250:[2,213],251:[2,214],254:[2,233],261:[2,118],270:[2,242],271:[2,243],272:[2,244],291:[2,370],299:[2,239],300:[2,285],345:[2,290],349:[2,156],390:[2,116],410:[2,220],421:[2,28],424:[2,112],427:[2,115],431:[2,124],446:[2,292],449:[2,154],453:[2,163],457:[2,176],488:[2,167],517:[2,179],521:[2,222],526:[2,125],534:[2,160],535:[2,161],536:[2,165],538:[2,173],539:[2,174],542:[2,180],554:[2,127],555:[2,128],557:[2,171],558:[2,177],560:[2,380],568:[2,206],595:[2,129],603:[2,205],609:[2,126],619:[2,259],622:[2,144],625:[2,189],626:[2,190],627:[2,191],628:[2,192],629:[2,193],630:[2,194],631:[2,195],632:[2,196],633:[2,197],634:[2,198],635:[2,199],636:[2,200],642:[2,187],644:[2,201],645:[2,390],646:[2,203]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'customize', 'override', 'api']);

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block', 

        'override.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.views': 'entity.views', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',

        'entity.views.$INDENT': 'entity.views.dataSet',
        'entity.views.dataSet.$INDENT': 'entity.views.dataSet.item',

        'entity.views.dataSet.item.select': 'entity.views.dataSet.item.select',
        'entity.views.dataSet.item.select.$INDENT': 'entity.views.dataSet.item.select.item',

        'entity.views.dataSet.item.groupBy': 'entity.views.dataSet.item.groupBy',
        'entity.views.dataSet.item.groupBy.$INDENT': 'entity.views.dataSet.item.groupBy.item',

        'entity.views.dataSet.item.orderBy': 'entity.views.dataSet.item.orderBy',
        'entity.views.dataSet.item.orderBy.$INDENT': 'entity.views.dataSet.item.orderBy.item',        

        'entity.views.dataSet.item.options': 'entity.views.dataSet.item.options',
        'entity.views.dataSet.item.options.$INDENT': 'entity.views.dataSet.item.options.item',        
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', 'views', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),    
        'entity.views': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),               
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),        
        
        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        'entity.views.dataSet.item': new Set(['select', 'orderBy', 'order', 'groupBy', 'group', 'by', 'options']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),     

        // level 6
        'entity.views.dataSet.item.orderBy.item': new Set(['asc', 'desc', 'ASC', 'DESC', 'v', '^', 'ascend', 'descend']),      
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.views.dataSet', 2 ],
        [ 'entity.views.dataSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],  
        [ 'entity.views.dataSet.item.select', 2 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 2 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 2 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 2 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.views.dataSet', 1 ],
        [ 'entity.views.dataSet.item', 1 ],        
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ],
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([      
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xt: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            if (typeof name === 'object') {                
                this.define('entityTemplate', name.name, { ...value, templateArgs: name.args }, line);
            } else {
                this.define('entity', name, value, line);
            }
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        idOrFunctionToKV(value) {
            if (typeof value === 'string') {
                return { [value]: true };
            }

            return {
                [value.name]: value.args.length === 1 ? value.args[0] : value.args
            };
        }
    }

    // merge two objects
    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 277;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 120;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 120;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 120;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 92;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 275;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 274;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 274;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 270;
                           
break;
case 24:      
                                state.matchAnyExceptNewline();

                                return 229;
                           
break;
case 25:      
                                state.matchAnyExceptNewline();

                                return 307;
                           
break;
case 26:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 278;
                           
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 268;
                           
break;
case 28:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 29:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 276;
                           
break;
case 30:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 31:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 32:return yy_.yytext;                                                  
break;
case 33:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 273;
                            
break;
case 34:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))*\.\\\*))/,/^(?:(-(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,34],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,34],"inclusive":true},"DEDENTED":{"rules":[9,34],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"inclusive":true},"REPARSE":{"rules":[33,34],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}