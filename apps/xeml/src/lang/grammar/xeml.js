/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,17],$V6=[1,21],$V7=[1,22],$V8=[1,25],$V9=[5,17,24,31,36,48,50,101,105,113],$Va=[1,31],$Vb=[1,32],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[19,61,93,95,97,111,112,128,129,163,165,166,184,187,188,195,196,206,269,295,311,317,324,325],$Vg=[2,311],$Vh=[1,64],$Vi=[1,72],$Vj=[1,69],$Vk=[1,73],$Vl=[308,311],$Vm=[19,111,112],$Vn=[1,85],$Vo=[19,93,95,97,111,112,128,195,295,311],$Vp=[1,96],$Vq=[1,97],$Vr=[1,91],$Vs=[1,92],$Vt=[1,93],$Vu=[1,98],$Vv=[1,99],$Vw=[1,100],$Vx=[1,101],$Vy=[1,107],$Vz=[1,144],$VA=[1,145],$VB=[1,146],$VC=[19,93,95,97,112,128,165,166,198,207,251,256,263,269,295,311,318,325,331,332,334,336,337,338,339,340,341,344,345],$VD=[1,147],$VE=[1,148],$VF=[22,42,44],$VG=[2,123],$VH=[1,153],$VI=[22,127,129,133,136,142,199,200,208,217,266,272],$VJ=[1,159],$VK=[19,195,295],$VL=[1,175],$VM=[1,173],$VN=[1,184],$VO=[1,181],$VP=[19,128],$VQ=[19,93,95,97,128],$VR=[19,112,128,165,166,198,207,251,256,263,269,295,311,318,325,331,332,334,336,337,338,339,340,341,344,345],$VS=[19,93,95,97,128,311],$VT=[22,42],$VU=[1,234],$VV=[1,225],$VW=[1,226],$VX=[1,227],$VY=[1,228],$VZ=[1,229],$V_=[1,230],$V$=[1,231],$V01=[1,232],$V11=[1,233],$V21=[1,235],$V31=[1,239],$V41=[2,286],$V51=[1,248],$V61=[295,318],$V71=[198,325],$V81=[1,255],$V91=[1,286],$Va1=[1,290],$Vb1=[19,112,206],$Vc1=[1,341],$Vd1=[1,359],$Ve1=[1,365],$Vf1=[1,366],$Vg1=[1,363],$Vh1=[1,364],$Vi1=[1,358],$Vj1=[1,360],$Vk1=[1,369],$Vl1=[1,383],$Vm1=[1,384],$Vn1=[1,385],$Vo1=[1,460],$Vp1=[1,453],$Vq1=[19,93,95,97,128,165,166,311],$Vr1=[1,469],$Vs1=[19,128,311],$Vt1=[1,503],$Vu1=[1,502],$Vv1=[19,128,166,311],$Vw1=[304,308,311],$Vx1=[1,515],$Vy1=[1,513],$Vz1=[1,517],$VA1=[1,516],$VB1=[1,534],$VC1=[1,535],$VD1=[19,128,129,166,247,248,249,250,251,252,253,254,255,256,311],$VE1=[19,93,95,97,128,165,166,198,311,344,345],$VF1=[1,553],$VG1=[1,562],$VH1=[1,555],$VI1=[1,554],$VJ1=[1,563],$VK1=[1,560],$VL1=[1,551],$VM1=[1,552],$VN1=[1,556],$VO1=[1,557],$VP1=[1,558],$VQ1=[1,559],$VR1=[1,561],$VS1=[1,564],$VT1=[19,129,195,196],$VU1=[22,234,239,258],$VV1=[47,100,197,304,306,308,311,312,313,314,315,316,317,324,332],$VW1=[22,239,258],$VX1=[22,276,279,281],$VY1=[1,645],$VZ1=[1,646],$V_1=[22,231,234,239,258],$V$1=[19,346],$V02=[22,193,286];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"modifier_def_statement":11,"schema_statement":12,"customize_statement":13,"override_statement":14,"abstract_statement":15,"entity_statement":16,"import":17,"identifier_or_string":18,"NEWLINE":19,"INDENT":20,"import_statement_block":21,"DEDENT":22,"import_statement_option0":23,"const":24,"const_statement_item":25,"const_statement_block":26,"const_statement_option0":27,"identifier":28,"=":29,"literal":30,"modifier":31,"type_modifier":32,"modifier_def_statement_block":33,"modifier_def_statement_option0":34,"type_modifier_def":35,"schema":36,"schema_statement_block":37,"schema_statement_option0":38,"comment_or_not":39,"schema_statement_block_option0":40,"schema_views_or_not":41,"schema_views":42,"schema_entities":43,"entities":44,"schema_entities_block":45,"schema_entities_option0":46,"NAMESPACED":47,"customize":48,"customize_statement_option0":49,"type":50,"type_statement_item":51,"type_statement_block":52,"type_statement_option0":53,"type_base":54,"entity_or_field_comment":55,"type_modifiers_list":56,"type_statement_item_option0":57,"type_infos":58,"type_statement_item_option1":59,"type_statement_item_option2":60,":":61,"types":62,"int_keyword":63,"number_keyword":64,"text_keyword":65,"bool_keyword":66,"binary_keyword":67,"datetime_keyword":68,"any":69,"enum":70,"array":71,"object_keyword":72,"bigint":73,"int":74,"integer":75,"number":76,"float":77,"decimal":78,"text":79,"string":80,"bool":81,"boolean":82,"object":83,"json":84,"blob":85,"binary":86,"buffer":87,"datetime":88,"timestamp":89,"type_info":90,"simple_function_call":91,"type_modifiers":92,"|~":93,"type_modifier_validators":94,"|>":95,"identifier_or_general_function_call":96,"|=":97,"modifier_def_item":98,"general_function_call":99,"REGEXP":100,"override":101,"entity_statement_header":102,"entity_statement_block":103,"override_statement_option0":104,"abstract":105,"abstract_statement_option0":106,"entity_statement_option0":107,"entity_statement_header0":108,"entity_base_keywords":109,"id_or_string_or_call_list":110,"extends":111,"is":112,"entity":113,"entity_sub_items":114,"entity_sub_item":115,"with_features":116,"use_modifiers":117,"has_fields":118,"associations_statement":119,"key_statement":120,"index_statement":121,"input_statement":122,"views_statement":123,"data_statement":124,"code_statement":125,"triggers_statement":126,"code":127,"INLINE_COMMENT":128,"with":129,"with_features_block":130,"with_features_option0":131,"id_or_string_or_call":132,"use":133,"use_modifier_statement_block":134,"use_modifiers_option0":135,"has":136,"has_fields_block":137,"has_fields_option0":138,"field_item":139,"field_item_body":140,"modifiable_field":141,"associations":142,"associations_block":143,"associations_statement_option0":144,"association_item":145,"association_item_many_to_one":146,"association_item_new_field":147,"association_item_existing_field":148,"association_type_referee":149,"association_item_many_to_one_option0":150,"association_as":151,"association_item_many_to_one_option1":152,"association_item_many_to_one_option2":153,"association_through":154,"association_item_many_to_one_option3":155,"association_item_many_to_one_option4":156,"association_item_many_to_one_option5":157,"association_item_belong_refer_to_base":158,"belongs_to_keywords":159,"association_item_belong_refer_to_base_option0":160,"refers_to_keywords":161,"association_item_belong_refer_to_base_option1":162,"of":163,"association_item_belong_refer_to_base_option2":164,"on":165,"as":166,"association_item_fields_props":167,"association_item_fields_props_option0":168,"association_item_fields_props_option1":169,"association_item_fields_props_option2":170,"refersTo":171,"refers":172,"to":173,"belongsTo":174,"belongs":175,"hasOne":176,"one":177,"hasMany":178,"many":179,"connected_by_keywords":180,"identifier_string_or_dotname":181,"association_extra_condition":182,"association_connection":183,"being":184,"array_of_identifier_or_string":185,"association_condition":186,"connectedBy":187,"connected":188,"by":189,"conditional_expression":190,"association_cases_block":191,"association_cases":192,"when":193,"association_qualifiers":194,"optional":195,"default":196,"(":197,")":198,"key":199,"index":200,"index_item":201,"index_statement_block":202,"index_statement_option0":203,"index_item_body":204,"index_item_option0":205,"unique":206,"-":207,"input":208,"input_statement_block":209,"input_statement_option0":210,"input_statement_def":211,"input_block":212,"input_block_item":213,"input_block_item_base":214,"input_block_item_with_spec":215,"nfc_param":216,"views":217,"views_statement_block":218,"views_statement_option0":219,"views_statement_def":220,"entity_views_block":221,"views_statement_select":222,"entity_views_block_option0":223,"entity_views_block_option1":224,"entity_views_block_repetition0":225,"entity_views_block_option2":226,"select":227,"entity_views_block_select":228,"views_statement_select_option0":229,"countby_keywords":230,"countBy":231,"views_statement_count_by":232,"groupby_keywords":233,"groupBy":234,"views_statement_group_by":235,"identifier_string_or_dotname_block":236,"views_statement_group_by_option0":237,"orderby_keywords":238,"orderBy":239,"views_statement_order_by":240,"order_by_block":241,"views_statement_order_by_option0":242,"views_statement_order_by_option1":243,"order_by_clause":244,"order_ascend_keywords":245,"order_descend_keywords":246,"ascend":247,"ASC":248,"^":249,"asc":250,"<":251,"descend":252,"DESC":253,"v":254,"desc":255,">":256,"views_statement_options":257,"options":258,"entity_views_block_options":259,"views_statement_options_option0":260,"entity_views_block_select_item":261,"SELECT_ALL":262,"*":263,"entity_views_block_select_item_repetition_plus0":264,"entity_views_block_select_item_repetition_plus1":265,"data":266,"data_records":267,"data_statement_option0":268,"in":269,"inline_object":270,"inline_array":271,"triggers":272,"triggers_statement_block":273,"triggers_statement_option0":274,"triggers_operation":275,"onCreate":276,"triggers_operation_block":277,"triggers_operation_option0":278,"onCreateOrUpdate":279,"triggers_operation_option1":280,"onDelete":281,"triggers_operation_option2":282,"triggers_operation_item":283,"triggers_result_block":284,"triggers_operation_item_option0":285,"always":286,"triggers_operation_item_option1":287,"modifiable_field_option0":288,"modifiable_field_option1":289,"modifiable_field_option2":290,"modifiable_value":291,"gfc_param0":292,"modifiable_param":293,"id_or_string_or_call_list0":294,",":295,"simple_function_call_with_args":296,"nfc_param_list":297,"nfc_param_list0":298,"literal_and_value_expression":299,"unary_expression":300,"binary_expression":301,"boolean_expression":302,"gfc_param_list":303,"DOTNAME":304,"gfc_param_list0":305,"REFERENCE":306,"?":307,"STRING":308,"identifier_string_or_dotname_list":309,"identifier_string_or_dotname_list0":310,"NAME":311,"INTEGER":312,"FLOAT":313,"BOOL":314,"SCRIPT":315,"SYMBOL":316,"{":317,"}":318,"kv_pairs":319,"kv_pair_item":320,"NESTED_KEY":321,"non_exist":322,"kv_pairs0":323,"[":324,"]":325,"identifier_or_string_list":326,"identifier_or_string_list0":327,"value":328,"simple_expression":329,"logical_expression":330,"exists":331,"not":332,"null":333,"~":334,"all":335,">=":336,"<=":337,"==":338,"!=":339,"+":340,"/":341,"logical_expression_right":342,"logical_operators":343,"and":344,"or":345,"EXCLUDE_COLUMN":346,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"import",19:"NEWLINE",20:"INDENT",22:"DEDENT",24:"const",29:"=",31:"modifier",36:"schema",42:"schema_views",44:"entities",47:"NAMESPACED",48:"customize",50:"type",61:":",69:"any",70:"enum",71:"array",73:"bigint",74:"int",75:"integer",76:"number",77:"float",78:"decimal",79:"text",80:"string",81:"bool",82:"boolean",83:"object",84:"json",85:"blob",86:"binary",87:"buffer",88:"datetime",89:"timestamp",93:"|~",95:"|>",97:"|=",100:"REGEXP",101:"override",105:"abstract",111:"extends",112:"is",113:"entity",127:"code",128:"INLINE_COMMENT",129:"with",133:"use",136:"has",142:"associations",163:"of",165:"on",166:"as",171:"refersTo",172:"refers",173:"to",174:"belongsTo",175:"belongs",176:"hasOne",177:"one",178:"hasMany",179:"many",184:"being",187:"connectedBy",188:"connected",189:"by",193:"when",195:"optional",196:"default",197:"(",198:")",199:"key",200:"index",206:"unique",207:"-",208:"input",217:"views",227:"select",231:"countBy",234:"groupBy",239:"orderBy",247:"ascend",248:"ASC",249:"^",250:"asc",251:"<",252:"descend",253:"DESC",254:"v",255:"desc",256:">",258:"options",262:"SELECT_ALL",263:"*",266:"data",269:"in",272:"triggers",276:"onCreate",279:"onCreateOrUpdate",281:"onDelete",284:"triggers_result_block",286:"always",295:",",304:"DOTNAME",306:"REFERENCE",307:"?",308:"STRING",311:"NAME",312:"INTEGER",313:"FLOAT",314:"BOOL",315:"SCRIPT",316:"SYMBOL",317:"{",318:"}",321:"NESTED_KEY",324:"[",325:"]",331:"exists",332:"not",333:"null",334:"~",335:"all",336:">=",337:"<=",338:"==",339:"!=",340:"+",341:"/",344:"and",345:"or",346:"EXCLUDE_COLUMN"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[21,2],[21,3],[9,3],[9,6],[25,3],[26,2],[26,3],[11,3],[11,6],[33,2],[33,3],[12,7],[37,3],[41,0],[41,1],[43,6],[45,2],[45,2],[45,3],[45,3],[13,6],[10,3],[10,6],[51,2],[51,3],[51,4],[51,5],[52,2],[52,3],[54,2],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[63,1],[63,1],[64,1],[64,1],[64,1],[65,1],[65,1],[66,1],[66,1],[72,1],[72,1],[67,1],[67,1],[67,1],[68,1],[68,1],[58,1],[58,2],[90,1],[90,1],[56,1],[92,1],[92,2],[32,2],[32,2],[32,2],[35,2],[35,2],[35,2],[98,1],[98,1],[96,1],[96,1],[96,1],[94,1],[94,1],[14,3],[14,7],[15,3],[15,7],[16,2],[16,6],[102,1],[102,3],[109,1],[109,1],[108,2],[108,2],[103,1],[103,2],[114,1],[114,2],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[115,1],[125,3],[39,0],[39,2],[116,6],[130,2],[130,3],[117,6],[134,2],[134,3],[118,6],[137,2],[137,3],[139,1],[139,2],[55,1],[140,1],[119,6],[143,2],[143,3],[145,1],[145,1],[145,1],[146,2],[146,3],[146,4],[146,5],[146,6],[158,3],[158,3],[158,5],[148,3],[148,5],[147,1],[147,3],[147,2],[147,4],[167,1],[167,2],[167,3],[161,1],[161,2],[159,1],[159,2],[149,1],[149,2],[149,1],[149,2],[154,2],[154,3],[154,1],[154,2],[154,1],[180,1],[180,2],[182,2],[191,5],[183,2],[183,3],[192,3],[192,4],[186,2],[151,2],[194,1],[194,4],[120,3],[120,3],[121,3],[121,6],[202,2],[202,3],[201,1],[201,3],[201,2],[204,1],[204,1],[122,6],[209,6],[209,6],[211,1],[211,3],[212,2],[212,3],[213,1],[213,1],[214,1],[214,2],[214,5],[215,3],[215,4],[123,6],[218,6],[218,6],[220,1],[220,3],[221,5],[222,6],[230,1],[232,3],[233,1],[235,6],[238,1],[240,6],[240,7],[241,2],[241,3],[244,1],[244,2],[244,2],[245,1],[245,1],[245,1],[245,1],[245,1],[246,1],[246,1],[246,1],[246,1],[246,1],[257,6],[259,2],[259,3],[228,2],[228,3],[261,1],[261,1],[261,1],[261,2],[261,2],[124,3],[124,4],[124,6],[267,1],[267,1],[126,6],[275,6],[275,6],[275,6],[273,1],[273,2],[277,1],[277,2],[283,7],[283,6],[141,1],[141,2],[141,3],[141,4],[291,1],[291,2],[293,1],[132,1],[132,1],[110,1],[110,2],[294,2],[294,3],[91,3],[91,1],[296,4],[297,1],[297,2],[298,2],[298,3],[216,1],[216,1],[299,1],[299,1],[299,1],[99,4],[99,4],[99,4],[303,1],[303,2],[305,2],[305,3],[305,1],[292,1],[292,1],[292,2],[292,1],[181,1],[181,1],[181,1],[236,2],[236,3],[309,1],[309,2],[310,2],[310,3],[18,1],[18,1],[28,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[270,2],[270,3],[320,3],[320,3],[320,2],[320,3],[322,0],[319,1],[319,2],[323,2],[323,3],[271,2],[271,3],[185,3],[326,1],[326,2],[327,2],[327,3],[328,1],[328,1],[190,1],[190,1],[190,1],[329,1],[329,1],[329,3],[300,2],[300,3],[300,3],[300,4],[300,4],[302,3],[302,4],[302,4],[301,3],[301,3],[301,3],[301,3],[301,3],[301,3],[301,3],[301,4],[301,3],[301,3],[301,3],[301,3],[330,2],[342,2],[343,1],[343,1],[23,0],[23,1],[27,0],[27,1],[34,0],[34,1],[38,0],[38,1],[40,0],[40,1],[46,0],[46,1],[49,0],[49,1],[53,0],[53,1],[57,0],[57,1],[59,0],[59,1],[60,0],[60,1],[104,0],[104,1],[106,0],[106,1],[107,0],[107,1],[131,0],[131,1],[135,0],[135,1],[138,0],[138,1],[144,0],[144,1],[150,0],[150,1],[152,0],[152,1],[153,0],[153,1],[155,0],[155,1],[156,0],[156,1],[157,0],[157,1],[160,0],[160,1],[162,0],[162,1],[164,0],[164,1],[168,0],[168,1],[169,0],[169,1],[170,0],[170,1],[203,0],[203,1],[205,0],[205,1],[210,0],[210,1],[219,0],[219,1],[223,0],[223,1],[224,0],[224,1],[225,0],[225,2],[226,0],[226,1],[229,0],[229,1],[237,0],[237,1],[242,0],[242,1],[243,0],[243,1],[260,0],[260,1],[264,1],[264,2],[265,1],[265,2],[268,0],[268,1],[274,0],[274,1],[278,0],[278,1],[280,0],[280,1],[282,0],[282,1],[285,0],[285,1],[287,0],[287,1],[288,0],[288,1],[289,0],[289,1],[290,0],[290,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 15:
this.$ = state.import($$[$0-1]) ;
break;
case 17:
this.$ = state.import($$[$0-1]);
break;
case 18:
this.$ = state.import($$[$0-2]);
break;
case 21:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 26:
this.$ = state.define($$[$0-1].$xt, $$[$0-1].name, $$[$0-1], _$[$0-1].first_line);
break;
case 27:
this.$ = state.define($$[$0-2].$xt, $$[$0-2].name, $$[$0-2], _$[$0-2].first_line);
break;
case 28:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 29:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 32:
this.$ = { entities: $$[$0-2] };
break;
case 33: case 34:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 35: case 36:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 37:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 40:
this.$ = state.defineType($$[$0-1], $$[$0], _$[$0-1].first_line);
break;
case 41:
this.$ = state.defineType($$[$0-2], { ...$$[$0-1], ...$$[$0] }, _$[$0-2].first_line);
break;
case 42:
this.$ = state.defineType($$[$0-3], { ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-3].first_line);
break;
case 43:
this.$ = state.defineType($$[$0-4], { ...$$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] }, _$[$0-4].first_line)    ;
break;
case 46: case 82: case 105: case 106: case 107: case 178: case 332:
this.$ = $$[$0];
break;
case 47:
this.$ = { type: 'integer' };
break;
case 48:
this.$ = { type: 'number' }    ;
break;
case 49:
this.$ = { type: 'text' };
break;
case 50:
this.$ = { type: 'boolean' };
break;
case 51:
this.$ = { type: 'binary' };
break;
case 52:
this.$ = { type: 'datetime' };
break;
case 53:
this.$ = { type: 'any' };
break;
case 54:
this.$ = { type: 'enum' };
break;
case 55:
this.$ = { type: 'array' };
break;
case 56:
this.$ = { type: 'object' };
break;
case 57:
this.$ = { type: $$[$0] };
break;
case 58:
this.$ = { type: 'bigint' };
break;
case 76: case 108: case 331: case 333:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 77:
this.$ = { [$$[$0]]: true };
break;
case 78:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 79:
this.$ = { modifiers: $$[$0] };
break;
case 80: case 259: case 261: case 274: case 276: case 281: case 283: case 295: case 307: case 309: case 337: case 339:
this.$ = [ $$[$0] ];
break;
case 81: case 260: case 262: case 277: case 282: case 284: case 296: case 310: case 338: case 340:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 83: case 86:
this.$ = state.normalizeProcessor(...$$[$0])        ;
break;
case 84: case 87:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 85: case 93:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 88: case 91: case 92: case 459: case 461:
this.$ = [$$[$0]];
break;
case 89: case 90:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 94:
this.$ = state.normalizeValidator('matches', $$[$0])        ;
break;
case 95:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 96:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 97:
this.$ = state.defineEntity($$[$0-1][0], { ...$$[$0-1][1], abstract: true }, _$[$0-2].first_line);
break;
case 98:
this.$ = state.defineEntity($$[$0-5][0], { ...$$[$0-5][1], ...$$[$0-2], abstract: true }, _$[$0-6].first_line);
break;
case 99:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 100:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 101:
this.$ = [ $$[$0], {} ];
break;
case 102:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 110:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 122:
this.$ = { code: $$[$0-1] };
break;
case 124:
this.$ = { comment: $$[$0-1] };
break;
case 125:
this.$ = { features: $$[$0-2] };
break;
case 126: case 129: case 139: case 180: case 190: case 202: case 225: case 243: case 305:
this.$ = [ $$[$0-1] ];
break;
case 127: case 140: case 191: case 203: case 226: case 244: case 306:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 128:
this.$ = { modifiers: $$[$0-2] };
break;
case 130:
this.$ = [ $$[$0-2], ...$$[$0] ];
break;
case 131:
this.$ = { fields: $$[$0-2] };
break;
case 132:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 133:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 135: case 159:
this.$ = { ...$$[$0-1], ...$$[$0] };
break;
case 136:
this.$ = { comment: $$[$0] };
break;
case 138:
this.$ = { associations: $$[$0-2] };
break;
case 144:
this.$ = { type: $$[$0-1], destEntity: $$[$0] }        ;
break;
case 145:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], fieldProps: $$[$0] }        ;
break;
case 146:
this.$ = { type: $$[$0-3], destEntity: $$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 147:
this.$ = { type: $$[$0-4], destEntity: $$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 148:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }        ;
break;
case 149: case 150:
this.$ = { type: $$[$0-2], destEntity: $$[$0-1], ...$$[$0] }      ;
break;
case 151:
this.$ = { type: $$[$0-4], destEntity: $$[$0-1], destField: $$[$0-3], ...$$[$0] }          ;
break;
case 152:
this.$ = { ...$$[$0-2], srcField: $$[$0], existingField: true };
break;
case 153:
this.$ = { ...$$[$0-4], srcField: $$[$0-2], existingField: true, anchor: $$[$0] };
break;
case 155:
this.$ = { ...$$[$0-2], srcField: $$[$0] };
break;
case 156:
this.$ = { ...$$[$0-1], fieldProps: $$[$0] };
break;
case 157:
this.$ = { ...$$[$0-3], srcField: $$[$0-1], fieldProps: $$[$0] };
break;
case 160:
this.$ = { ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 166:
this.$ = "hasOne";
break;
case 168:
this.$ = "hasMany";
break;
case 169:
this.$ = { by: $$[$0] }    ;
break;
case 170:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 171:
this.$ = { remoteField: $$[$0] }     ;
break;
case 172:
this.$ = { remoteField: $$[$0] }      ;
break;
case 173:
this.$ = { with: $$[$0] };
break;
case 176:
this.$ = { with: $$[$0] }    ;
break;
case 177:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 179:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 181:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 182:
this.$ = $$[$0];;
break;
case 183:
this.$ = { srcField: $$[$0] };
break;
case 184:
this.$ = { optional: true };
break;
case 185:
this.$ = { default: $$[$0-1] };
break;
case 186:
this.$ = { key: $$[$0-1] };
break;
case 187:
this.$ = { key: $$[$0-1] } ;
break;
case 188:
this.$ = { indexes: [$$[$0-1]] };
break;
case 189:
this.$ = { indexes: $$[$0-2] };
break;
case 193:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 194:
this.$ = { ...$$[$0], overrideRemove: true };
break;
case 195: case 196:
this.$ = { fields: $$[$0] };
break;
case 197:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 198: case 212:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 199: case 213:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 200: case 206: case 214:
this.$ = { name: $$[$0] };
break;
case 201: case 215:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 207:
this.$ = { ...$$[$0-1], optional: true };
break;
case 208:
this.$ = { ...$$[$0-4], default: $$[$0-1] };
break;
case 209:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 210:
this.$ = { ...$$[$0-3], spec: $$[$0-1], optional: true };
break;
case 211:
this.$ = { views: $$[$0-2] }     ;
break;
case 216:
this.$ = { $select: $$[$0-4],  ...($$[$0-3] ? { $countBy: $$[$0-3] } : null), ...($$[$0-2] ? { $groupBy: $$[$0-2] } : null), ...($$[$0-1] && $$[$0-1].length > 0 ? { $orderBySet: $$[$0-1] } : null), ...$$[$0] };
break;
case 217: case 221: case 240:
this.$ = $$[$0-2];
break;
case 219: case 324: case 335: case 336: case 348:
this.$ = $$[$0-1];
break;
case 223:
this.$ = { "$default": $$[$0-2] };
break;
case 224:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 227:
this.$ = { field: $$[$0], ascend: true };
break;
case 228:
this.$ = { field: $$[$0-1], ascend: true }    ;
break;
case 229:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 241:
this.$ = state.idOrFunctionToKV($$[$0-1]);
break;
case 242:
this.$ = { ...state.idOrFunctionToKV($$[$0-2]), ...$$[$0] };
break;
case 247:
this.$ = "*";
break;
case 248: case 249:
this.$ = { $xt: "ExclusiveSelect", columnSet: $$[$0-1], excludes: $$[$0] };
break;
case 250:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 251:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 252:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 255:
this.$ = { triggers: $$[$0-2] };
break;
case 256:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 257:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 258:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 263:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 264:
this.$ = { do: $$[$0-2] };
break;
case 265:
this.$ = { name: $$[$0], type: $$[$0] };
break;
case 266:
this.$ = { name: $$[$0-1], type: $$[$0-1], ...$$[$0] };
break;
case 267:
this.$ = { name: $$[$0-2], type: $$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 268:
this.$ = { name: $$[$0-3], type: $$[$0-3], ...$$[$0-2], ...$$[$0-1], ...$$[$0] };
break;
case 269:
this.$ = state.normalizePipedValue($$[$0]);
break;
case 270:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 275: case 294:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 278:
this.$ = { name: $$[$0-2], args: [] };
break;
case 280: case 290: case 291: case 292:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 286:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 293:
this.$ = [ $$[$0] ]    ;
break;
case 297: case 334: case 445:
this.$ = [];
break;
case 300:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 308:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 323:
this.$ = {}    ;
break;
case 325: case 326: case 328:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 327:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 342:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 349:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 350:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 351:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 352:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 353:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 354:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 355:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 356:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 357:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 358:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 359:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 360:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 361:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 362:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 365:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 367:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 368:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 369:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 370:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 371:
this.$ = { operator: 'and' };
break;
case 372:
this.$ = { operator: 'or' };
break;
case 446: case 460: case 462:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,24:$V1,31:$V2,36:$V3,48:$V4,50:$V5,101:$V6,102:23,105:$V7,108:24,113:$V8},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,26]},{5:[2,4],6:27,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:$V0,24:$V1,31:$V2,36:$V3,48:$V4,50:$V5,101:$V6,102:23,105:$V7,108:24,113:$V8},o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,14]),{18:28,19:[1,29],28:30,308:$Va,311:$Vb},{19:[1,34],25:33,28:35,311:$Vb},{18:38,19:[1,37],28:30,51:36,308:$Va,311:$Vb},{19:[1,40],32:39,93:$Vc,95:$Vd,97:$Ve},{18:44,28:30,308:$Va,311:$Vb},{19:[1,45]},{102:46,108:24,113:$V8},{102:47,108:24,113:$V8},{19:[1,48]},{19:[2,101],109:49,111:[1,50],112:[1,51]},{18:52,28:54,91:53,296:55,308:$Va,311:$Vb},{1:[2,3]},{5:[2,5]},{19:[1,56]},{20:[1,57]},o($Vf,$Vg),o($Vf,[2,312]),o([19,29,61,93,95,97,111,112,128,129,163,165,166,184,187,188,195,196,197,198,206,207,247,248,249,250,251,252,253,254,255,256,263,269,295,311,317,318,324,325,331,332,334,336,337,338,339,340,341,344,345],[2,313]),{19:[1,58]},{20:[1,59]},{29:[1,60]},{19:[1,61]},{20:[1,62]},{54:63,61:$Vh},{19:[1,65]},{20:[1,66]},{28:71,47:$Vi,94:67,96:68,99:70,100:$Vj,304:$Vk,311:$Vb},{28:71,47:$Vi,96:74,99:70,304:$Vk,311:$Vb},{28:71,47:$Vi,96:75,99:70,304:$Vk,311:$Vb},{19:[1,76]},{20:[1,77]},{19:[1,78]},{19:[1,79]},o($V9,[2,99],{20:[1,80]}),{18:83,28:54,91:84,110:81,132:82,296:55,308:$Va,311:$Vb},o($Vl,[2,103]),o($Vl,[2,104]),o($Vm,[2,105]),o($Vm,[2,106]),o([19,111,112,195,295],$Vg,{197:$Vn}),o($Vo,[2,279]),o($V9,[2,15]),{18:87,21:86,28:30,308:$Va,311:$Vb},o($V9,[2,19]),{25:89,26:88,28:35,311:$Vb},{30:90,100:$Vp,270:94,271:95,308:$Vq,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},o($V9,[2,38]),{18:38,28:30,51:103,52:102,308:$Va,311:$Vb},{19:[2,40],28:111,32:110,55:104,56:105,58:106,90:109,91:112,92:108,93:$Vc,95:$Vd,97:$Ve,128:$Vy,296:55,311:$Vb},{18:124,28:30,62:113,63:114,64:115,65:116,66:117,67:118,68:119,69:[1,120],70:[1,121],71:[1,122],72:123,73:[1,125],74:[1,126],75:[1,127],76:[1,128],77:[1,129],78:[1,130],79:[1,131],80:[1,132],81:[1,133],82:[1,134],83:[1,140],84:[1,141],85:[1,135],86:[1,136],87:[1,137],88:[1,138],89:[1,139],308:$Va,311:$Vb},o($V9,[2,24]),{33:142,35:143,93:$Vz,95:$VA,97:$VB},o($VC,[2,82]),o($VC,[2,93]),o($VC,[2,94]),o($VC,[2,90]),o($VC,[2,91],{197:$VD}),o($VC,[2,92],{197:$VE}),{197:[1,149]},o($VC,[2,83]),o($VC,[2,84]),{20:[1,150]},o($VF,$VG,{37:151,39:152,128:$VH}),o($V9,[2,95],{20:[1,154]}),o($V9,[2,97],{20:[1,155]}),o($VI,$VG,{103:156,39:157,128:$VH}),{19:[2,102]},{19:[2,274],294:158,295:$VJ},o($VK,[2,272]),o($VK,[2,273]),{28:164,30:163,100:$Vp,198:[1,160],216:162,270:94,271:95,297:161,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{22:[1,165]},{19:[1,166]},{22:[1,167]},{19:[1,168]},{19:[2,21]},o($VC,[2,314]),o($VC,[2,315]),o($VC,[2,316]),o($VC,[2,317]),o($VC,[2,318]),o($VC,[2,319]),o($VC,[2,320]),o($VC,[2,321]),o($VC,[2,322]),{18:172,28:174,308:$Va,311:$Vb,312:$VL,318:[1,169],319:170,320:171,321:$VM},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:178,292:179,303:177,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,325:[1,176]},{22:[1,185]},{19:[1,186]},{19:[2,41]},{19:[2,389],55:188,57:187,128:$Vy},o($VP,[2,391],{92:108,32:110,59:189,56:190,93:$Vc,95:$Vd,97:$Ve}),{19:[2,136]},o($VC,[2,79]),o($VQ,[2,75],{296:55,90:109,28:111,91:112,58:191,311:$Vb}),o($VR,[2,80],{32:110,92:192,93:$Vc,95:$Vd,97:$Ve}),o($VS,[2,77],{197:$Vn}),o($VS,[2,78]),o($VS,[2,46]),o($VS,[2,47]),o($VS,[2,48]),o($VS,[2,49]),o($VS,[2,50]),o($VS,[2,51]),o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,62]),o($VS,[2,63]),o($VS,[2,64]),o($VS,[2,65]),o($VS,[2,66]),o($VS,[2,67]),o($VS,[2,70]),o($VS,[2,71]),o($VS,[2,72]),o($VS,[2,73]),o($VS,[2,74]),o($VS,[2,68]),o($VS,[2,69]),{22:[1,193]},{19:[1,194]},{28:196,91:197,98:195,296:55,311:$Vb},{28:196,91:197,98:198,296:55,311:$Vb},{28:196,91:197,98:199,296:55,311:$Vb},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:178,292:179,303:200,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:178,292:179,303:201,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:178,292:179,303:202,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},o($VF,$VG,{39:152,37:203,128:$VH}),{22:[1,204]},o($VT,[2,381],{40:205,43:206,44:[1,207]}),{19:[1,208]},o($VI,$VG,{39:157,103:209,128:$VH}),o($VI,$VG,{39:157,103:210,128:$VH}),{22:[1,211]},{22:[2,107],114:212,115:213,116:214,117:215,118:216,119:217,120:218,121:219,122:220,123:221,124:222,125:223,126:224,127:$VU,129:$VV,133:$VW,136:$VX,142:$VY,199:$VZ,200:$V_,208:$V$,217:$V01,266:$V11,272:$V21},{19:[2,275]},{18:83,28:54,91:84,132:236,296:55,308:$Va,311:$Vb},o($Vo,[2,278]),{198:[1,237]},{198:[2,281],295:$V31,298:238},o($VC,[2,285]),o([198,295],$V41),o($V9,[2,373],{23:240,19:[1,241]}),{18:87,21:242,22:[2,17],28:30,308:$Va,311:$Vb},o($V9,[2,375],{27:243,19:[1,244]}),{22:[2,22],25:89,26:245,28:35,311:$Vb},o($VC,[2,323]),{318:[1,246]},{295:$V51,318:[2,330],323:247},{61:[1,249]},{61:[1,250]},o($V61,[2,329],{322:251,61:$Vg}),{61:[1,252]},o($VC,[2,334]),{325:[1,253]},o($V71,[2,293],{305:254,295:$V81}),o($VR,[2,269],{92:108,32:110,56:256,93:$Vc,95:$Vd,97:$Ve}),o($VC,[2,298]),o($VC,[2,299],{307:[1,257]}),o($VC,[2,301]),o($VC,$V41,{197:$VD}),{197:$VE},o($V9,[2,387],{53:258,19:[1,259]}),{18:38,22:[2,44],28:30,51:103,52:260,308:$Va,311:$Vb},{19:[2,42]},{19:[2,390]},{19:[2,393],55:262,60:261,128:$Vy},o($VP,[2,392]),o($VQ,[2,76]),o($VC,[2,81]),o($V9,[2,377],{34:263,19:[1,264]}),{22:[2,26],33:265,35:143,93:$Vz,95:$VA,97:$VB},{19:[2,85]},{19:[2,88],197:$Vn},{19:[2,89]},{19:[2,86]},{19:[2,87]},{198:[1,266]},{198:[1,267]},{198:[1,268]},{22:[1,269]},o($V9,[2,385],{49:270,19:[1,271]}),{22:[2,30],41:272,42:[1,273]},o($VT,[2,382]),{19:[1,274]},o([22,42,44,127,129,133,136,142,199,200,208,217,266,272],[2,124]),{22:[1,275]},{22:[1,276]},o($V9,[2,399],{107:277,19:[1,278]}),{22:[2,108]},{22:[2,109],114:279,115:213,116:214,117:215,118:216,119:217,120:218,121:219,122:220,123:221,124:222,125:223,126:224,127:$VU,129:$VV,133:$VW,136:$VX,142:$VY,199:$VZ,200:$V_,208:$V$,217:$V01,266:$V11,272:$V21},o($VI,[2,111]),o($VI,[2,112]),o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,115]),o($VI,[2,116]),o($VI,[2,117]),o($VI,[2,118]),o($VI,[2,119]),o($VI,[2,120]),o($VI,[2,121]),{19:[1,280]},{19:[1,281]},{19:[1,282]},{19:[1,283]},{18:284,28:30,185:285,308:$Va,311:$Vb,324:$V91},{18:291,19:[1,288],28:30,185:292,201:287,204:289,207:$Va1,308:$Va,311:$Vb,324:$V91},{19:[1,293]},{19:[1,294]},{18:296,28:30,267:295,268:297,269:[2,463],270:298,271:299,308:$Va,311:$Vb,317:$Vw,324:$Vx},{18:300,28:30,308:$Va,311:$Vb},{19:[1,301]},{19:[2,276],294:302,295:$VJ},o($Vo,[2,280]),{198:[2,282]},{28:164,30:163,100:$Vp,216:303,270:94,271:95,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},o($V9,[2,16]),o($V9,[2,374]),{22:[2,18]},o($V9,[2,20]),o($V9,[2,376]),{22:[2,23]},o($VC,[2,324]),{318:[2,331]},{18:172,28:174,308:$Va,311:$Vb,312:$VL,320:304,321:$VM},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:305,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:306,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},o($V61,[2,327]),{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:307,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},o($VC,[2,335]),o($V71,[2,294]),o($V71,[2,297],{270:94,271:95,30:163,292:179,216:180,99:182,28:183,291:308,47:$VN,100:$Vp,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx}),o($VC,[2,270]),o($VC,[2,300]),o($V9,[2,39]),o($V9,[2,388]),{22:[2,45]},{19:[2,43]},{19:[2,394]},o($V9,[2,25]),o($V9,[2,378]),{22:[2,27]},o($VC,[2,290]),o($VC,[2,291]),o($VC,[2,292]),o($V9,[2,379],{38:309,19:[1,310]}),o($V9,[2,37]),o($V9,[2,386]),{22:[2,29]},{22:[2,31]},{20:[1,311]},o($V9,[2,395],{104:312,19:[1,313]}),o($V9,[2,397],{106:314,19:[1,315]}),o($V9,[2,100]),o($V9,[2,400]),{22:[2,110]},{20:[1,316]},{20:[1,317]},{20:[1,318]},{20:[1,319]},{19:[1,320]},{19:[1,321]},{18:323,28:30,308:$Va,311:$Vb,326:322},{19:[1,324]},{20:[1,325]},{19:[2,192],112:[1,327],205:326,206:[2,435]},{18:291,28:30,185:292,204:328,308:$Va,311:$Vb,324:$V91},o($Vb1,[2,195]),o($Vb1,[2,196]),{20:[1,329]},{20:[1,330]},{19:[1,331]},{267:332,269:[2,464],270:298,271:299,317:$Vw,324:$Vx},{269:[1,333]},{19:[2,253]},{19:[2,254]},{19:[1,334]},{20:[1,335]},{19:[2,277]},{198:[2,283],295:$V31,298:336},{295:$V51,318:[2,332],323:337},o($V61,[2,325]),o($V61,[2,326]),o($V61,[2,328]),o($V71,[2,295],{305:338,295:$V81}),o($V9,[2,28]),o($V9,[2,380]),{18:340,28:30,45:339,47:$Vc1,308:$Va,311:$Vb},o($V9,[2,96]),o($V9,[2,396]),o($V9,[2,98]),o($V9,[2,398]),{18:83,28:54,91:84,130:342,132:343,296:55,308:$Va,311:$Vb},{35:345,93:$Vz,95:$VA,97:$VB,134:344},{18:350,28:30,137:346,139:347,140:348,141:349,308:$Va,311:$Vb},{136:$Vd1,143:351,145:352,146:353,147:354,148:355,149:356,158:357,159:361,161:362,171:$Ve1,172:$Vf1,174:$Vg1,175:$Vh1,176:$Vi1,178:$Vj1},o($VI,[2,186]),o($VI,[2,187]),{325:[1,367]},{295:$Vk1,325:[2,337],327:368},o($VI,[2,188]),{18:291,28:30,185:292,201:371,202:370,204:289,207:$Va1,308:$Va,311:$Vb,324:$V91},{206:[1,372]},{206:[2,436]},{19:[2,194]},{18:375,28:30,209:373,211:374,308:$Va,311:$Vb},{18:378,28:30,218:376,220:377,308:$Va,311:$Vb},o($VI,[2,250]),{19:[1,379]},{18:380,28:30,308:$Va,311:$Vb},o($VI,[2,122]),{273:381,275:382,276:$Vl1,279:$Vm1,281:$Vn1},{198:[2,284]},{318:[2,333]},o($V71,[2,296]),{22:[1,386]},{19:[1,387]},{19:[1,388]},{22:[1,389]},{19:[1,390]},{22:[1,391]},{19:[1,392]},{22:[1,393]},{19:[1,394]},{19:[2,134],55:395,128:$Vy},o($VP,[2,137]),o($VP,[2,265],{296:55,92:108,90:109,32:110,28:111,91:112,56:396,58:397,54:398,61:$Vh,93:$Vc,95:$Vd,97:$Ve,311:$Vb}),{22:[1,399]},{19:[1,400]},{19:[2,141]},{19:[2,142]},{19:[2,143]},{18:401,28:30,308:$Va,311:$Vb},{19:[2,154],28:111,32:110,55:405,56:406,58:407,90:109,91:112,92:108,93:$Vc,95:$Vd,97:$Ve,128:$Vy,165:[1,404],166:[1,402],167:403,296:55,311:$Vb},o($Vl,[2,165]),{177:[1,408],179:[1,409]},o($Vl,[2,167]),{18:410,28:30,308:$Va,311:$Vb},{18:411,28:30,308:$Va,311:$Vb},o($Vl,[2,163]),{173:[1,412]},o($Vl,[2,161]),{173:[1,413]},o([19,112,128,166,206,311],[2,336]),{325:[2,338]},{18:414,28:30,308:$Va,311:$Vb},{22:[1,415]},{19:[1,416]},{19:[2,193]},{22:[1,417]},{19:[1,418]},{19:[2,200],111:[1,419]},{22:[1,420]},{19:[1,421]},{19:[2,214],111:[1,422]},o($VI,[2,251]),{267:423,270:298,271:299,317:$Vw,324:$Vx},{22:[1,424]},{22:[2,259],273:425,275:382,276:$Vl1,279:$Vm1,281:$Vn1},{19:[1,426]},{19:[1,427]},{19:[1,428]},o($VT,[2,383],{46:429,19:[1,430]}),{18:340,22:[2,33],28:30,45:431,47:$Vc1,308:$Va,311:$Vb},{18:340,22:[2,34],28:30,45:432,47:$Vc1,308:$Va,311:$Vb},o($VI,[2,401],{131:433,19:[1,434]}),{18:83,22:[2,126],28:54,91:84,130:435,132:343,296:55,308:$Va,311:$Vb},o($VI,[2,403],{135:436,19:[1,437]}),{22:[2,129],35:345,93:$Vz,95:$VA,97:$VB,134:438},o($VI,[2,405],{138:439,19:[1,440]}),{18:350,22:[2,132],28:30,137:441,139:347,140:348,141:349,308:$Va,311:$Vb},{19:[2,135]},o($VP,[2,266]),o($VP,[2,477],{92:108,32:110,288:442,56:443,93:$Vc,95:$Vd,97:$Ve}),o($VQ,[2,479],{296:55,90:109,28:111,91:112,289:444,58:445,311:$Vb}),o($VI,[2,407],{144:446,19:[1,447]}),{22:[2,139],136:$Vd1,143:448,145:352,146:353,147:354,148:355,149:356,158:357,159:361,161:362,171:$Ve1,172:$Vf1,174:$Vg1,175:$Vh1,176:$Vi1,178:$Vj1},{19:[2,144],28:111,55:449,58:450,90:109,91:112,128:$Vy,129:$Vo1,151:451,154:452,166:$Vp1,180:454,183:455,184:[1,456],186:457,187:[1,458],188:[1,459],296:55,311:$Vb},{18:461,28:30,308:$Va,311:$Vb},{19:[2,156]},{18:462,28:30,308:$Va,311:$Vb},{19:[2,158]},{19:[2,427],55:464,128:$Vy,168:463},o($VP,[2,429],{92:108,32:110,169:465,56:466,93:$Vc,95:$Vd,97:$Ve}),o($Vl,[2,166]),o($Vl,[2,168]),o($Vq1,[2,421],{160:467,182:468,129:$Vr1}),o($Vq1,[2,423],{162:470,182:472,129:$Vr1,163:[1,471]}),o($Vl,[2,164]),o($Vl,[2,162]),{295:$Vk1,325:[2,339],327:473},o($VI,[2,433],{203:474,19:[1,475]}),{18:291,22:[2,190],28:30,185:292,201:371,202:476,204:289,207:$Va1,308:$Va,311:$Vb,324:$V91},o($VI,[2,437],{210:477,19:[1,478]}),{20:[1,479]},{18:480,28:30,308:$Va,311:$Vb},o($VI,[2,439],{219:481,19:[1,482]}),{20:[1,483]},{18:484,28:30,308:$Va,311:$Vb},{19:[1,485]},o($VI,[2,465],{274:486,19:[1,487]}),{22:[2,260]},{20:[1,488]},{20:[1,489]},{20:[1,490]},o($VT,[2,32]),o($VT,[2,384]),{22:[2,35]},{22:[2,36]},o($VI,[2,125]),o($VI,[2,402]),{22:[2,127]},o($VI,[2,128]),o($VI,[2,404]),{22:[2,130]},o($VI,[2,131]),o($VI,[2,406]),{22:[2,133]},o($VP,[2,267]),o($VP,[2,478]),o($VP,[2,481],{92:108,32:110,290:491,56:492,93:$Vc,95:$Vd,97:$Ve}),o($VQ,[2,480]),o($VI,[2,138]),o($VI,[2,408]),{22:[2,140]},{19:[2,145]},{19:[2,409],55:494,128:$Vy,150:493},o($VP,[2,411],{296:55,90:109,28:111,91:112,152:495,58:496,311:$Vb}),o($Vs1,[2,415],{155:497,151:498,166:$Vp1}),{18:499,28:30,308:$Va,311:$Vb},{28:501,181:500,304:$Vt1,308:$Vu1,311:$Vb},o($Vv1,[2,171]),{18:505,28:30,185:504,308:$Va,311:$Vb,324:$V91},o($Vv1,[2,173]),o($Vw1,[2,174]),{189:[1,506]},{28:183,30:163,47:$VN,69:$Vx1,99:182,100:$Vp,190:507,197:$Vy1,216:180,270:94,271:95,291:514,292:179,300:511,301:512,302:510,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,329:508,330:509,332:$Vz1,335:$VA1},{19:[2,155],28:111,32:110,55:405,56:406,58:407,90:109,91:112,92:108,93:$Vc,95:$Vd,97:$Ve,128:$Vy,167:518,296:55,311:$Vb},{19:[2,152],166:[1,519]},{19:[2,159]},{19:[2,428]},{19:[2,431],55:521,128:$Vy,170:520},o($VP,[2,430]),o($Vq1,[2,149]),o($Vq1,[2,422]),{28:183,30:163,47:$VN,69:$Vx1,99:182,100:$Vp,190:522,197:$Vy1,216:180,270:94,271:95,291:514,292:179,300:511,301:512,302:510,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,329:508,330:509,332:$Vz1,335:$VA1},o($Vq1,[2,150]),{18:523,28:30,308:$Va,311:$Vb},o($Vq1,[2,424]),{325:[2,340]},o($VI,[2,189]),o($VI,[2,434]),{22:[2,191]},o($VI,[2,197]),o($VI,[2,438]),{18:528,28:30,212:524,213:525,214:526,215:527,308:$Va,311:$Vb},{19:[2,201]},o($VI,[2,211]),o($VI,[2,440]),{221:529,222:530,227:[1,531]},{19:[2,215]},o($VI,[2,252]),o($VI,[2,255]),o($VI,[2,466]),{193:$VB1,277:532,283:533,286:$VC1},{193:$VB1,277:536,283:533,286:$VC1},{193:$VB1,277:537,283:533,286:$VC1},o($VP,[2,268]),o($VP,[2,482]),{19:[2,146]},{19:[2,410]},{19:[2,413],55:539,128:$Vy,153:538},o($VP,[2,412]),o($VP,[2,417],{296:55,90:109,28:111,91:112,156:540,58:541,311:$Vb}),o($Vs1,[2,416]),o($Vs1,[2,183]),o($Vv1,[2,169],{182:542,129:$Vr1}),o($VD1,[2,302]),o($VD1,[2,303]),o($VD1,[2,304]),o($Vv1,[2,172]),o($Vv1,[2,178],{186:543,129:$Vo1}),o($Vw1,[2,175]),o($Vv1,[2,182]),o($Vq1,[2,343],{342:544,343:545,344:[1,546],345:[1,547]}),o($Vq1,[2,344]),o($Vq1,[2,345]),o($VE1,[2,346]),o($VE1,[2,347]),{28:183,30:163,47:$VN,99:182,100:$Vp,197:$Vy1,216:180,270:94,271:95,291:549,292:179,300:511,301:512,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,329:548,332:$Vz1},{112:$VF1,207:$VG1,251:$VH1,256:$VI1,263:$VJ1,269:$VK1,331:$VL1,332:$VM1,334:[1,550],336:$VN1,337:$VO1,338:$VP1,339:$VQ1,340:$VR1,341:$VS1},{271:565,324:$Vx},{271:566,324:$Vx},{197:[1,567]},{19:[2,157]},{18:568,28:30,308:$Va,311:$Vb},{19:[2,160]},{19:[2,432]},o($Vq1,[2,176]),o($Vq1,[2,425],{164:569,182:570,129:$Vr1}),{22:[1,571]},{19:[1,572]},{19:[2,204],129:[1,575],195:[1,573],196:[1,574]},{19:[2,205]},o($VT1,[2,206]),{22:[1,576]},o($VU1,[2,441],{223:577,232:578,230:579,231:[1,580]}),{19:[1,581]},{22:[1,582]},{22:[2,261],193:$VB1,277:583,283:533,286:$VC1},{28:183,30:163,47:$VN,69:$Vx1,99:182,100:$Vp,190:584,197:$Vy1,216:180,270:94,271:95,291:514,292:179,300:511,301:512,302:510,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,329:508,330:509,332:$Vz1,335:$VA1},{19:[1,585]},{22:[1,586]},{22:[1,587]},{19:[2,147]},{19:[2,414]},{19:[2,419],55:589,128:$Vy,157:588},o($VP,[2,418]),o($Vv1,[2,170]),o($Vv1,[2,179]),o($Vq1,[2,369]),{28:183,30:163,47:$VN,99:182,100:$Vp,197:$Vy1,216:180,270:94,271:95,291:549,292:179,300:511,301:512,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,329:590,332:$Vz1},o($VV1,[2,371]),o($VV1,[2,372]),{198:[1,591]},{112:$VF1,207:$VG1,251:$VH1,256:$VI1,263:$VJ1,269:$VK1,331:$VL1,332:$VM1,336:$VN1,337:$VO1,338:$VP1,339:$VQ1,340:$VR1,341:$VS1},{28:71,47:$Vi,94:592,96:68,99:70,100:$Vj,304:$Vk,311:$Vb},o($VE1,[2,349]),{269:[1,594],331:[1,593]},{332:[1,596],333:[1,595]},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:597,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:598,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:599,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:600,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:601,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:602,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:603,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:604,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:605,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:606,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:607,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{334:[1,608]},{334:[1,609]},{28:183,30:163,47:$VN,99:182,100:$Vp,197:$Vy1,216:180,270:94,271:95,291:549,292:179,300:511,301:512,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx,329:610,332:$Vz1},{19:[2,153]},o($Vq1,[2,151]),o($Vq1,[2,426]),{18:375,19:[1,611],28:30,209:612,211:374,308:$Va,311:$Vb},{18:528,22:[2,202],28:30,212:613,213:525,214:526,215:527,308:$Va,311:$Vb},o($VT1,[2,207]),{197:[1,614]},{18:83,28:54,91:84,132:615,296:55,308:$Va,311:$Vb},{18:378,19:[1,616],28:30,218:617,220:377,308:$Va,311:$Vb},o($VW1,[2,443],{224:618,235:619,233:620,234:[1,621]}),o($VU1,[2,442]),{28:501,181:622,304:$Vt1,308:$Vu1,311:$Vb},o($Vw1,[2,218]),{20:[1,623]},o($VX1,[2,467],{278:624,19:[1,625]}),{22:[2,262]},{19:[1,626]},{20:[1,627]},o($VX1,[2,469],{280:628,19:[1,629]}),o($VX1,[2,471],{282:630,19:[1,631]}),{19:[2,148]},{19:[2,420]},o($Vq1,[2,370]),o($VE1,[2,348]),o($Vq1,[2,354]),o($VE1,[2,350]),{28:183,30:163,47:$VN,99:182,100:$Vp,216:180,270:94,271:95,291:632,292:179,304:$Vk,306:$VO,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},o($VE1,[2,351]),{333:[1,633]},o($VE1,[2,357]),o($VE1,[2,358]),o($VE1,[2,359]),o($VE1,[2,360]),o($VE1,[2,361]),o($VE1,[2,362]),o($VE1,[2,363]),o($VE1,[2,365]),o($VE1,[2,366]),o($VE1,[2,367]),o($VE1,[2,368]),{28:71,47:$Vi,94:634,96:68,99:70,100:$Vj,304:$Vk,311:$Vb},{28:71,47:$Vi,94:635,96:68,99:70,100:$Vj,304:$Vk,311:$Vb},{198:[1,636]},{22:[2,198]},{22:[2,199]},{22:[2,203]},{28:164,30:163,100:$Vp,216:637,270:94,271:95,308:$Vq,311:$Vb,312:$Vr,313:$Vs,314:$Vt,315:$Vu,316:$Vv,317:$Vw,324:$Vx},{19:[2,209],195:[1,638]},{22:[2,212]},{22:[2,213]},o($VW1,[2,445],{225:639}),o($VW1,[2,444]),{19:[1,640]},{19:[2,220]},{19:[1,641]},{28:501,181:644,228:642,261:643,262:$VY1,263:$VZ1,304:$Vt1,308:$Vu1,311:$Vb},o($VX1,[2,256]),o($VX1,[2,468]),{20:[1,647]},{284:[1,648]},o($VX1,[2,257]),o($VX1,[2,470]),o($VX1,[2,258]),o($VX1,[2,472]),o($VE1,[2,364]),o($VE1,[2,352]),o($Vq1,[2,355]),o($Vq1,[2,356]),o($VE1,[2,353]),{198:[1,649]},{19:[2,210]},{22:[2,447],226:650,238:653,239:[1,655],240:651,257:652,258:[1,654]},{20:[1,656]},o($VU1,[2,219]),{22:[1,657]},{19:[1,658]},{19:[2,245]},{19:[2,246],265:659,346:[1,660]},{19:[2,247],264:661,346:[1,662]},{284:[1,663]},{22:[1,664]},o($VT1,[2,208]),{22:[2,216]},o($VW1,[2,446]),{22:[2,448]},{18:666,19:[1,665],28:30,308:$Va,311:$Vb},{19:[1,667]},o([19,308,311],[2,222]),{28:501,181:669,236:668,304:$Vt1,308:$Vu1,311:$Vb},o($V_1,[2,449],{229:670,19:[1,671]}),{22:[2,243],28:501,181:644,228:672,261:643,262:$VY1,263:$VZ1,304:$Vt1,308:$Vu1,311:$Vb},{19:[2,249],346:[1,673]},o($V$1,[2,461]),{19:[2,248],346:[1,674]},o($V$1,[2,459]),{22:[1,675]},o($V02,[2,475],{287:676,19:[1,677]}),{20:[1,678]},{19:[1,679]},{20:[1,680]},{22:[1,681]},{19:[1,682]},o($V_1,[2,217]),o($V_1,[2,450]),{22:[2,244]},o($V$1,[2,462]),o($V$1,[2,460]),o($V02,[2,473],{285:683,19:[1,684]}),o($V02,[2,264]),o($V02,[2,476]),{28:501,181:687,241:685,244:686,304:$Vt1,308:$Vu1,311:$Vb},{20:[1,688]},{18:83,28:54,91:84,132:690,259:689,296:55,308:$Va,311:$Vb},o($VW1,[2,451],{237:691,19:[1,692]}),{22:[2,305],28:501,181:669,236:693,304:$Vt1,308:$Vu1,311:$Vb},o($V02,[2,263]),o($V02,[2,474]),{22:[1,694]},{19:[1,695]},{19:[2,227],245:696,246:697,247:[1,698],248:[1,699],249:[1,700],250:[1,701],251:[1,702],252:[1,703],253:[1,704],254:[1,705],255:[1,706],256:[1,707]},{28:501,181:687,241:708,244:686,304:$Vt1,308:$Vu1,311:$Vb},{22:[1,709]},{19:[1,710]},o($VW1,[2,221]),o($VW1,[2,452]),{22:[2,306]},o($VW1,[2,453],{242:711,19:[1,712]}),{22:[2,225],28:501,181:687,241:713,244:686,304:$Vt1,308:$Vu1,311:$Vb},{19:[2,228]},{19:[2,229]},{19:[2,230]},{19:[2,231]},{19:[2,232]},{19:[2,233]},{19:[2,234]},{19:[2,235]},{19:[2,236]},{19:[2,237]},{19:[2,238]},{19:[2,239]},{22:[1,714]},{19:[1,716],22:[2,457],260:715},{18:83,22:[2,241],28:54,91:84,132:690,259:717,296:55,308:$Va,311:$Vb},o($VW1,[2,223]),o($VW1,[2,454]),{22:[2,226]},o($VW1,[2,455],{243:718,19:[1,719]}),{22:[2,240]},{22:[2,458]},{22:[2,242]},o($VW1,[2,224]),o($VW1,[2,456])],
defaultActions: {2:[2,1],3:[2,2],26:[2,3],27:[2,5],81:[2,102],90:[2,21],104:[2,41],107:[2,136],158:[2,275],187:[2,42],188:[2,390],195:[2,85],197:[2,89],198:[2,86],199:[2,87],212:[2,108],238:[2,282],242:[2,18],245:[2,23],247:[2,331],260:[2,45],261:[2,43],262:[2,394],265:[2,27],272:[2,29],273:[2,31],279:[2,110],298:[2,253],299:[2,254],302:[2,277],327:[2,436],328:[2,194],336:[2,284],337:[2,333],353:[2,141],354:[2,142],355:[2,143],368:[2,338],372:[2,193],395:[2,135],403:[2,156],405:[2,158],425:[2,260],431:[2,35],432:[2,36],435:[2,127],438:[2,130],441:[2,133],448:[2,140],449:[2,145],463:[2,159],464:[2,428],473:[2,340],476:[2,191],480:[2,201],484:[2,215],493:[2,146],494:[2,410],518:[2,157],520:[2,160],521:[2,432],527:[2,205],538:[2,147],539:[2,414],568:[2,153],583:[2,262],588:[2,148],589:[2,420],611:[2,198],612:[2,199],613:[2,203],616:[2,212],617:[2,213],621:[2,220],638:[2,210],644:[2,245],650:[2,216],652:[2,448],672:[2,244],693:[2,306],696:[2,228],697:[2,229],698:[2,230],699:[2,231],700:[2,232],701:[2,233],702:[2,234],703:[2,235],704:[2,236],705:[2,237],706:[2,238],707:[2,239],713:[2,226],715:[2,240],716:[2,458],717:[2,242]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'customize', 'override', 'api', 'modifier', 'abstract']);

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'modifier.*': 'modifier.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',
        'modifier.$INDENT': 'modifier.block', 

        'override.entity': 'entity',       
        'abstract.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.use': 'entity.use', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.views': 'entity.views', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',

        'entity.views.$INDENT': 'entity.views.dataSet',
        'entity.views.dataSet.$INDENT': 'entity.views.dataSet.item',

        'entity.views.dataSet.item.select': 'entity.views.dataSet.item.select',
        'entity.views.dataSet.item.select.$INDENT': 'entity.views.dataSet.item.select.item',

        'entity.views.dataSet.item.countBy': 'entity.views.dataSet.item.countBy',

        'entity.views.dataSet.item.groupBy': 'entity.views.dataSet.item.groupBy',
        'entity.views.dataSet.item.groupBy.$INDENT': 'entity.views.dataSet.item.groupBy.item',

        'entity.views.dataSet.item.orderBy': 'entity.views.dataSet.item.orderBy',
        'entity.views.dataSet.item.orderBy.$INDENT': 'entity.views.dataSet.item.orderBy.item',        

        'entity.views.dataSet.item.options': 'entity.views.dataSet.item.options',
        'entity.views.dataSet.item.options.$INDENT': 'entity.views.dataSet.item.options.item',        
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'abstract': new Set(['entity']),    
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'use', 'has', 'associations', 'key', 'index', 'data', 'input', 'views', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo', 'has', 'one', 'many', 'refers', 'to', 'belongs']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),    
        'entity.views': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of', 'connected', 'by', 'on']),               
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),        
        
        'entity.input.inputSet.item': new Set(['optional', 'default', 'with']),     

        'entity.views.dataSet.item': new Set(['select', 'orderBy', 'countBy', 'groupBy', 'options']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ]),     

        // level 6
        'entity.views.dataSet.item.orderBy.item': new Set(['asc', 'desc', 'ASC', 'DESC', 'v', '^', 'ascend', 'descend']),      
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.use', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.views.dataSet', 2 ],
        [ 'entity.views.dataSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],  
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 2 ],
        [ 'entity.views.dataSet.item.countBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 2 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 2 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 2 ],        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'modifier.item', 2 ], 
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.views.dataSet', 1 ],
        [ 'entity.views.dataSet.item', 1 ],        
        [ 'entity.views.dataSet.item.select', 1 ],
        [ 'entity.views.dataSet.item.select.item', 1 ],
        [ 'entity.views.dataSet.item.countBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy', 1 ],
        [ 'entity.views.dataSet.item.groupBy.item', 1 ],
        [ 'entity.views.dataSet.item.orderBy', 1 ],
        [ 'entity.views.dataSet.item.orderBy.item', 1 ],
        [ 'entity.views.dataSet.item.options', 1 ],
        [ 'entity.views.dataSet.item.options.item', 1 ],        
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ],
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([      
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'float', 'int', 'integer', 'bigint', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);
    const TYPE_DEF_STATES = new Set([ 'type.item', 'type.block', 'entity.has', 'entity.input.inputSet.item' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.doNewline();

            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xt: 'Symbol', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (BUILTIN_TYPES.has(name)) {
                throw new Error(`Cannot use built-in type "${name}" as a custom type name at line: ${line}!`);
            }

            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            if (typeof name === 'object') {                
                this.define('entityTemplate', name.name, { ...value, templateArgs: name.args }, line);
            } else {
                this.define('entity', name, value, line);
            }
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        idOrFunctionToKV(value) {
            if (typeof value === 'string') {
                return { [value]: true };
            }

            return {
                [value.name]: value.args.length === 1 ? value.args[0] : value.args
            };
        }
    }

    // merge two objects
    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 20;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 19;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 22;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 19;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 19;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 315;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 308;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 308;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 308;
                        
break;
case 15:
                            state.matchAnyExceptNewline();

                            yy_.yytext = yy_.yytext.substring(2).trim();
                            yy_.yytext = state.isQuote(yy_.yytext) ? state.unquoteString(yy_.yytext, 1) : yy_.yytext 
                            return 128;
                        
break;
case 16:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 19;
                            }
                        
break;
case 17:/* skip whitespace, separate tokens */
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 100;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 313;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 312;
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 22:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 312;
                        
break;
case 23:
                            state.matchAnyExceptNewline();                            
                            return 321;  
                        
break;
case 24:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 25:      
                                state.matchAnyExceptNewline();

                                return 304;
                           
break;
case 26:      
                                state.matchAnyExceptNewline();

                                return 47;
                           
break;
case 27:      
                                state.matchAnyExceptNewline();

                                return 262;
                           
break;
case 28:      
                                state.matchAnyExceptNewline();
                                yy_.yytext = yy_.yytext.substring(1);
                                return 346;
                           
break;
case 29:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 316;
                           
break;
case 30:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 306;
                           
break;
case 31:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 32:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 314;
                           
break;
case 33:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 34:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 35:return yy_.yytext;   
break;
case 36:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    if (TYPE_DEF_STATES.has(state.lastState) && BUILTIN_TYPES.has(yy_.yytext)) {
                                        state.matchAnyExceptNewline();                                    
                                        return yy_.yytext;
                                    }

                                    state.matchAnyExceptNewline();                                    
                                }

                                return 311;
                            
break;
case 37:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(--(([^\n\/\r])|(\/[^\/]))*))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((:)(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))?:)((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))*\.\\\*))/,/^(?:(-(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)|((:)(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*)))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,37],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,37],"inclusive":true},"DEDENTED":{"rules":[9,37],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true},"REPARSE":{"rules":[36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}