/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,17],$V4=[1,15],$V5=[1,18],$V6=[1,21],$V7=[5,15,22,29,40,45,97,107],$V8=[1,27],$V9=[1,28],$Va=[17,53,86,88,90,105,106,121,123,149,156,160,165,167,169,178,190,235,282,284,285,304,321,326,332,333],$Vb=[2,316],$Vc=[1,51],$Vd=[122,321],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,86,88,90,121],$Vo=[2,66],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,93],$Vt=[1,94],$Vu=[1,95],$Vv=[1,96],$Vw=[1,97],$Vx=[1,98],$Vy=[1,99],$Vz=[1,100],$VA=[1,101],$VB=[1,107],$VC=[1,108],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[20,37,42],$VJ=[2,109],$VK=[1,112],$VL=[20,120,123,127,134,171,172,179,187,193,209],$VM=[17,333],$VN=[1,117],$VO=[17,20,86,88,90,93,106,121,167,190,229,230,243,251,255,266,300,302,304,321,327,333,336,337,339,341,342,343,344,345,346,347,348,351,352],$VP=[1,127],$VQ=[1,133],$VR=[17,121],$VS=[2,72],$VT=[1,142],$VU=[1,143],$VV=[1,144],$VW=[17,86,88,90,121,321],$VX=[1,146],$VY=[20,42],$VZ=[1,174],$V_=[1,167],$V$=[1,168],$V01=[1,169],$V11=[1,170],$V21=[1,171],$V31=[1,172],$V41=[1,173],$V51=[1,176],$V61=[1,175],$V71=[1,186],$V81=[304,327],$V91=[93,333],$Va1=[1,192],$Vb1=[17,20,93,106,121,167,190,229,230,243,251,255,266,300,302,304,321,327,333,336,337,339,341,342,343,344,345,346,347,348,351,352],$Vc1=[2,293],$Vd1=[1,195],$Ve1=[2,118],$Vf1=[1,200],$Vg1=[1,205],$Vh1=[1,204],$Vi1=[1,231],$Vj1=[1,257],$Vk1=[1,259],$Vl1=[1,265],$Vm1=[1,266],$Vn1=[1,269],$Vo1=[17,106,178],$Vp1=[1,299],$Vq1=[1,300],$Vr1=[17,20,86,88,90,93,121,167,229,230,243,251,266,321,351,352],$Vs1=[1,304],$Vt1=[1,311],$Vu1=[1,306],$Vv1=[1,305],$Vw1=[1,302],$Vx1=[1,303],$Vy1=[1,307],$Vz1=[1,308],$VA1=[1,309],$VB1=[1,310],$VC1=[1,312],$VD1=[1,313],$VE1=[1,314],$VF1=[1,315],$VG1=[1,337],$VH1=[1,338],$VI1=[1,339],$VJ1=[1,340],$VK1=[1,355],$VL1=[1,356],$VM1=[1,357],$VN1=[17,20,86,88,90,93,121,167,229,230,243,251,266,321],$VO1=[91,95,122,307,308,321,322,323,324,325,326,332,337],$VP1=[17,169],$VQ1=[2,121],$VR1=[17,122,321],$VS1=[17,121,167,321],$VT1=[1,437],$VU1=[17,86,88,90,121,167,321],$VV1=[1,441],$VW1=[17,121,321],$VX1=[1,467],$VY1=[229,230,266],$VZ1=[1,496],$V_1=[1,497],$V$1=[17,121,123,167,321],$V02=[17,20,86,88,90,121,167,229,230,243,251,266,321],$V12=[17,123],$V22=[1,521],$V32=[1,522],$V42=[1,520],$V52=[20,122,321],$V62=[1,550],$V72=[20,251],$V82=[20,229,230,251,266],$V92=[20,197,200,202],$Va2=[1,600],$Vb2=[61,91,95,122,307,308,321,322,323,324,325,326,332,337,340],$Vc2=[20,165,207],$Vd2=[1,632],$Ve2=[1,635],$Vf2=[20,247,248],$Vg2=[1,661],$Vh2=[17,20,165,247,248];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"customize_statement":12,"override_statement":13,"entity_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"customize":40,"customize_statement_option0":41,"views":42,"schema_views_block":43,"schema_views_option0":44,"type":45,"type_statement_item":46,"type_statement_block":47,"type_statement_option0":48,"type_base":49,"type_info_or_not":50,"type_modifiers_or_not":51,"field_comment_or_not":52,":":53,"types":54,"int_keyword":55,"number_keyword":56,"text_keyword":57,"bool_keyword":58,"binary_keyword":59,"datetime_keyword":60,"any":61,"enum":62,"array":63,"object_keyword":64,"int":65,"integer":66,"number":67,"float":68,"decimal":69,"text":70,"string":71,"bool":72,"boolean":73,"object":74,"json":75,"blob":76,"binary":77,"buffer":78,"datetime":79,"timestamp":80,"type_infos":81,"type_info":82,"narrow_function_call":83,"type_modifiers":84,"type_modifier":85,"|~":86,"type_modifier_validators":87,"|>":88,"identifier_or_general_function_call":89,"|=":90,"(":91,"literal_and_value_expression":92,")":93,"general_function_call":94,"REGEXP":95,"logical_expression":96,"override":97,"entity_statement_header":98,"entity_statement_block":99,"override_statement_option0":100,"entity_statement_option0":101,"entity_statement_header0":102,"entity_base_keywords":103,"identifier_or_string_list":104,"extends":105,"is":106,"entity":107,"entity_sub_items":108,"entity_sub_item":109,"with_features":110,"has_fields":111,"associations_statement":112,"key_statement":113,"index_statement":114,"input_statement":115,"data_statement":116,"code_statement":117,"interfaces_statement":118,"triggers_statement":119,"code":120,"--":121,"STRING":122,"with":123,"with_features_block":124,"with_features_option0":125,"feature_inject":126,"has":127,"has_fields_block":128,"has_fields_option0":129,"field_item":130,"field_item_body":131,"modifiable_field":132,"type_base_or_not":133,"associations":134,"associations_block":135,"associations_statement_option0":136,"association_item":137,"association_type_referee":138,"association_item_option0":139,"association_item_option1":140,"association_cases_block":141,"association_item_option2":142,"belongsTo":143,"association_item_option3":144,"association_item_option4":145,"refersTo":146,"association_item_option5":147,"association_item_option6":148,"of":149,"association_item_option7":150,"association_item_option8":151,"hasOne":152,"hasMany":153,"association_type_referer":154,"association_through":155,"connectedBy":156,"identifier_string_or_dotname":157,"association_extra_condition":158,"association_connection":159,"being":160,"array_of_identifier_or_string":161,"association_condition":162,"conditional_expression":163,"association_cases":164,"when":165,"association_as":166,"as":167,"association_qualifiers":168,"optional":169,"default":170,"key":171,"index":172,"index_item":173,"index_statement_block":174,"index_statement_option0":175,"index_item_body":176,"index_item_option0":177,"unique":178,"input":179,"input_statement_block":180,"input_statement_option0":181,"input_statement_def":182,"input_block":183,"input_block_item":184,"input_block_item_base":185,"input_block_item_with_spec":186,"data":187,"data_records":188,"data_statement_option0":189,"in":190,"inline_object":191,"inline_array":192,"triggers":193,"triggers_statement_block":194,"triggers_statement_option0":195,"triggers_operation":196,"onCreate":197,"triggers_operation_block":198,"triggers_operation_option0":199,"onCreateOrUpdate":200,"triggers_operation_option1":201,"onDelete":202,"triggers_operation_option2":203,"triggers_operation_item":204,"triggers_result_block":205,"triggers_operation_item_option0":206,"always":207,"triggers_operation_item_option1":208,"interface":209,"interfaces_statement_block":210,"interfaces_statement_option0":211,"interface_definition":212,"interface_definition_body":213,"interface_definition_option0":214,"accept_or_not":215,"implementation":216,"return_or_not":217,"accept_statement":218,"accept":219,"accept_param":220,"accept_block":221,"accept_statement_option0":222,"modifiable_param":223,"DOTNAME":224,"operation":225,"find_one_operation":226,"coding_block":227,"find_one_keywords":228,"findOne":229,"find":230,"article_keyword":231,"selection_inline_keywords":232,"case_statement":233,"cases_keywords":234,"by":235,"cases":236,"below":237,"case_condition_block":238,"case_statement_option0":239,"otherwise_statement":240,"case_statement_option1":241,"case_condition_item":242,"=>":243,"condition_as_result_expression":244,"otherwise_keywords":245,"stop_controll_flow_expression":246,"otherwise":247,"else":248,"return_expression":249,"throw_error_expression":250,"return":251,"modifiable_value":252,"throw":253,"gfc_param_list":254,"unless":255,"return_condition_block":256,"return_or_not_option0":257,"return_condition_item":258,"update_operation":259,"update":260,"where_expr":261,"create_operation":262,"create":263,"delete_operation":264,"delete":265,"do":266,"javascript":267,"assign_operation":268,"set":269,"identifier_or_member_access":270,"<-":271,"value":272,"variable_modifier_or_not":273,"entity_fields_selections":274,"->":275,"a":276,"an":277,"the":278,"one":279,"selection_attributive_keywords":280,"which":281,"where":282,"selection_keywords":283,"selectedBy":284,"selected":285,"group_by_or_not":286,"group":287,"identifier_string_or_dotname_list":288,"identifier_string_or_dotname_block":289,"group_by_or_not_option0":290,"having_or_not":291,"having":292,"order_by_or_not":293,"order":294,"order_by_list":295,"order_by_block":296,"order_by_or_not_option0":297,"order_by_clause":298,"ascend":299,"<":300,"descend":301,">":302,"order_by_list0":303,",":304,"skip_or_not":305,"offset":306,"INTEGER":307,"REFERENCE":308,"limit_or_not":309,"limit":310,"gfc_param0":311,"nfc_param_list":312,"nfc_param":313,"nfc_param_list0":314,"unary_expression":315,"binary_expression":316,"boolean_expression":317,"gfc_param_list0":318,"?":319,"identifier_string_or_dotname_list0":320,"NAME":321,"FLOAT":322,"BOOL":323,"SCRIPT":324,"SYMBOL":325,"{":326,"}":327,"kv_pairs":328,"kv_pair_item":329,"non_exist":330,"kv_pairs0":331,"[":332,"]":333,"identifier_or_string_list0":334,"simple_expression":335,"exists":336,"not":337,"null":338,"~":339,"all":340,">=":341,"<=":342,"==":343,"!=":344,"+":345,"-":346,"*":347,"/":348,"logical_expression_right":349,"logical_operators":350,"and":351,"or":352,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"customize",42:"views",45:"type",53:":",61:"any",62:"enum",63:"array",65:"int",66:"integer",67:"number",68:"float",69:"decimal",70:"text",71:"string",72:"bool",73:"boolean",74:"object",75:"json",76:"blob",77:"binary",78:"buffer",79:"datetime",80:"timestamp",86:"|~",88:"|>",90:"|=",91:"(",93:")",95:"REGEXP",97:"override",105:"extends",106:"is",107:"entity",120:"code",121:"--",122:"STRING",123:"with",127:"has",134:"associations",143:"belongsTo",146:"refersTo",149:"of",152:"hasOne",153:"hasMany",156:"connectedBy",160:"being",165:"when",167:"as",169:"optional",170:"default",171:"key",172:"index",178:"unique",179:"input",187:"data",190:"in",193:"triggers",197:"onCreate",200:"onCreateOrUpdate",202:"onDelete",205:"triggers_result_block",207:"always",209:"interface",219:"accept",224:"DOTNAME",229:"findOne",230:"find",235:"by",236:"cases",237:"below",243:"=>",247:"otherwise",248:"else",251:"return",253:"throw",255:"unless",260:"update",261:"where_expr",263:"create",265:"delete",266:"do",267:"javascript",269:"set",270:"identifier_or_member_access",271:"<-",273:"variable_modifier_or_not",275:"->",276:"a",277:"an",278:"the",279:"one",281:"which",282:"where",284:"selectedBy",285:"selected",287:"group",292:"having",294:"order",299:"ascend",300:"<",301:"descend",302:">",304:",",306:"offset",307:"INTEGER",308:"REFERENCE",310:"limit",319:"?",321:"NAME",322:"FLOAT",323:"BOOL",324:"SCRIPT",325:"SYMBOL",326:"{",327:"}",332:"[",333:"]",336:"exists",337:"not",338:"null",339:"~",340:"all",341:">=",342:"<=",343:"==",344:"!=",345:"+",346:"-",347:"*",348:"/",351:"and",352:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[12,6],[35,6],[43,2],[43,3],[10,3],[10,6],[46,5],[47,2],[47,3],[49,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[56,1],[57,1],[57,1],[58,1],[58,1],[64,1],[64,1],[59,1],[59,1],[59,1],[60,1],[60,1],[50,0],[50,1],[81,1],[81,2],[82,1],[82,1],[51,0],[51,1],[84,1],[84,2],[85,2],[85,2],[85,4],[85,2],[89,1],[89,1],[87,1],[87,1],[87,3],[13,3],[13,7],[14,2],[14,6],[98,1],[98,3],[103,1],[103,1],[102,2],[99,1],[99,2],[108,1],[108,2],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[117,3],[32,0],[32,3],[110,6],[124,2],[124,3],[111,6],[128,2],[128,3],[130,2],[52,0],[52,2],[131,1],[133,0],[133,1],[112,6],[135,2],[135,3],[137,6],[137,10],[137,7],[137,7],[137,9],[138,1],[138,1],[154,1],[154,1],[155,2],[155,3],[155,1],[155,2],[155,1],[158,2],[141,5],[159,2],[159,3],[164,3],[164,4],[162,2],[166,2],[168,1],[168,4],[113,3],[113,3],[114,3],[114,6],[174,2],[174,3],[173,1],[173,3],[176,1],[176,1],[115,6],[180,6],[180,6],[182,1],[182,3],[183,2],[183,3],[184,1],[184,1],[185,1],[185,2],[186,3],[186,4],[116,3],[116,4],[116,6],[188,1],[188,1],[119,6],[196,6],[196,6],[196,6],[194,1],[194,2],[198,1],[198,2],[204,7],[204,6],[118,6],[210,1],[210,2],[212,6],[213,3],[215,0],[215,1],[218,3],[218,6],[221,2],[221,3],[220,1],[220,5],[216,1],[216,2],[225,1],[225,1],[228,1],[228,2],[226,4],[226,3],[234,1],[234,2],[234,4],[233,6],[233,7],[242,4],[238,1],[238,2],[240,4],[240,4],[240,7],[245,1],[245,1],[246,1],[246,1],[244,2],[244,5],[249,2],[250,2],[250,2],[250,5],[217,0],[217,2],[217,7],[258,4],[258,4],[256,2],[256,3],[259,6],[262,5],[264,4],[227,3],[268,6],[274,1],[274,3],[231,1],[231,1],[231,1],[231,1],[280,2],[280,1],[280,1],[280,1],[283,1],[283,1],[283,2],[232,1],[232,1],[286,0],[286,4],[286,7],[291,0],[291,3],[293,0],[293,4],[293,7],[296,2],[296,3],[298,1],[298,2],[298,2],[298,2],[298,2],[295,1],[295,2],[303,2],[303,3],[305,0],[305,3],[305,3],[309,0],[309,3],[309,3],[132,4],[252,2],[223,1],[126,1],[126,1],[83,4],[312,1],[312,2],[314,2],[314,3],[313,1],[313,1],[92,1],[92,1],[92,1],[94,4],[254,1],[254,2],[318,2],[318,3],[318,1],[311,1],[311,1],[311,2],[311,1],[157,1],[157,1],[157,1],[289,2],[289,3],[288,1],[288,2],[320,2],[320,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[191,2],[191,3],[329,3],[329,2],[329,3],[330,0],[328,1],[328,2],[331,2],[331,3],[192,2],[192,3],[161,3],[104,1],[104,2],[334,2],[334,3],[272,1],[272,1],[163,1],[163,1],[163,1],[335,1],[335,1],[335,3],[315,2],[315,3],[315,3],[315,4],[315,4],[317,3],[317,4],[317,4],[316,3],[316,3],[316,3],[316,3],[316,3],[316,3],[316,3],[316,4],[316,3],[316,3],[316,3],[316,3],[96,2],[349,2],[350,1],[350,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[41,0],[41,1],[44,0],[44,1],[48,0],[48,1],[100,0],[100,1],[101,0],[101,1],[125,0],[125,1],[129,0],[129,1],[136,0],[136,1],[139,0],[139,1],[140,0],[140,1],[142,0],[142,1],[144,0],[144,1],[145,0],[145,1],[147,0],[147,1],[148,0],[148,1],[150,0],[150,1],[151,0],[151,1],[175,0],[175,1],[177,0],[177,1],[181,0],[181,1],[189,0],[189,1],[195,0],[195,1],[199,0],[199,1],[201,0],[201,1],[203,0],[203,1],[206,0],[206,1],[208,0],[208,1],[211,0],[211,1],[214,0],[214,1],[222,0],[222,1],[239,0],[239,1],[241,0],[241,1],[257,0],[257,1],[290,0],[290,1],[297,0],[297,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 30:
this.$ = { views: $$[$0-2] };
break;
case 31: case 112: case 124: case 144: case 154: case 165: case 197: case 235: case 265: case 310:
this.$ = [ $$[$0-1] ];
break;
case 32: case 113: case 125: case 155: case 166: case 198: case 236: case 266: case 311:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 35:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 38: case 76: case 93: case 94: case 142: case 336:
this.$ = $$[$0];
break;
case 39:
this.$ = { type: 'integer' };
break;
case 40:
this.$ = { type: 'number' }    ;
break;
case 41:
this.$ = { type: 'text' };
break;
case 42:
this.$ = { type: 'boolean' };
break;
case 43:
this.$ = { type: 'binary' };
break;
case 44:
this.$ = { type: 'datetime' };
break;
case 45:
this.$ = { type: 'any' };
break;
case 46:
this.$ = { type: 'enum' };
break;
case 47:
this.$ = { type: 'array' };
break;
case 48:
this.$ = { type: 'object' };
break;
case 49:
this.$ = { type: $$[$0] };
break;
case 69: case 95: case 117: case 190: case 335: case 337:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 70:
this.$ = { [$$[$0]]: true };
break;
case 71:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 73:
this.$ = { modifiers: $$[$0] };
break;
case 74: case 182: case 184: case 201: case 215: case 272: case 274: case 288: case 290: case 300: case 312: case 314: case 341: case 343:
this.$ = [ $$[$0] ];
break;
case 75: case 183: case 185: case 202: case 216: case 273: case 275: case 289: case 291: case 301: case 315: case 342: case 344:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 77:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 78:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 79:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 80:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 81:
this.$ = [$$[$0]];
break;
case 82:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 83:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 84:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 85:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 86:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 87:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 88:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 89:
this.$ = [ $$[$0], {} ];
break;
case 90:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 97:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 108:
this.$ = { code: $$[$0-1] };
break;
case 110:
this.$ = { comment: $$[$0-1] };
break;
case 111:
this.$ = { features: $$[$0-2] };
break;
case 114:
this.$ = { fields: $$[$0-2] };
break;
case 115:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 116:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 119:
this.$ = { comment: $$[$0] };
break;
case 123:
this.$ = { associations: $$[$0-2] };
break;
case 126:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 127:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 128: case 129:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 130:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 135:
this.$ = { by: $$[$0] }    ;
break;
case 136:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 137:
this.$ = { remoteField: $$[$0] }     ;
break;
case 138:
this.$ = { remoteField: $$[$0] }      ;
break;
case 139:
this.$ = { with: $$[$0] };
break;
case 140:
this.$ = { with: $$[$0] }    ;
break;
case 141:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 143:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 145:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 146:
this.$ = $$[$0];;
break;
case 147:
this.$ = { srcField: $$[$0] };
break;
case 148:
this.$ = { optional: true };
break;
case 149:
this.$ = { default: $$[$0-1] };
break;
case 150:
this.$ = { key: $$[$0-1] };
break;
case 151:
this.$ = { key: $$[$0-1] } ;
break;
case 152:
this.$ = { indexes: [$$[$0-1]] };
break;
case 153:
this.$ = { indexes: $$[$0-2] };
break;
case 157:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 158: case 159:
this.$ = { fields: $$[$0] };
break;
case 160:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 161:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 162:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 163: case 169:
this.$ = { name: $$[$0] };
break;
case 164:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 170:
this.$ = { name: $$[$0-1], optional: true };
break;
case 171:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 172:
this.$ = { ...$$[$0-3], spec: $$[$0-1], optional: true };
break;
case 173:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 174:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 175:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 178:
this.$ = { triggers: $$[$0-2] };
break;
case 179:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 180:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 181:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 186:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 187:
this.$ = { do: $$[$0-2] };
break;
case 188:
this.$ = { interfaces: $$[$0-2] };
break;
case 189:
this.$ = Object.assign({}, $$[$0]);
break;
case 191:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 192:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 195:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 196:
this.$ = { accept: $$[$0-2] };
break;
case 200:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 207:
this.$ = { $xt: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 208:
this.$ = { $xt: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 212:
this.$ = { $xt: 'cases', items: $$[$0-2] };
break;
case 213:
this.$ = { $xt: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 214:
this.$ = { $xt: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 217: case 218: case 329: case 339: case 340: case 352:
this.$ = $$[$0-1];
break;
case 219: case 225:
this.$ = $$[$0-2];
break;
case 226:
this.$ = { $xt: 'ReturnExpression', value: $$[$0] };
break;
case 227:
this.$ = { $xt: 'ThrowExpression', message: $$[$0] };
break;
case 228:
this.$ = { $xt: 'ThrowExpression', errorType: $$[$0] };
break;
case 229:
this.$ = { $xt: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 231:
 this.$ = { return: $$[$0-1] }; 
break;
case 232:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 233: case 234:
this.$ = { $xt: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 237:
 this.$ = { $xt: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 238:
 this.$ = { $xt: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 239:
 this.$ = { $xt: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 240:
this.$ = { $xt: 'DoStatement', do: $$[$0-1] };
break;
case 241:
 this.$ = { $xt: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 242:
this.$ = { entity: $$[$0] }     ;
break;
case 243:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 258:
this.$ = { groupBy: $$[$0-1] };
break;
case 259:
this.$ = { groupBy: $$[$0-2] };
break;
case 261:
this.$ = { having: $$[$0-1] };
break;
case 263:
this.$ = { orderBy: $$[$0-1] };
break;
case 264:
this.$ = { orderBy: $$[$0-2] };
break;
case 267:
this.$ = { field: $$[$0], ascend: true };
break;
case 268: case 269:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 270: case 271:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 277: case 278:
this.$ = { offset: $$[$0-1] };
break;
case 280: case 281:
this.$ = { limit: $$[$0-1] };
break;
case 282:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 283:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 287: case 297:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 293:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 298:
this.$ = [ $$[$0] ]    ;
break;
case 299:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 302: case 338:
this.$ = [];
break;
case 305:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 313:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 328:
this.$ = {}    ;
break;
case 330: case 332:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 331:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 346:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 353:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 354:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 355:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 356:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 357:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 358:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 359:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 360:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 361:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 362:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 365:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 367:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 368:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 369:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 370:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 371:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 372:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 373:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 374:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 375:
this.$ = { operator: 'and' };
break;
case 376:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,45:$V4,97:$V5,98:19,102:20,107:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,45:$V4,97:$V5,98:19,102:20,107:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,122:$V8,321:$V9},{17:[1,30],23:29,26:31,321:$V9},{16:34,17:[1,33],26:26,46:32,122:$V8,321:$V9},{16:35,26:26,122:$V8,321:$V9},{17:[1,36]},{98:37,102:20,107:$V6},{17:[1,38]},{17:[2,89],103:39,105:[1,40],106:[1,41]},{16:42,26:26,122:$V8,321:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,317]),o([17,20,27,53,86,88,90,91,93,105,106,121,123,149,156,160,165,167,169,178,190,229,230,235,243,251,255,266,282,284,285,300,302,304,321,326,327,332,333,336,337,339,341,342,343,344,345,346,347,348,351,352],[2,318]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{49:50,53:$Vc},{17:[1,52]},{18:[1,53]},{17:[1,54]},o($V7,[2,87],{18:[1,55]}),{16:57,26:26,104:56,122:$V8,321:$V9},o($Vd,[2,91]),o($Vd,[2,92]),o([17,105,106],[2,93]),o($V7,[2,13]),{16:59,19:58,26:26,122:$V8,321:$V9},o($V7,[2,17]),{23:61,24:60,26:31,321:$V9},{28:62,95:$Ve,122:$Vf,191:66,192:67,307:$Vg,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($V7,[2,33]),{16:34,26:26,46:75,47:74,122:$V8,321:$V9},o($Vn,$Vo,{50:76,81:77,82:78,26:79,83:80,321:$V9}),{16:92,26:26,54:81,55:82,56:83,57:84,58:85,59:86,60:87,61:$Vp,62:$Vq,63:$Vr,64:91,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,122:$V8,321:$V9},{18:[1,109]},o($VI,$VJ,{30:110,32:111,121:$VK}),o($V7,[2,85],{18:[1,113]}),o($VL,$VJ,{99:114,32:115,121:$VK}),{17:[2,90]},o($VM,[2,341],{334:116,304:$VN}),{20:[1,118]},{17:[1,119]},{20:[1,120]},{17:[1,121]},{17:[2,19]},o($VO,[2,319]),o($VO,[2,320]),o($VO,[2,321]),o($VO,[2,322]),o($VO,[2,323]),o($VO,[2,324]),o($VO,[2,325]),o($VO,[2,326]),o($VO,[2,327]),{16:125,26:126,122:$V8,307:$VP,321:$V9,327:[1,122],328:123,329:124},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:130,254:129,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,333:[1,128]},{20:[1,137]},{17:[1,138]},o($VR,$VS,{51:139,84:140,85:141,86:$VT,88:$VU,90:$VV}),o($Vn,[2,67]),o($Vn,[2,68],{82:78,26:79,83:80,81:145,321:$V9}),o($VW,[2,70],{91:$VX}),o($VW,[2,71]),o($VW,[2,38]),o($VW,[2,39]),o($VW,[2,40]),o($VW,[2,41]),o($VW,[2,42]),o($VW,[2,43]),o($VW,[2,44]),o($VW,[2,45]),o($VW,[2,46]),o($VW,[2,47]),o($VW,[2,48]),o($VW,[2,49]),o($VW,[2,50]),o($VW,[2,51]),o($VW,[2,52]),o($VW,[2,53]),o($VW,[2,54]),o($VW,[2,55]),o($VW,[2,56]),o($VW,[2,57]),o($VW,[2,58]),o($VW,[2,61]),o($VW,[2,62]),o($VW,[2,63]),o($VW,[2,64]),o($VW,[2,65]),o($VW,[2,59]),o($VW,[2,60]),o($VI,$VJ,{32:111,30:147,121:$VK}),{20:[1,148]},o($VY,[2,383],{33:149,36:150,37:[1,151]}),{122:[1,152]},o($VL,$VJ,{32:115,99:153,121:$VK}),{20:[1,154]},{20:[2,94],108:155,109:156,110:157,111:158,112:159,113:160,114:161,115:162,116:163,117:164,118:165,119:166,120:$VZ,123:$V_,127:$V$,134:$V01,171:$V11,172:$V21,179:$V31,187:$V41,193:$V51,209:$V61},o($VM,[2,342]),{16:177,26:26,122:$V8,321:$V9},o($V7,[2,377],{21:178,17:[1,179]}),{16:59,19:180,20:[2,15],26:26,122:$V8,321:$V9},o($V7,[2,379],{25:181,17:[1,182]}),{20:[2,20],23:61,24:183,26:31,321:$V9},o($VO,[2,328]),{327:[1,184]},{304:$V71,327:[2,334],331:185},{53:[1,187]},o($V81,[2,333],{330:188,53:$Vb}),{53:[1,189]},o($VO,[2,338]),{333:[1,190]},o($V91,[2,298],{318:191,304:$Va1}),o($Vb1,$VS,{84:140,85:141,51:193,86:$VT,88:$VU,90:$VV}),o($VO,[2,303]),o($VO,[2,304],{319:[1,194]}),o($VO,[2,306]),o($VO,[2,292]),o($VO,$Vc1,{91:$Vd1}),o($V7,[2,391],{48:196,17:[1,197]}),{16:34,20:[2,36],26:26,46:75,47:198,122:$V8,321:$V9},{17:$Ve1,52:199,121:$Vf1},o($VO,[2,73]),o($Vb1,[2,74],{85:141,84:201,86:$VT,88:$VU,90:$VV}),{26:207,87:202,89:203,91:$Vg1,94:206,95:$Vh1,321:$V9},{26:207,89:208,94:206,321:$V9},{26:207,89:210,91:[1,209],94:206,321:$V9},o($Vn,[2,69]),{26:213,28:135,95:$Ve,122:$Vf,191:66,192:67,307:$Vg,312:211,313:212,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{20:[1,214]},o($V7,[2,387],{41:215,17:[1,216]}),{20:[2,24],34:217,35:218,42:[1,219]},o($VY,[2,384]),{17:[1,220]},{17:[1,221]},{20:[1,222]},o($V7,[2,395],{101:223,17:[1,224]}),{20:[2,95]},{20:[2,96],108:225,109:156,110:157,111:158,112:159,113:160,114:161,115:162,116:163,117:164,118:165,119:166,120:$VZ,123:$V_,127:$V$,134:$V01,171:$V11,172:$V21,179:$V31,187:$V41,193:$V51,209:$V61},o($VL,[2,98]),o($VL,[2,99]),o($VL,[2,100]),o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,104]),o($VL,[2,105]),o($VL,[2,106]),o($VL,[2,107]),{17:[1,226]},{17:[1,227]},{17:[1,228]},{16:229,26:26,122:$V8,161:230,321:$V9,332:$Vi1},{16:235,17:[1,233],26:26,122:$V8,161:236,173:232,176:234,321:$V9,332:$Vi1},{17:[1,237]},{16:239,26:26,122:$V8,188:238,189:240,190:[2,427],191:241,192:242,321:$V9,326:$Vl,332:$Vm},{16:243,26:26,122:$V8,321:$V9},{17:[1,244]},{17:[1,245]},o($VM,[2,343],{334:246,304:$VN}),o($V7,[2,14]),o($V7,[2,378]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,380]),{20:[2,21]},o($VO,[2,329]),{327:[2,335]},{16:125,26:126,122:$V8,307:$VP,321:$V9,329:247},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:248,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($V81,[2,331]),{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:249,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($VO,[2,339]),o($V91,[2,299]),o($V91,[2,302],{191:66,192:67,311:131,313:132,94:134,28:135,26:136,252:250,95:$Ve,122:$Vf,307:$Vg,308:$VQ,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm}),o($VO,[2,283]),o($VO,[2,305]),{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:130,254:251,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($V7,[2,34]),o($V7,[2,392]),{20:[2,37]},{17:[2,35]},{122:[1,252]},o($VO,[2,75]),o($VO,[2,76]),o($VO,[2,82]),o($VO,[2,83]),{26:136,28:135,91:$Vj1,94:134,95:$Ve,96:253,122:$Vf,191:66,192:67,252:258,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:254,337:$Vk1},o($VO,[2,80]),o($VO,[2,81],{91:$Vd1}),o($VO,[2,77]),{26:136,28:135,61:$Vl1,92:260,94:134,95:$Ve,122:$Vf,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:261,316:262,317:263,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,337:$Vk1,340:$Vm1},o($VO,[2,79]),{93:[1,267]},{93:[2,288],304:$Vn1,314:268},o([93,304],$Vc1),o($V7,[2,381],{31:270,17:[1,271]}),o($V7,[2,29]),o($V7,[2,388]),{20:[2,23]},{20:[2,25]},{17:[1,272]},{18:[1,273]},o([20,37,42,120,123,127,134,171,172,179,187,193,209],[2,110]),o($V7,[2,393],{100:274,17:[1,275]}),o($V7,[2,88]),o($V7,[2,396]),{20:[2,97]},{18:[1,276]},{18:[1,277]},{18:[1,278]},{17:[1,279]},{17:[1,280]},{16:57,26:26,104:281,122:$V8,321:$V9},{17:[1,282]},{18:[1,283]},{17:[2,156],106:[1,285],177:284,178:[2,423]},o($Vo1,[2,158]),o($Vo1,[2,159]),{18:[1,286]},{17:[1,287]},{188:288,190:[2,428],191:241,192:242,326:$Vl,332:$Vm},{190:[1,289]},{17:[2,176]},{17:[2,177]},{17:[1,290]},{18:[1,291]},{18:[1,292]},o($VM,[2,344]),{304:$V71,327:[2,336],331:293},o($V81,[2,330]),o($V81,[2,332]),o($V91,[2,300],{318:294,304:$Va1}),{93:[1,295]},{17:[2,119]},{93:[1,296]},{349:297,350:298,351:$Vp1,352:$Vq1},o($Vr1,[2,350]),o($Vr1,[2,351]),{26:136,28:135,91:$Vj1,94:134,95:$Ve,122:$Vf,191:66,192:67,252:258,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:301,337:$Vk1},{106:$Vs1,190:$Vt1,300:$Vu1,302:$Vv1,336:$Vw1,337:$Vx1,341:$Vy1,342:$Vz1,343:$VA1,344:$VB1,345:$VC1,346:$VD1,347:$VE1,348:$VF1},{91:[1,316]},{93:[1,317]},{93:[2,294]},{93:[2,295]},{93:[2,296]},{106:$Vs1,190:$Vt1,300:$Vu1,302:$Vv1,336:$Vw1,337:$Vx1,339:[1,318],341:$Vy1,342:$Vz1,343:$VA1,344:$VB1,345:$VC1,346:$VD1,347:$VE1,348:$VF1},{192:319,332:$Vm},{192:320,332:$Vm},o([17,86,88,90,121,169,321],[2,287]),{93:[2,289]},{26:213,28:135,95:$Ve,122:$Vf,191:66,192:67,307:$Vg,313:321,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($V7,[2,22]),o($V7,[2,382]),{18:[1,322]},{16:324,26:26,38:323,122:$V8,321:$V9},o($V7,[2,86]),o($V7,[2,394]),{26:327,83:328,124:325,126:326,321:$V9},{16:333,26:26,122:$V8,128:329,130:330,131:331,132:332,321:$V9},{135:334,137:335,138:336,143:$VG1,146:$VH1,152:$VI1,153:$VJ1},o($VL,[2,150]),o($VL,[2,151]),{333:[1,341]},o($VL,[2,152]),{16:235,26:26,122:$V8,161:236,173:343,174:342,176:234,321:$V9,332:$Vi1},{178:[1,344]},{178:[2,424]},{16:347,26:26,122:$V8,180:345,182:346,321:$V9},o($VL,[2,173]),{17:[1,348]},{16:349,26:26,122:$V8,321:$V9},o($VL,[2,108]),{16:352,26:26,122:$V8,210:350,212:351,321:$V9},{194:353,196:354,197:$VK1,200:$VL1,202:$VM1},{327:[2,337]},o($V91,[2,301]),o($VO,[2,297]),o($VO,[2,84]),o($VN1,[2,373]),{26:136,28:135,91:$Vj1,94:134,95:$Ve,122:$Vf,191:66,192:67,252:258,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:358,337:$Vk1},o($VO1,[2,375]),o($VO1,[2,376]),{93:[1,359]},o($Vr1,[2,353]),{190:[1,361],336:[1,360]},{337:[1,363],338:[1,362]},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:364,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:365,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:366,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:367,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:368,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:369,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:370,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:371,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:372,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:373,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:374,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{26:136,28:135,91:$Vj1,94:134,95:$Ve,122:$Vf,191:66,192:67,252:258,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:375,337:$Vk1},o($VO,[2,78]),{26:207,87:376,89:203,91:$Vg1,94:206,95:$Vh1,321:$V9},{339:[1,377]},{339:[1,378]},{93:[2,290],304:$Vn1,314:379},{16:381,26:26,43:380,122:$V8,321:$V9},{20:[1,382]},{17:[1,383]},{20:[1,384]},{17:[1,385]},o($VP1,[2,285],{91:$VX}),o($VP1,[2,286]),{20:[1,386]},{17:[1,387]},{17:$Ve1,52:388,121:$Vf1},o($VR,[2,120]),o($VW,$VQ1,{133:389,49:390,53:$Vc}),{20:[1,391]},{17:[1,392]},{16:393,17:[1,394],26:26,122:$V8,321:$V9},{16:395,26:26,122:$V8,321:$V9},{16:396,26:26,122:$V8,321:$V9},o($VR1,[2,131]),o($VR1,[2,132]),o([17,106,121,167,178,321],[2,340]),{20:[1,397]},{17:[1,398]},{17:[2,157]},{20:[1,399]},{17:[1,400]},{17:[2,163],105:[1,401]},o($VL,[2,174]),{188:402,191:241,192:242,326:$Vl,332:$Vm},{20:[1,403]},{16:352,20:[2,189],26:26,122:$V8,210:404,212:351,321:$V9},{17:[1,405]},{20:[1,406]},{20:[2,182],194:407,196:354,197:$VK1,200:$VL1,202:$VM1},{17:[1,408]},{17:[1,409]},{17:[1,410]},o($VN1,[2,374]),o($Vr1,[2,352]),o($Vr1,[2,354]),{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:411,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($Vr1,[2,355]),{338:[1,412]},o($Vr1,[2,361]),o($Vr1,[2,362]),o($Vr1,[2,363]),o($Vr1,[2,364]),o($Vr1,[2,365]),o($Vr1,[2,366]),o($Vr1,[2,367]),o($Vr1,[2,369]),o($Vr1,[2,370]),o($Vr1,[2,371]),o($Vr1,[2,372]),{93:[1,413]},o($VN1,[2,358]),{26:207,87:414,89:203,91:$Vg1,94:206,95:$Vh1,321:$V9},{26:207,87:415,89:203,91:$Vg1,94:206,95:$Vh1,321:$V9},{93:[2,291]},{20:[1,416]},{17:[1,417]},o($VY,[2,385],{39:418,17:[1,419]}),{16:324,20:[2,27],26:26,38:420,122:$V8,321:$V9},o($VL,[2,397],{125:421,17:[1,422]}),{20:[2,112],26:327,83:328,124:423,126:326,321:$V9},o($VL,[2,399],{129:424,17:[1,425]}),{16:333,20:[2,115],26:26,122:$V8,128:426,130:330,131:331,132:332,321:$V9},{17:[2,117]},o($Vn,$Vo,{81:77,82:78,26:79,83:80,50:427,321:$V9}),o($VW,[2,122]),o($VL,[2,401],{136:428,17:[1,429]}),{20:[2,124],135:430,137:335,138:336,143:$VG1,146:$VH1,152:$VI1,153:$VJ1},o($VS1,[2,403],{139:431,155:432,159:434,162:436,123:$VT1,156:[1,433],160:[1,435]}),{18:[1,438]},o($VU1,[2,409],{144:439,158:440,123:$VV1}),o($VU1,[2,413],{147:442,158:444,123:$VV1,149:[1,443]}),o($VL,[2,421],{175:445,17:[1,446]}),{16:235,20:[2,154],26:26,122:$V8,161:236,173:343,174:447,176:234,321:$V9,332:$Vi1},o($VL,[2,425],{181:448,17:[1,449]}),{18:[1,450]},{16:451,26:26,122:$V8,321:$V9},{17:[1,452]},o($VL,[2,441],{211:453,17:[1,454]}),{20:[2,190]},{18:[1,455]},o($VL,[2,429],{195:456,17:[1,457]}),{20:[2,183]},{18:[1,458]},{18:[1,459]},{18:[1,460]},o($Vr1,[2,368]),o($Vr1,[2,356]),o($Vr1,[2,357]),o($VN1,[2,359]),o($VN1,[2,360]),{17:[1,462],20:[2,389],44:461},{16:381,20:[2,31],26:26,43:463,122:$V8,321:$V9},o($VY,[2,26]),o($VY,[2,386]),{20:[2,28]},o($VL,[2,111]),o($VL,[2,398]),{20:[2,113]},o($VL,[2,114]),o($VL,[2,400]),{20:[2,116]},o($VR,$VS,{84:140,85:141,51:464,86:$VT,88:$VU,90:$VV}),o($VL,[2,123]),o($VL,[2,402]),{20:[2,125]},o($VW1,[2,405],{140:465,166:466,167:$VX1}),o($VS1,[2,404]),{26:469,122:[1,470],157:468,224:[1,471],321:$V9},o($VS1,[2,137]),{16:473,26:26,122:$V8,161:472,321:$V9,332:$Vi1},o($VS1,[2,139]),{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:474,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{16:478,26:26,122:$V8,321:$V9},o($VW,[2,411],{145:479,166:480,167:$VX1}),o($VU1,[2,410]),{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:481,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},o($VW,[2,415],{148:482,166:483,167:$VX1}),{16:484,26:26,122:$V8,321:$V9},o($VU1,[2,414]),o($VL,[2,153]),o($VL,[2,422]),{20:[2,155]},o($VL,[2,160]),o($VL,[2,426]),{16:489,26:26,122:$V8,183:485,184:486,185:487,186:488,321:$V9},{17:[2,164]},o($VL,[2,175]),o($VL,[2,188]),o($VL,[2,442]),o($VY1,[2,193],{213:490,215:491,218:492,219:[1,493]}),o($VL,[2,178]),o($VL,[2,430]),{165:$VZ1,198:494,204:495,207:$V_1},{165:$VZ1,198:498,204:495,207:$V_1},{165:$VZ1,198:499,204:495,207:$V_1},{20:[2,30]},{20:[2,390]},{20:[2,32]},o($VR,[2,282]),o($VR,$Vo,{81:77,82:78,26:79,83:80,50:500,321:$V9}),o($VW1,[2,406]),{16:501,26:26,122:$V8,321:$V9},o($VS1,[2,135],{158:502,123:$VV1}),o($V$1,[2,307]),o($V$1,[2,308]),o($V$1,[2,309]),o($VS1,[2,138]),o($VS1,[2,142],{162:503,123:$VT1}),o($VS1,[2,146]),o($V02,[2,347],{349:297,350:298,351:$Vp1,352:$Vq1}),o($V02,[2,348]),o($V02,[2,349]),{53:[1,505],141:504},o($Vn,$Vo,{81:77,82:78,26:79,83:80,50:506,321:$V9}),o($VW,[2,412]),o($VU1,[2,140]),o($Vn,$Vo,{81:77,82:78,26:79,83:80,50:507,321:$V9}),o($VW,[2,416]),o($VU1,[2,417],{150:508,158:509,123:$VV1}),{20:[1,510]},{17:[1,511]},{17:[2,167],123:[1,512]},{17:[2,168]},o($V12,[2,169],{169:[1,513]}),{20:[1,514]},{216:515,225:516,226:517,227:518,228:519,229:$V22,230:$V32,266:$V42},o($VY1,[2,194]),{16:526,17:[1,524],26:26,122:$V8,132:527,220:523,223:525,321:$V9},{20:[1,528]},{20:[2,184],165:$VZ1,198:529,204:495,207:$V_1},{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:530,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{17:[1,531]},{20:[1,532]},{20:[1,533]},{17:$Ve1,52:534,121:$Vf1},o($VW,[2,147]),o($VS1,[2,136]),o($VS1,[2,143]),o($VW1,[2,407],{142:535,166:536,167:$VX1}),{17:[1,537]},o($VR,$VS,{84:140,85:141,51:538,86:$VT,88:$VU,90:$VV}),o($VR,$VS,{84:140,85:141,51:539,86:$VT,88:$VU,90:$VV}),o($VW,[2,419],{151:540,166:541,167:$VX1}),o($VU1,[2,418]),{16:347,17:[1,542],26:26,122:$V8,180:543,182:346,321:$V9},{16:489,20:[2,165],26:26,122:$V8,183:544,184:486,185:487,186:488,321:$V9},{26:327,83:328,126:545,321:$V9},o($V12,[2,170]),o($V52,[2,443],{214:546,17:[1,547]}),{20:[2,230],217:548,249:549,251:$V62},o($V72,[2,201],{225:516,226:517,227:518,228:519,216:551,229:$V22,230:$V32,266:$V42}),o($V82,[2,203]),o($V82,[2,204]),{16:552,26:26,122:$V8,321:$V9},{267:[1,553]},o($Vd,[2,205]),{231:554,276:[1,555],277:[1,556],278:[1,557],279:[1,558]},{17:[1,559]},{18:[1,560]},{17:[2,199]},o([17,86,88,90,321],$VQ1,{133:389,49:390,53:[1,561]}),{17:[2,284]},o($V92,[2,431],{199:562,17:[1,563]}),{20:[2,185]},{17:[1,564]},{18:[1,565]},o($V92,[2,433],{201:566,17:[1,567]}),o($V92,[2,435],{203:568,17:[1,569]}),{17:[2,126]},o($VR,$Vo,{81:77,82:78,26:79,83:80,50:570,321:$V9}),o($VW1,[2,408]),{18:[1,571]},{17:$Ve1,52:572,121:$Vf1},{17:$Ve1,52:573,121:$Vf1},o($Vn,$Vo,{81:77,82:78,26:79,83:80,50:574,321:$V9}),o($VW,[2,420]),{20:[2,161]},{20:[2,162]},{20:[2,166]},{17:[2,171],169:[1,575]},o($V52,[2,191]),o($V52,[2,444]),{20:[2,192]},{17:[1,576],255:[1,577]},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:578,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($V72,[2,202]),{53:[1,591],123:[1,590],149:[1,587],165:[1,589],232:579,233:580,234:583,235:[1,584],280:582,282:[1,588],283:581,284:[1,585],285:[1,586]},{17:[1,592]},o($Vd,[2,206]),o($Vd,[2,244]),o($Vd,[2,245]),o($Vd,[2,246]),o($Vd,[2,247]),o($VY1,[2,195]),{16:526,26:26,122:$V8,132:527,220:594,221:593,223:525,321:$V9},{16:92,26:26,54:81,55:82,56:83,57:84,58:85,59:86,60:87,61:$Vp,62:$Vq,63:$Vr,64:91,65:$Vs,66:$Vt,67:$Vu,68:$Vv,69:$Vw,70:$Vx,71:$Vy,72:$Vz,73:$VA,74:$VB,75:$VC,76:$VD,77:$VE,78:$VF,79:$VG,80:$VH,122:$V8,224:[1,595],321:$V9},o($V92,[2,179]),o($V92,[2,432]),{18:[1,596]},{205:[1,597]},o($V92,[2,180]),o($V92,[2,434]),o($V92,[2,181]),o($V92,[2,436]),{17:$Ve1,52:598,121:$Vf1},{164:599,165:$Va2},{17:[2,128]},{17:[2,129]},o($VR,$VS,{84:140,85:141,51:601,86:$VT,88:$VU,90:$VV}),{17:[2,172]},{20:[2,231]},{17:[1,602]},o([17,255],[2,226]),{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:603,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},o($V82,[2,208]),o($Vb2,[2,255]),o($Vb2,[2,256]),{17:[1,604]},o($Vb2,[2,252],{236:[1,605]}),o($Vb2,[2,253]),{235:[1,606]},{281:[1,607]},o($Vb2,[2,249]),o($Vb2,[2,250]),o($Vb2,[2,251]),{17:[2,209]},o($V82,[2,240]),{20:[1,608]},{17:[1,609]},o([17,86,88,90],$Vo,{81:77,82:78,26:79,83:80,50:610,321:$V9}),{205:[1,611]},{20:[1,612]},{17:[1,613]},{20:[1,614]},{159:615,160:[1,616]},{17:$Ve1,52:617,121:$Vf1},{18:[1,618]},o($V82,[2,207]),{18:[1,619]},{17:[2,210],167:[1,620]},o($Vb2,[2,254]),o($Vb2,[2,248]),o($VY1,[2,445],{222:621,17:[1,622]}),{16:526,20:[2,197],26:26,122:$V8,132:527,220:594,221:623,223:525,321:$V9},{17:$VS,51:624,84:140,85:141,86:$VT,88:$VU,90:$VV},{20:[1,625]},o($Vc2,[2,439],{208:626,17:[1,627]}),{20:[1,628]},o($VS1,[2,141]),{17:[1,629]},{16:473,26:26,122:$V8,321:$V9},{17:[2,130]},{165:$Vd2,256:630,258:631},{165:$Ve2,238:633,242:634},{237:[1,636]},o($VY1,[2,196]),o($VY1,[2,446]),{20:[2,198]},{17:[2,200]},o($Vc2,[2,437],{206:637,17:[1,638]}),o($Vc2,[2,187]),o($Vc2,[2,440]),{17:[2,127]},{20:[2,144],164:639,165:$Va2},{20:[1,640]},{17:[1,641]},{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:642,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{20:[1,643],240:644,245:645,247:[1,646],248:[1,647]},o($Vf2,[2,215],{242:634,238:648,165:$Ve2}),{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:649,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{17:[2,211]},o($Vc2,[2,186]),o($Vc2,[2,438]),{20:[2,145]},{17:[1,651],20:[2,451],257:650},{20:[2,235],165:$Vd2,256:652,258:631},{243:[1,653]},o($V82,[2,447],{239:654,17:[1,655]}),{20:[1,656]},{243:[1,657]},{243:[2,220]},{243:[2,221]},o($Vf2,[2,216]),{243:[1,658]},{20:[2,232]},{20:[2,452]},{20:[2,236]},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,250:660,252:659,253:$Vg2,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},o($V82,[2,212]),o($V82,[2,448]),o($V82,[2,449],{241:662,17:[1,663]}),{17:[1,666],26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:667,191:66,192:67,244:664,246:665,249:668,250:669,251:$V62,252:264,253:$Vg2,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{17:[1,671],26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:667,191:66,192:67,244:670,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{17:[2,233]},{17:[2,234]},{26:673,122:[1,672],321:$V9},o($V82,[2,213]),o($V82,[2,450]),{17:[1,674]},{17:[1,675]},{18:[1,676]},{17:[1,677]},{17:[2,222]},{17:[2,223]},o([20,165,247,248],[2,214]),{18:[1,678]},{17:[2,227]},{17:[2,228],91:[1,679]},{20:[2,217]},{20:[2,218]},{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:681,191:66,192:67,246:680,249:668,250:669,251:$V62,252:264,253:$Vg2,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},o($Vh2,[2,224]),{26:136,28:135,61:$Vl1,91:$Vj1,94:134,95:$Ve,96:476,122:$Vf,163:681,191:66,192:67,252:264,307:$Vg,308:$VQ,311:131,313:132,315:255,316:256,317:477,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm,335:475,337:$Vk1,340:$Vm1},{26:136,28:135,94:134,95:$Ve,122:$Vf,191:66,192:67,252:130,254:682,307:$Vg,308:$VQ,311:131,313:132,321:$V9,322:$Vh,323:$Vi,324:$Vj,325:$Vk,326:$Vl,332:$Vm},{17:[1,683]},{17:[1,684]},{93:[1,685]},{20:[1,686]},{20:[1,687]},{17:[2,229]},{20:[2,219]},o($Vh2,[2,225])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,90],62:[2,19],155:[2,95],180:[2,16],183:[2,21],185:[2,335],198:[2,37],199:[2,35],217:[2,23],218:[2,25],225:[2,97],241:[2,176],242:[2,177],252:[2,119],261:[2,294],262:[2,295],263:[2,296],268:[2,289],285:[2,424],293:[2,337],344:[2,157],379:[2,291],388:[2,117],404:[2,190],407:[2,183],420:[2,28],423:[2,113],426:[2,116],430:[2,125],447:[2,155],451:[2,164],461:[2,30],462:[2,390],463:[2,32],488:[2,168],525:[2,199],527:[2,284],529:[2,185],534:[2,126],542:[2,161],543:[2,162],544:[2,166],548:[2,192],572:[2,128],573:[2,129],575:[2,172],576:[2,231],591:[2,209],617:[2,130],623:[2,198],624:[2,200],628:[2,127],636:[2,211],639:[2,145],646:[2,220],647:[2,221],650:[2,232],651:[2,452],652:[2,236],659:[2,233],660:[2,234],668:[2,222],669:[2,223],672:[2,227],674:[2,217],675:[2,218],685:[2,229],686:[2,219]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'view', 'customize', 'override']);

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),   
        
        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block', 

        'override.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xr: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 324;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 122;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 122;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 122;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 95;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 322;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 307;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 307;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 224;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 325;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 308;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 323;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:return yy_.yytext;                                                  
break;
case 31:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 321;
                            
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}