/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xeml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,17],$V4=[1,15],$V5=[1,18],$V6=[1,21],$V7=[5,15,22,29,40,45,97,107],$V8=[1,27],$V9=[1,28],$Va=[17,53,86,88,90,105,106,121,123,149,156,160,165,167,169,178,190,235,282,284,285,304,321,326,332,333],$Vb=[2,317],$Vc=[1,53],$Vd=[122,321],$Ve=[17,105,106],$Vf=[1,60],$Vg=[1,71],$Vh=[1,72],$Vi=[1,66],$Vj=[1,67],$Vk=[1,68],$Vl=[1,73],$Vm=[1,74],$Vn=[1,75],$Vo=[1,76],$Vp=[17,86,88,90,121],$Vq=[2,66],$Vr=[1,91],$Vs=[1,92],$Vt=[1,93],$Vu=[1,96],$Vv=[1,97],$Vw=[1,98],$Vx=[1,99],$Vy=[1,100],$Vz=[1,101],$VA=[1,102],$VB=[1,103],$VC=[1,104],$VD=[1,110],$VE=[1,111],$VF=[1,105],$VG=[1,106],$VH=[1,107],$VI=[1,108],$VJ=[1,109],$VK=[20,37,42],$VL=[2,110],$VM=[1,115],$VN=[20,120,123,127,134,171,172,179,187,193,209],$VO=[17,333],$VP=[1,120],$VQ=[17,20,86,88,90,93,106,121,167,190,229,230,243,251,255,266,300,302,304,321,327,333,336,337,339,341,342,343,344,345,346,347,348,351,352],$VR=[1,134],$VS=[1,140],$VT=[17,121],$VU=[2,72],$VV=[1,148],$VW=[1,149],$VX=[1,150],$VY=[17,86,88,90,121,321],$VZ=[20,42],$V_=[1,179],$V$=[1,172],$V01=[1,173],$V11=[1,174],$V21=[1,175],$V31=[1,176],$V41=[1,177],$V51=[1,178],$V61=[1,181],$V71=[1,180],$V81=[1,185],$V91=[2,294],$Va1=[1,194],$Vb1=[304,327],$Vc1=[93,333],$Vd1=[1,200],$Ve1=[17,20,93,106,121,167,190,229,230,243,251,255,266,300,302,304,321,327,333,336,337,339,341,342,343,344,345,346,347,348,351,352],$Vf1=[1,203],$Vg1=[2,119],$Vh1=[1,208],$Vi1=[1,213],$Vj1=[1,212],$Vk1=[1,236],$Vl1=[1,263],$Vm1=[1,265],$Vn1=[1,271],$Vo1=[1,272],$Vp1=[17,106,178],$Vq1=[1,303],$Vr1=[1,304],$Vs1=[17,20,86,88,90,93,121,167,229,230,243,251,266,321,351,352],$Vt1=[1,308],$Vu1=[1,315],$Vv1=[1,310],$Vw1=[1,309],$Vx1=[1,306],$Vy1=[1,307],$Vz1=[1,311],$VA1=[1,312],$VB1=[1,313],$VC1=[1,314],$VD1=[1,316],$VE1=[1,317],$VF1=[1,318],$VG1=[1,319],$VH1=[1,340],$VI1=[1,341],$VJ1=[1,342],$VK1=[1,343],$VL1=[1,358],$VM1=[1,359],$VN1=[1,360],$VO1=[17,20,86,88,90,93,121,167,229,230,243,251,266,321],$VP1=[91,95,122,307,308,321,322,323,324,325,326,332,337],$VQ1=[17,169],$VR1=[2,122],$VS1=[17,122,321],$VT1=[17,121,167,321],$VU1=[1,439],$VV1=[17,86,88,90,121,167,321],$VW1=[1,443],$VX1=[17,121,321],$VY1=[1,469],$VZ1=[229,230,266],$V_1=[1,498],$V$1=[1,499],$V02=[17,121,123,167,321],$V12=[17,20,86,88,90,121,167,229,230,243,251,266,321],$V22=[17,123],$V32=[1,523],$V42=[1,524],$V52=[1,522],$V62=[20,122,321],$V72=[1,552],$V82=[20,251],$V92=[20,229,230,251,266],$Va2=[20,197,200,202],$Vb2=[1,602],$Vc2=[61,91,95,122,307,308,321,322,323,324,325,326,332,337,340],$Vd2=[20,165,207],$Ve2=[1,634],$Vf2=[1,637],$Vg2=[20,247,248],$Vh2=[1,663],$Vi2=[17,20,165,247,248];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"customize_statement":12,"override_statement":13,"entity_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"customize":40,"customize_statement_option0":41,"views":42,"schema_views_block":43,"schema_views_option0":44,"type":45,"type_statement_item":46,"type_statement_block":47,"type_statement_option0":48,"type_base":49,"type_info_or_not":50,"type_modifiers_or_not":51,"field_comment_or_not":52,":":53,"types":54,"int_keyword":55,"number_keyword":56,"text_keyword":57,"bool_keyword":58,"binary_keyword":59,"datetime_keyword":60,"any":61,"enum":62,"array":63,"object_keyword":64,"int":65,"integer":66,"number":67,"float":68,"decimal":69,"text":70,"string":71,"bool":72,"boolean":73,"object":74,"json":75,"blob":76,"binary":77,"buffer":78,"datetime":79,"timestamp":80,"type_infos":81,"type_info":82,"narrow_function_call":83,"type_modifiers":84,"type_modifier":85,"|~":86,"type_modifier_validators":87,"|>":88,"identifier_or_general_function_call":89,"|=":90,"(":91,"literal_and_value_expression":92,")":93,"general_function_call":94,"REGEXP":95,"logical_expression":96,"override":97,"entity_statement_header":98,"entity_statement_block":99,"override_statement_option0":100,"entity_statement_option0":101,"entity_statement_header0":102,"entity_base_keywords":103,"identifier_or_string_list":104,"extends":105,"is":106,"entity":107,"entity_sub_items":108,"entity_sub_item":109,"with_features":110,"has_fields":111,"associations_statement":112,"key_statement":113,"index_statement":114,"input_statement":115,"data_statement":116,"code_statement":117,"interfaces_statement":118,"triggers_statement":119,"code":120,"--":121,"STRING":122,"with":123,"with_features_block":124,"with_features_option0":125,"feature_inject":126,"has":127,"has_fields_block":128,"has_fields_option0":129,"field_item":130,"field_item_body":131,"modifiable_field":132,"type_base_or_not":133,"associations":134,"associations_block":135,"associations_statement_option0":136,"association_item":137,"association_type_referee":138,"association_item_option0":139,"association_item_option1":140,"association_cases_block":141,"association_item_option2":142,"belongsTo":143,"association_item_option3":144,"association_item_option4":145,"refersTo":146,"association_item_option5":147,"association_item_option6":148,"of":149,"association_item_option7":150,"association_item_option8":151,"hasOne":152,"hasMany":153,"association_type_referer":154,"association_through":155,"connectedBy":156,"identifier_string_or_dotname":157,"association_extra_condition":158,"association_connection":159,"being":160,"array_of_identifier_or_string":161,"association_condition":162,"conditional_expression":163,"association_cases":164,"when":165,"association_as":166,"as":167,"association_qualifiers":168,"optional":169,"default":170,"key":171,"index":172,"index_item":173,"index_statement_block":174,"index_statement_option0":175,"index_item_body":176,"index_item_option0":177,"unique":178,"input":179,"input_statement_block":180,"input_statement_option0":181,"input_statement_def":182,"input_block":183,"input_block_item":184,"input_block_item_base":185,"input_block_item_with_spec":186,"data":187,"data_records":188,"data_statement_option0":189,"in":190,"inline_object":191,"inline_array":192,"triggers":193,"triggers_statement_block":194,"triggers_statement_option0":195,"triggers_operation":196,"onCreate":197,"triggers_operation_block":198,"triggers_operation_option0":199,"onCreateOrUpdate":200,"triggers_operation_option1":201,"onDelete":202,"triggers_operation_option2":203,"triggers_operation_item":204,"triggers_result_block":205,"triggers_operation_item_option0":206,"always":207,"triggers_operation_item_option1":208,"interface":209,"interfaces_statement_block":210,"interfaces_statement_option0":211,"interface_definition":212,"interface_definition_body":213,"interface_definition_option0":214,"accept_or_not":215,"implementation":216,"return_or_not":217,"accept_statement":218,"accept":219,"accept_param":220,"accept_block":221,"accept_statement_option0":222,"modifiable_param":223,"DOTNAME":224,"operation":225,"find_one_operation":226,"coding_block":227,"find_one_keywords":228,"findOne":229,"find":230,"article_keyword":231,"selection_inline_keywords":232,"case_statement":233,"cases_keywords":234,"by":235,"cases":236,"below":237,"case_condition_block":238,"case_statement_option0":239,"otherwise_statement":240,"case_statement_option1":241,"case_condition_item":242,"=>":243,"condition_as_result_expression":244,"otherwise_keywords":245,"stop_controll_flow_expression":246,"otherwise":247,"else":248,"return_expression":249,"throw_error_expression":250,"return":251,"modifiable_value":252,"throw":253,"gfc_param_list":254,"unless":255,"return_condition_block":256,"return_or_not_option0":257,"return_condition_item":258,"update_operation":259,"update":260,"where_expr":261,"create_operation":262,"create":263,"delete_operation":264,"delete":265,"do":266,"javascript":267,"assign_operation":268,"set":269,"identifier_or_member_access":270,"<-":271,"value":272,"variable_modifier_or_not":273,"entity_fields_selections":274,"->":275,"a":276,"an":277,"the":278,"one":279,"selection_attributive_keywords":280,"which":281,"where":282,"selection_keywords":283,"selectedBy":284,"selected":285,"group_by_or_not":286,"group":287,"identifier_string_or_dotname_list":288,"identifier_string_or_dotname_block":289,"group_by_or_not_option0":290,"having_or_not":291,"having":292,"order_by_or_not":293,"order":294,"order_by_list":295,"order_by_block":296,"order_by_or_not_option0":297,"order_by_clause":298,"ascend":299,"<":300,"descend":301,">":302,"order_by_list0":303,",":304,"skip_or_not":305,"offset":306,"INTEGER":307,"REFERENCE":308,"limit_or_not":309,"limit":310,"gfc_param0":311,"nfc_param_list":312,"nfc_param":313,"nfc_param_list0":314,"unary_expression":315,"binary_expression":316,"boolean_expression":317,"gfc_param_list0":318,"?":319,"identifier_string_or_dotname_list0":320,"NAME":321,"FLOAT":322,"BOOL":323,"SCRIPT":324,"SYMBOL":325,"{":326,"}":327,"kv_pairs":328,"kv_pair_item":329,"non_exist":330,"kv_pairs0":331,"[":332,"]":333,"identifier_or_string_list0":334,"simple_expression":335,"exists":336,"not":337,"null":338,"~":339,"all":340,">=":341,"<=":342,"==":343,"!=":344,"+":345,"-":346,"*":347,"/":348,"logical_expression_right":349,"logical_operators":350,"and":351,"or":352,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"customize",42:"views",45:"type",53:":",61:"any",62:"enum",63:"array",65:"int",66:"integer",67:"number",68:"float",69:"decimal",70:"text",71:"string",72:"bool",73:"boolean",74:"object",75:"json",76:"blob",77:"binary",78:"buffer",79:"datetime",80:"timestamp",86:"|~",88:"|>",90:"|=",91:"(",93:")",95:"REGEXP",97:"override",105:"extends",106:"is",107:"entity",120:"code",121:"--",122:"STRING",123:"with",127:"has",134:"associations",143:"belongsTo",146:"refersTo",149:"of",152:"hasOne",153:"hasMany",156:"connectedBy",160:"being",165:"when",167:"as",169:"optional",170:"default",171:"key",172:"index",178:"unique",179:"input",187:"data",190:"in",193:"triggers",197:"onCreate",200:"onCreateOrUpdate",202:"onDelete",205:"triggers_result_block",207:"always",209:"interface",219:"accept",224:"DOTNAME",229:"findOne",230:"find",235:"by",236:"cases",237:"below",243:"=>",247:"otherwise",248:"else",251:"return",253:"throw",255:"unless",260:"update",261:"where_expr",263:"create",265:"delete",266:"do",267:"javascript",269:"set",270:"identifier_or_member_access",271:"<-",273:"variable_modifier_or_not",275:"->",276:"a",277:"an",278:"the",279:"one",281:"which",282:"where",284:"selectedBy",285:"selected",287:"group",292:"having",294:"order",299:"ascend",300:"<",301:"descend",302:">",304:",",306:"offset",307:"INTEGER",308:"REFERENCE",310:"limit",319:"?",321:"NAME",322:"FLOAT",323:"BOOL",324:"SCRIPT",325:"SYMBOL",326:"{",327:"}",332:"[",333:"]",336:"exists",337:"not",338:"null",339:"~",340:"all",341:">=",342:"<=",343:"==",344:"!=",345:"+",346:"-",347:"*",348:"/",351:"and",352:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[12,6],[35,6],[43,2],[43,3],[10,3],[10,6],[46,5],[47,2],[47,3],[49,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[56,1],[57,1],[57,1],[58,1],[58,1],[64,1],[64,1],[59,1],[59,1],[59,1],[60,1],[60,1],[50,0],[50,1],[81,1],[81,2],[82,1],[82,1],[51,0],[51,1],[84,1],[84,2],[85,2],[85,2],[85,4],[85,2],[89,1],[89,1],[87,1],[87,1],[87,3],[13,3],[13,7],[14,2],[14,6],[98,1],[98,3],[103,1],[103,1],[102,2],[102,2],[99,1],[99,2],[108,1],[108,2],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[117,3],[32,0],[32,3],[110,6],[124,2],[124,3],[111,6],[128,2],[128,3],[130,2],[52,0],[52,2],[131,1],[133,0],[133,1],[112,6],[135,2],[135,3],[137,6],[137,10],[137,7],[137,7],[137,9],[138,1],[138,1],[154,1],[154,1],[155,2],[155,3],[155,1],[155,2],[155,1],[158,2],[141,5],[159,2],[159,3],[164,3],[164,4],[162,2],[166,2],[168,1],[168,4],[113,3],[113,3],[114,3],[114,6],[174,2],[174,3],[173,1],[173,3],[176,1],[176,1],[115,6],[180,6],[180,6],[182,1],[182,3],[183,2],[183,3],[184,1],[184,1],[185,1],[185,2],[186,3],[186,4],[116,3],[116,4],[116,6],[188,1],[188,1],[119,6],[196,6],[196,6],[196,6],[194,1],[194,2],[198,1],[198,2],[204,7],[204,6],[118,6],[210,1],[210,2],[212,6],[213,3],[215,0],[215,1],[218,3],[218,6],[221,2],[221,3],[220,1],[220,5],[216,1],[216,2],[225,1],[225,1],[228,1],[228,2],[226,4],[226,3],[234,1],[234,2],[234,4],[233,6],[233,7],[242,4],[238,1],[238,2],[240,4],[240,4],[240,7],[245,1],[245,1],[246,1],[246,1],[244,2],[244,5],[249,2],[250,2],[250,2],[250,5],[217,0],[217,2],[217,7],[258,4],[258,4],[256,2],[256,3],[259,6],[262,5],[264,4],[227,3],[268,6],[274,1],[274,3],[231,1],[231,1],[231,1],[231,1],[280,2],[280,1],[280,1],[280,1],[283,1],[283,1],[283,2],[232,1],[232,1],[286,0],[286,4],[286,7],[291,0],[291,3],[293,0],[293,4],[293,7],[296,2],[296,3],[298,1],[298,2],[298,2],[298,2],[298,2],[295,1],[295,2],[303,2],[303,3],[305,0],[305,3],[305,3],[309,0],[309,3],[309,3],[132,4],[252,2],[223,1],[126,1],[126,1],[83,4],[312,1],[312,2],[314,2],[314,3],[313,1],[313,1],[92,1],[92,1],[92,1],[94,4],[254,1],[254,2],[318,2],[318,3],[318,1],[311,1],[311,1],[311,2],[311,1],[157,1],[157,1],[157,1],[289,2],[289,3],[288,1],[288,2],[320,2],[320,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[191,2],[191,3],[329,3],[329,2],[329,3],[330,0],[328,1],[328,2],[331,2],[331,3],[192,2],[192,3],[161,3],[104,1],[104,2],[334,2],[334,3],[272,1],[272,1],[163,1],[163,1],[163,1],[335,1],[335,1],[335,3],[315,2],[315,3],[315,3],[315,4],[315,4],[317,3],[317,4],[317,4],[316,3],[316,3],[316,3],[316,3],[316,3],[316,3],[316,3],[316,4],[316,3],[316,3],[316,3],[316,3],[96,2],[349,2],[350,1],[350,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[41,0],[41,1],[44,0],[44,1],[48,0],[48,1],[100,0],[100,1],[101,0],[101,1],[125,0],[125,1],[129,0],[129,1],[136,0],[136,1],[139,0],[139,1],[140,0],[140,1],[142,0],[142,1],[144,0],[144,1],[145,0],[145,1],[147,0],[147,1],[148,0],[148,1],[150,0],[150,1],[151,0],[151,1],[175,0],[175,1],[177,0],[177,1],[181,0],[181,1],[189,0],[189,1],[195,0],[195,1],[199,0],[199,1],[201,0],[201,1],[203,0],[203,1],[206,0],[206,1],[208,0],[208,1],[211,0],[211,1],[214,0],[214,1],[222,0],[222,1],[239,0],[239,1],[241,0],[241,1],[257,0],[257,1],[290,0],[290,1],[297,0],[297,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = state.defineOverrides($$[$0-2], _$[$0-2].first_line);
break;
case 30:
this.$ = { views: $$[$0-2] };
break;
case 31: case 113: case 125: case 145: case 155: case 166: case 198: case 236: case 266: case 311:
this.$ = [ $$[$0-1] ];
break;
case 32: case 114: case 126: case 156: case 167: case 199: case 237: case 267: case 312:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 35:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 38: case 76: case 93: case 94: case 95: case 143: case 337:
this.$ = $$[$0];
break;
case 39:
this.$ = { type: 'integer' };
break;
case 40:
this.$ = { type: 'number' }    ;
break;
case 41:
this.$ = { type: 'text' };
break;
case 42:
this.$ = { type: 'boolean' };
break;
case 43:
this.$ = { type: 'binary' };
break;
case 44:
this.$ = { type: 'datetime' };
break;
case 45:
this.$ = { type: 'any' };
break;
case 46:
this.$ = { type: 'enum' };
break;
case 47:
this.$ = { type: 'array' };
break;
case 48:
this.$ = { type: 'object' };
break;
case 49:
this.$ = { type: $$[$0] };
break;
case 69: case 96: case 118: case 191: case 336: case 338:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 70:
this.$ = { [$$[$0]]: true };
break;
case 71:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 73:
this.$ = { modifiers: $$[$0] };
break;
case 74: case 183: case 185: case 202: case 216: case 273: case 275: case 289: case 291: case 301: case 313: case 315: case 342: case 344:
this.$ = [ $$[$0] ];
break;
case 75: case 184: case 186: case 203: case 217: case 274: case 276: case 290: case 292: case 302: case 316: case 343: case 345:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 77:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 78:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 79:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 80:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 81:
this.$ = [$$[$0]];
break;
case 82:
this.$ = state.normalizeValidator(...$$[$0]) ;
break;
case 83:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 84:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 85:
this.$ = state.defineEntityOverride($$[$0-1][0], $$[$0-1][1], _$[$0-2].first_line);
break;
case 86:
this.$ = state.defineEntityOverride($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-6].first_line);
break;
case 87:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 88:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 89:
this.$ = [ $$[$0], {} ];
break;
case 90:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 98:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 109:
this.$ = { code: $$[$0-1] };
break;
case 111:
this.$ = { comment: $$[$0-1] };
break;
case 112:
this.$ = { features: $$[$0-2] };
break;
case 115:
this.$ = { fields: $$[$0-2] };
break;
case 116:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 117:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 120:
this.$ = { comment: $$[$0] };
break;
case 124:
this.$ = { associations: $$[$0-2] };
break;
case 127:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 128:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 129: case 130:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 131:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 136:
this.$ = { by: $$[$0] }    ;
break;
case 137:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 138:
this.$ = { remoteField: $$[$0] }     ;
break;
case 139:
this.$ = { remoteField: $$[$0] }      ;
break;
case 140:
this.$ = { with: $$[$0] };
break;
case 141:
this.$ = { with: $$[$0] }    ;
break;
case 142:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 144:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 146:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 147:
this.$ = $$[$0];;
break;
case 148:
this.$ = { srcField: $$[$0] };
break;
case 149:
this.$ = { optional: true };
break;
case 150:
this.$ = { default: $$[$0-1] };
break;
case 151:
this.$ = { key: $$[$0-1] };
break;
case 152:
this.$ = { key: $$[$0-1] } ;
break;
case 153:
this.$ = { indexes: [$$[$0-1]] };
break;
case 154:
this.$ = { indexes: $$[$0-2] };
break;
case 158:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 159: case 160:
this.$ = { fields: $$[$0] };
break;
case 161:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 162:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 163:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 164: case 170:
this.$ = { name: $$[$0] };
break;
case 165:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 171:
this.$ = { name: $$[$0-1], optional: true };
break;
case 172:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 173:
this.$ = { ...$$[$0-3], spec: $$[$0-1], optional: true };
break;
case 174:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 175:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 176:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 179:
this.$ = { triggers: $$[$0-2] };
break;
case 180:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 181:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 182:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 187:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 188:
this.$ = { do: $$[$0-2] };
break;
case 189:
this.$ = { interfaces: $$[$0-2] };
break;
case 190:
this.$ = Object.assign({}, $$[$0]);
break;
case 192:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 193:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 196:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 197:
this.$ = { accept: $$[$0-2] };
break;
case 201:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 208:
this.$ = { $xt: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 209:
this.$ = { $xt: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 213:
this.$ = { $xt: 'cases', items: $$[$0-2] };
break;
case 214:
this.$ = { $xt: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 215:
this.$ = { $xt: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 218: case 219: case 330: case 340: case 341: case 353:
this.$ = $$[$0-1];
break;
case 220: case 226:
this.$ = $$[$0-2];
break;
case 227:
this.$ = { $xt: 'ReturnExpression', value: $$[$0] };
break;
case 228:
this.$ = { $xt: 'ThrowExpression', message: $$[$0] };
break;
case 229:
this.$ = { $xt: 'ThrowExpression', errorType: $$[$0] };
break;
case 230:
this.$ = { $xt: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 232:
 this.$ = { return: $$[$0-1] }; 
break;
case 233:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 234: case 235:
this.$ = { $xt: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 238:
 this.$ = { $xt: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 239:
 this.$ = { $xt: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 240:
 this.$ = { $xt: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 241:
this.$ = { $xt: 'DoStatement', do: $$[$0-1] };
break;
case 242:
 this.$ = { $xt: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 243:
this.$ = { entity: $$[$0] }     ;
break;
case 244:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 259:
this.$ = { groupBy: $$[$0-1] };
break;
case 260:
this.$ = { groupBy: $$[$0-2] };
break;
case 262:
this.$ = { having: $$[$0-1] };
break;
case 264:
this.$ = { orderBy: $$[$0-1] };
break;
case 265:
this.$ = { orderBy: $$[$0-2] };
break;
case 268:
this.$ = { field: $$[$0], ascend: true };
break;
case 269: case 270:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 271: case 272:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 278: case 279:
this.$ = { offset: $$[$0-1] };
break;
case 281: case 282:
this.$ = { limit: $$[$0-1] };
break;
case 283:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 284:
this.$ = state.normalizePipedValue($$[$0-1], $$[$0]);
break;
case 288: case 298:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 294:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 299:
this.$ = [ $$[$0] ]    ;
break;
case 300:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 303: case 339:
this.$ = [];
break;
case 306:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 314:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 329:
this.$ = {}    ;
break;
case 331: case 333:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 332:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 347:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 354:
this.$ = { $xt: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 355:
this.$ = { $xt: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 356:
this.$ = { $xt: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 357:
this.$ = { $xt: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 358:
this.$ = { $xt: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 359:
this.$ = { $xt: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 360:
this.$ = { $xt: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 361:
this.$ = { $xt: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 362:
this.$ = { $xt: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = { $xt: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { $xt: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 365:
this.$ = { $xt: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { $xt: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 367:
this.$ = { $xt: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 368:
this.$ = { $xt: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 369:
this.$ = { $xt: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 370:
this.$ = { $xt: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 371:
this.$ = { $xt: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 372:
this.$ = { $xt: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 373:
this.$ = { $xt: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 374:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 375:
this.$ = Object.assign({ $xt: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 376:
this.$ = { operator: 'and' };
break;
case 377:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,45:$V4,97:$V5,98:19,102:20,107:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,45:$V4,97:$V5,98:19,102:20,107:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,122:$V8,321:$V9},{17:[1,30],23:29,26:31,321:$V9},{16:34,17:[1,33],26:26,46:32,122:$V8,321:$V9},{16:35,26:26,122:$V8,321:$V9},{17:[1,36]},{98:37,102:20,107:$V6},{17:[1,38]},{17:[2,89],103:39,105:[1,40],106:[1,41]},{16:42,26:44,83:43,122:$V8,321:$V9},{1:[2,3]},{5:[2,5]},{17:[1,45]},{18:[1,46]},o($Va,$Vb),o($Va,[2,318]),o([17,20,27,53,86,88,90,91,93,105,106,121,123,149,156,160,165,167,169,178,190,229,230,235,243,251,255,266,282,284,285,300,302,304,321,326,327,332,333,336,337,339,341,342,343,344,345,346,347,348,351,352],[2,319]),{17:[1,47]},{18:[1,48]},{27:[1,49]},{17:[1,50]},{18:[1,51]},{49:52,53:$Vc},{17:[1,54]},{18:[1,55]},{17:[1,56]},o($V7,[2,87],{18:[1,57]}),{16:59,26:26,104:58,122:$V8,321:$V9},o($Vd,[2,91]),o($Vd,[2,92]),o($Ve,[2,93]),o($Ve,[2,94]),o($Ve,$Vb,{91:$Vf}),o($V7,[2,13]),{16:62,19:61,26:26,122:$V8,321:$V9},o($V7,[2,17]),{23:64,24:63,26:31,321:$V9},{28:65,95:$Vg,122:$Vh,191:69,192:70,307:$Vi,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($V7,[2,33]),{16:34,26:26,46:78,47:77,122:$V8,321:$V9},o($Vp,$Vq,{50:79,81:80,82:81,26:82,83:83,321:$V9}),{16:95,26:26,54:84,55:85,56:86,57:87,58:88,59:89,60:90,61:$Vr,62:$Vs,63:$Vt,64:94,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,122:$V8,321:$V9},{18:[1,112]},o($VK,$VL,{30:113,32:114,121:$VM}),o($V7,[2,85],{18:[1,116]}),o($VN,$VL,{99:117,32:118,121:$VM}),{17:[2,90]},o($VO,[2,342],{334:119,304:$VP}),{26:124,28:123,95:$Vg,122:$Vh,191:69,192:70,307:$Vi,312:121,313:122,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{20:[1,125]},{17:[1,126]},{20:[1,127]},{17:[1,128]},{17:[2,19]},o($VQ,[2,320]),o($VQ,[2,321]),o($VQ,[2,322]),o($VQ,[2,323]),o($VQ,[2,324]),o($VQ,[2,325]),o($VQ,[2,326]),o($VQ,[2,327]),o($VQ,[2,328]),{16:132,26:133,122:$V8,307:$VR,321:$V9,327:[1,129],328:130,329:131},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:137,254:136,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,333:[1,135]},{20:[1,143]},{17:[1,144]},o($VT,$VU,{51:145,84:146,85:147,86:$VV,88:$VW,90:$VX}),o($Vp,[2,67]),o($Vp,[2,68],{82:81,26:82,83:83,81:151,321:$V9}),o($VY,[2,70],{91:$Vf}),o($VY,[2,71]),o($VY,[2,38]),o($VY,[2,39]),o($VY,[2,40]),o($VY,[2,41]),o($VY,[2,42]),o($VY,[2,43]),o($VY,[2,44]),o($VY,[2,45]),o($VY,[2,46]),o($VY,[2,47]),o($VY,[2,48]),o($VY,[2,49]),o($VY,[2,50]),o($VY,[2,51]),o($VY,[2,52]),o($VY,[2,53]),o($VY,[2,54]),o($VY,[2,55]),o($VY,[2,56]),o($VY,[2,57]),o($VY,[2,58]),o($VY,[2,61]),o($VY,[2,62]),o($VY,[2,63]),o($VY,[2,64]),o($VY,[2,65]),o($VY,[2,59]),o($VY,[2,60]),o($VK,$VL,{32:114,30:152,121:$VM}),{20:[1,153]},o($VZ,[2,384],{33:154,36:155,37:[1,156]}),{122:[1,157]},o($VN,$VL,{32:118,99:158,121:$VM}),{20:[1,159]},{20:[2,95],108:160,109:161,110:162,111:163,112:164,113:165,114:166,115:167,116:168,117:169,118:170,119:171,120:$V_,123:$V$,127:$V01,134:$V11,171:$V21,172:$V31,179:$V41,187:$V51,193:$V61,209:$V71},o($VO,[2,343]),{16:182,26:26,122:$V8,321:$V9},{93:[1,183]},{93:[2,289],304:$V81,314:184},o($VQ,[2,293]),o([93,304],$V91),o($V7,[2,378],{21:186,17:[1,187]}),{16:62,19:188,20:[2,15],26:26,122:$V8,321:$V9},o($V7,[2,380],{25:189,17:[1,190]}),{20:[2,20],23:64,24:191,26:31,321:$V9},o($VQ,[2,329]),{327:[1,192]},{304:$Va1,327:[2,335],331:193},{53:[1,195]},o($Vb1,[2,334],{330:196,53:$Vb}),{53:[1,197]},o($VQ,[2,339]),{333:[1,198]},o($Vc1,[2,299],{318:199,304:$Vd1}),o($Ve1,$VU,{84:146,85:147,51:201,86:$VV,88:$VW,90:$VX}),o($VQ,[2,304]),o($VQ,[2,305],{319:[1,202]}),o($VQ,[2,307]),o($VQ,$V91,{91:$Vf1}),o($V7,[2,392],{48:204,17:[1,205]}),{16:34,20:[2,36],26:26,46:78,47:206,122:$V8,321:$V9},{17:$Vg1,52:207,121:$Vh1},o($VQ,[2,73]),o($Ve1,[2,74],{85:147,84:209,86:$VV,88:$VW,90:$VX}),{26:215,87:210,89:211,91:$Vi1,94:214,95:$Vj1,321:$V9},{26:215,89:216,94:214,321:$V9},{26:215,89:218,91:[1,217],94:214,321:$V9},o($Vp,[2,69]),{20:[1,219]},o($V7,[2,388],{41:220,17:[1,221]}),{20:[2,24],34:222,35:223,42:[1,224]},o($VZ,[2,385]),{17:[1,225]},{17:[1,226]},{20:[1,227]},o($V7,[2,396],{101:228,17:[1,229]}),{20:[2,96]},{20:[2,97],108:230,109:161,110:162,111:163,112:164,113:165,114:166,115:167,116:168,117:169,118:170,119:171,120:$V_,123:$V$,127:$V01,134:$V11,171:$V21,172:$V31,179:$V41,187:$V51,193:$V61,209:$V71},o($VN,[2,99]),o($VN,[2,100]),o($VN,[2,101]),o($VN,[2,102]),o($VN,[2,103]),o($VN,[2,104]),o($VN,[2,105]),o($VN,[2,106]),o($VN,[2,107]),o($VN,[2,108]),{17:[1,231]},{17:[1,232]},{17:[1,233]},{16:234,26:26,122:$V8,161:235,321:$V9,332:$Vk1},{16:240,17:[1,238],26:26,122:$V8,161:241,173:237,176:239,321:$V9,332:$Vk1},{17:[1,242]},{16:244,26:26,122:$V8,188:243,189:245,190:[2,428],191:246,192:247,321:$V9,326:$Vn,332:$Vo},{16:248,26:26,122:$V8,321:$V9},{17:[1,249]},{17:[1,250]},o($VO,[2,344],{334:251,304:$VP}),o([17,86,88,90,105,106,121,169,321],[2,288]),{93:[2,290]},{26:124,28:123,95:$Vg,122:$Vh,191:69,192:70,307:$Vi,313:252,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($V7,[2,14]),o($V7,[2,379]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,381]),{20:[2,21]},o($VQ,[2,330]),{327:[2,336]},{16:132,26:133,122:$V8,307:$VR,321:$V9,329:253},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:254,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($Vb1,[2,332]),{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:255,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($VQ,[2,340]),o($Vc1,[2,300]),o($Vc1,[2,303],{191:69,192:70,28:123,311:138,313:139,94:141,26:142,252:256,95:$Vg,122:$Vh,307:$Vi,308:$VS,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo}),o($VQ,[2,284]),o($VQ,[2,306]),{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:137,254:257,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($V7,[2,34]),o($V7,[2,393]),{20:[2,37]},{17:[2,35]},{122:[1,258]},o($VQ,[2,75]),o($VQ,[2,76]),o($VQ,[2,82]),o($VQ,[2,83]),{26:142,28:123,91:$Vl1,94:141,95:$Vg,96:259,122:$Vh,191:69,192:70,252:264,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:260,337:$Vm1},o($VQ,[2,80]),o($VQ,[2,81],{91:$Vf1}),o($VQ,[2,77]),{26:142,28:123,61:$Vn1,92:266,94:141,95:$Vg,122:$Vh,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:267,316:268,317:269,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,337:$Vm1,340:$Vo1},o($VQ,[2,79]),o($V7,[2,382],{31:273,17:[1,274]}),o($V7,[2,29]),o($V7,[2,389]),{20:[2,23]},{20:[2,25]},{17:[1,275]},{18:[1,276]},o([20,37,42,120,123,127,134,171,172,179,187,193,209],[2,111]),o($V7,[2,394],{100:277,17:[1,278]}),o($V7,[2,88]),o($V7,[2,397]),{20:[2,98]},{18:[1,279]},{18:[1,280]},{18:[1,281]},{17:[1,282]},{17:[1,283]},{16:59,26:26,104:284,122:$V8,321:$V9},{17:[1,285]},{18:[1,286]},{17:[2,157],106:[1,288],177:287,178:[2,424]},o($Vp1,[2,159]),o($Vp1,[2,160]),{18:[1,289]},{17:[1,290]},{188:291,190:[2,429],191:246,192:247,326:$Vn,332:$Vo},{190:[1,292]},{17:[2,177]},{17:[2,178]},{17:[1,293]},{18:[1,294]},{18:[1,295]},o($VO,[2,345]),{93:[2,291],304:$V81,314:296},{304:$Va1,327:[2,337],331:297},o($Vb1,[2,331]),o($Vb1,[2,333]),o($Vc1,[2,301],{318:298,304:$Vd1}),{93:[1,299]},{17:[2,120]},{93:[1,300]},{349:301,350:302,351:$Vq1,352:$Vr1},o($Vs1,[2,351]),o($Vs1,[2,352]),{26:142,28:123,91:$Vl1,94:141,95:$Vg,122:$Vh,191:69,192:70,252:264,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:305,337:$Vm1},{106:$Vt1,190:$Vu1,300:$Vv1,302:$Vw1,336:$Vx1,337:$Vy1,341:$Vz1,342:$VA1,343:$VB1,344:$VC1,345:$VD1,346:$VE1,347:$VF1,348:$VG1},{91:[1,320]},{93:[1,321]},{93:[2,295]},{93:[2,296]},{93:[2,297]},{106:$Vt1,190:$Vu1,300:$Vv1,302:$Vw1,336:$Vx1,337:$Vy1,339:[1,322],341:$Vz1,342:$VA1,343:$VB1,344:$VC1,345:$VD1,346:$VE1,347:$VF1,348:$VG1},{192:323,332:$Vo},{192:324,332:$Vo},o($V7,[2,22]),o($V7,[2,383]),{18:[1,325]},{16:327,26:26,38:326,122:$V8,321:$V9},o($V7,[2,86]),o($V7,[2,395]),{26:330,83:331,124:328,126:329,321:$V9},{16:336,26:26,122:$V8,128:332,130:333,131:334,132:335,321:$V9},{135:337,137:338,138:339,143:$VH1,146:$VI1,152:$VJ1,153:$VK1},o($VN,[2,151]),o($VN,[2,152]),{333:[1,344]},o($VN,[2,153]),{16:240,26:26,122:$V8,161:241,173:346,174:345,176:239,321:$V9,332:$Vk1},{178:[1,347]},{178:[2,425]},{16:350,26:26,122:$V8,180:348,182:349,321:$V9},o($VN,[2,174]),{17:[1,351]},{16:352,26:26,122:$V8,321:$V9},o($VN,[2,109]),{16:355,26:26,122:$V8,210:353,212:354,321:$V9},{194:356,196:357,197:$VL1,200:$VM1,202:$VN1},{93:[2,292]},{327:[2,338]},o($Vc1,[2,302]),o($VQ,[2,298]),o($VQ,[2,84]),o($VO1,[2,374]),{26:142,28:123,91:$Vl1,94:141,95:$Vg,122:$Vh,191:69,192:70,252:264,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:361,337:$Vm1},o($VP1,[2,376]),o($VP1,[2,377]),{93:[1,362]},o($Vs1,[2,354]),{190:[1,364],336:[1,363]},{337:[1,366],338:[1,365]},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:367,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:368,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:369,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:370,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:371,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:372,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:373,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:374,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:375,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:376,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:377,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{26:142,28:123,91:$Vl1,94:141,95:$Vg,122:$Vh,191:69,192:70,252:264,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:378,337:$Vm1},o($VQ,[2,78]),{26:215,87:379,89:211,91:$Vi1,94:214,95:$Vj1,321:$V9},{339:[1,380]},{339:[1,381]},{16:383,26:26,43:382,122:$V8,321:$V9},{20:[1,384]},{17:[1,385]},{20:[1,386]},{17:[1,387]},o($VQ1,[2,286],{91:$Vf}),o($VQ1,[2,287]),{20:[1,388]},{17:[1,389]},{17:$Vg1,52:390,121:$Vh1},o($VT,[2,121]),o($VY,$VR1,{133:391,49:392,53:$Vc}),{20:[1,393]},{17:[1,394]},{16:395,17:[1,396],26:26,122:$V8,321:$V9},{16:397,26:26,122:$V8,321:$V9},{16:398,26:26,122:$V8,321:$V9},o($VS1,[2,132]),o($VS1,[2,133]),o([17,106,121,167,178,321],[2,341]),{20:[1,399]},{17:[1,400]},{17:[2,158]},{20:[1,401]},{17:[1,402]},{17:[2,164],105:[1,403]},o($VN,[2,175]),{188:404,191:246,192:247,326:$Vn,332:$Vo},{20:[1,405]},{16:355,20:[2,190],26:26,122:$V8,210:406,212:354,321:$V9},{17:[1,407]},{20:[1,408]},{20:[2,183],194:409,196:357,197:$VL1,200:$VM1,202:$VN1},{17:[1,410]},{17:[1,411]},{17:[1,412]},o($VO1,[2,375]),o($Vs1,[2,353]),o($Vs1,[2,355]),{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:413,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($Vs1,[2,356]),{338:[1,414]},o($Vs1,[2,362]),o($Vs1,[2,363]),o($Vs1,[2,364]),o($Vs1,[2,365]),o($Vs1,[2,366]),o($Vs1,[2,367]),o($Vs1,[2,368]),o($Vs1,[2,370]),o($Vs1,[2,371]),o($Vs1,[2,372]),o($Vs1,[2,373]),{93:[1,415]},o($VO1,[2,359]),{26:215,87:416,89:211,91:$Vi1,94:214,95:$Vj1,321:$V9},{26:215,87:417,89:211,91:$Vi1,94:214,95:$Vj1,321:$V9},{20:[1,418]},{17:[1,419]},o($VZ,[2,386],{39:420,17:[1,421]}),{16:327,20:[2,27],26:26,38:422,122:$V8,321:$V9},o($VN,[2,398],{125:423,17:[1,424]}),{20:[2,113],26:330,83:331,124:425,126:329,321:$V9},o($VN,[2,400],{129:426,17:[1,427]}),{16:336,20:[2,116],26:26,122:$V8,128:428,130:333,131:334,132:335,321:$V9},{17:[2,118]},o($Vp,$Vq,{81:80,82:81,26:82,83:83,50:429,321:$V9}),o($VY,[2,123]),o($VN,[2,402],{136:430,17:[1,431]}),{20:[2,125],135:432,137:338,138:339,143:$VH1,146:$VI1,152:$VJ1,153:$VK1},o($VT1,[2,404],{139:433,155:434,159:436,162:438,123:$VU1,156:[1,435],160:[1,437]}),{18:[1,440]},o($VV1,[2,410],{144:441,158:442,123:$VW1}),o($VV1,[2,414],{147:444,158:446,123:$VW1,149:[1,445]}),o($VN,[2,422],{175:447,17:[1,448]}),{16:240,20:[2,155],26:26,122:$V8,161:241,173:346,174:449,176:239,321:$V9,332:$Vk1},o($VN,[2,426],{181:450,17:[1,451]}),{18:[1,452]},{16:453,26:26,122:$V8,321:$V9},{17:[1,454]},o($VN,[2,442],{211:455,17:[1,456]}),{20:[2,191]},{18:[1,457]},o($VN,[2,430],{195:458,17:[1,459]}),{20:[2,184]},{18:[1,460]},{18:[1,461]},{18:[1,462]},o($Vs1,[2,369]),o($Vs1,[2,357]),o($Vs1,[2,358]),o($VO1,[2,360]),o($VO1,[2,361]),{17:[1,464],20:[2,390],44:463},{16:383,20:[2,31],26:26,43:465,122:$V8,321:$V9},o($VZ,[2,26]),o($VZ,[2,387]),{20:[2,28]},o($VN,[2,112]),o($VN,[2,399]),{20:[2,114]},o($VN,[2,115]),o($VN,[2,401]),{20:[2,117]},o($VT,$VU,{84:146,85:147,51:466,86:$VV,88:$VW,90:$VX}),o($VN,[2,124]),o($VN,[2,403]),{20:[2,126]},o($VX1,[2,406],{140:467,166:468,167:$VY1}),o($VT1,[2,405]),{26:471,122:[1,472],157:470,224:[1,473],321:$V9},o($VT1,[2,138]),{16:475,26:26,122:$V8,161:474,321:$V9,332:$Vk1},o($VT1,[2,140]),{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:476,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{16:480,26:26,122:$V8,321:$V9},o($VY,[2,412],{145:481,166:482,167:$VY1}),o($VV1,[2,411]),{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:483,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},o($VY,[2,416],{148:484,166:485,167:$VY1}),{16:486,26:26,122:$V8,321:$V9},o($VV1,[2,415]),o($VN,[2,154]),o($VN,[2,423]),{20:[2,156]},o($VN,[2,161]),o($VN,[2,427]),{16:491,26:26,122:$V8,183:487,184:488,185:489,186:490,321:$V9},{17:[2,165]},o($VN,[2,176]),o($VN,[2,189]),o($VN,[2,443]),o($VZ1,[2,194],{213:492,215:493,218:494,219:[1,495]}),o($VN,[2,179]),o($VN,[2,431]),{165:$V_1,198:496,204:497,207:$V$1},{165:$V_1,198:500,204:497,207:$V$1},{165:$V_1,198:501,204:497,207:$V$1},{20:[2,30]},{20:[2,391]},{20:[2,32]},o($VT,[2,283]),o($VT,$Vq,{81:80,82:81,26:82,83:83,50:502,321:$V9}),o($VX1,[2,407]),{16:503,26:26,122:$V8,321:$V9},o($VT1,[2,136],{158:504,123:$VW1}),o($V02,[2,308]),o($V02,[2,309]),o($V02,[2,310]),o($VT1,[2,139]),o($VT1,[2,143],{162:505,123:$VU1}),o($VT1,[2,147]),o($V12,[2,348],{349:301,350:302,351:$Vq1,352:$Vr1}),o($V12,[2,349]),o($V12,[2,350]),{53:[1,507],141:506},o($Vp,$Vq,{81:80,82:81,26:82,83:83,50:508,321:$V9}),o($VY,[2,413]),o($VV1,[2,141]),o($Vp,$Vq,{81:80,82:81,26:82,83:83,50:509,321:$V9}),o($VY,[2,417]),o($VV1,[2,418],{150:510,158:511,123:$VW1}),{20:[1,512]},{17:[1,513]},{17:[2,168],123:[1,514]},{17:[2,169]},o($V22,[2,170],{169:[1,515]}),{20:[1,516]},{216:517,225:518,226:519,227:520,228:521,229:$V32,230:$V42,266:$V52},o($VZ1,[2,195]),{16:528,17:[1,526],26:26,122:$V8,132:529,220:525,223:527,321:$V9},{20:[1,530]},{20:[2,185],165:$V_1,198:531,204:497,207:$V$1},{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:532,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{17:[1,533]},{20:[1,534]},{20:[1,535]},{17:$Vg1,52:536,121:$Vh1},o($VY,[2,148]),o($VT1,[2,137]),o($VT1,[2,144]),o($VX1,[2,408],{142:537,166:538,167:$VY1}),{17:[1,539]},o($VT,$VU,{84:146,85:147,51:540,86:$VV,88:$VW,90:$VX}),o($VT,$VU,{84:146,85:147,51:541,86:$VV,88:$VW,90:$VX}),o($VY,[2,420],{151:542,166:543,167:$VY1}),o($VV1,[2,419]),{16:350,17:[1,544],26:26,122:$V8,180:545,182:349,321:$V9},{16:491,20:[2,166],26:26,122:$V8,183:546,184:488,185:489,186:490,321:$V9},{26:330,83:331,126:547,321:$V9},o($V22,[2,171]),o($V62,[2,444],{214:548,17:[1,549]}),{20:[2,231],217:550,249:551,251:$V72},o($V82,[2,202],{225:518,226:519,227:520,228:521,216:553,229:$V32,230:$V42,266:$V52}),o($V92,[2,204]),o($V92,[2,205]),{16:554,26:26,122:$V8,321:$V9},{267:[1,555]},o($Vd,[2,206]),{231:556,276:[1,557],277:[1,558],278:[1,559],279:[1,560]},{17:[1,561]},{18:[1,562]},{17:[2,200]},o([17,86,88,90,321],$VR1,{133:391,49:392,53:[1,563]}),{17:[2,285]},o($Va2,[2,432],{199:564,17:[1,565]}),{20:[2,186]},{17:[1,566]},{18:[1,567]},o($Va2,[2,434],{201:568,17:[1,569]}),o($Va2,[2,436],{203:570,17:[1,571]}),{17:[2,127]},o($VT,$Vq,{81:80,82:81,26:82,83:83,50:572,321:$V9}),o($VX1,[2,409]),{18:[1,573]},{17:$Vg1,52:574,121:$Vh1},{17:$Vg1,52:575,121:$Vh1},o($Vp,$Vq,{81:80,82:81,26:82,83:83,50:576,321:$V9}),o($VY,[2,421]),{20:[2,162]},{20:[2,163]},{20:[2,167]},{17:[2,172],169:[1,577]},o($V62,[2,192]),o($V62,[2,445]),{20:[2,193]},{17:[1,578],255:[1,579]},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:580,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($V82,[2,203]),{53:[1,593],123:[1,592],149:[1,589],165:[1,591],232:581,233:582,234:585,235:[1,586],280:584,282:[1,590],283:583,284:[1,587],285:[1,588]},{17:[1,594]},o($Vd,[2,207]),o($Vd,[2,245]),o($Vd,[2,246]),o($Vd,[2,247]),o($Vd,[2,248]),o($VZ1,[2,196]),{16:528,26:26,122:$V8,132:529,220:596,221:595,223:527,321:$V9},{16:95,26:26,54:84,55:85,56:86,57:87,58:88,59:89,60:90,61:$Vr,62:$Vs,63:$Vt,64:94,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,73:$VC,74:$VD,75:$VE,76:$VF,77:$VG,78:$VH,79:$VI,80:$VJ,122:$V8,224:[1,597],321:$V9},o($Va2,[2,180]),o($Va2,[2,433]),{18:[1,598]},{205:[1,599]},o($Va2,[2,181]),o($Va2,[2,435]),o($Va2,[2,182]),o($Va2,[2,437]),{17:$Vg1,52:600,121:$Vh1},{164:601,165:$Vb2},{17:[2,129]},{17:[2,130]},o($VT,$VU,{84:146,85:147,51:603,86:$VV,88:$VW,90:$VX}),{17:[2,173]},{20:[2,232]},{17:[1,604]},o([17,255],[2,227]),{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:605,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},o($V92,[2,209]),o($Vc2,[2,256]),o($Vc2,[2,257]),{17:[1,606]},o($Vc2,[2,253],{236:[1,607]}),o($Vc2,[2,254]),{235:[1,608]},{281:[1,609]},o($Vc2,[2,250]),o($Vc2,[2,251]),o($Vc2,[2,252]),{17:[2,210]},o($V92,[2,241]),{20:[1,610]},{17:[1,611]},o([17,86,88,90],$Vq,{81:80,82:81,26:82,83:83,50:612,321:$V9}),{205:[1,613]},{20:[1,614]},{17:[1,615]},{20:[1,616]},{159:617,160:[1,618]},{17:$Vg1,52:619,121:$Vh1},{18:[1,620]},o($V92,[2,208]),{18:[1,621]},{17:[2,211],167:[1,622]},o($Vc2,[2,255]),o($Vc2,[2,249]),o($VZ1,[2,446],{222:623,17:[1,624]}),{16:528,20:[2,198],26:26,122:$V8,132:529,220:596,221:625,223:527,321:$V9},{17:$VU,51:626,84:146,85:147,86:$VV,88:$VW,90:$VX},{20:[1,627]},o($Vd2,[2,440],{208:628,17:[1,629]}),{20:[1,630]},o($VT1,[2,142]),{17:[1,631]},{16:475,26:26,122:$V8,321:$V9},{17:[2,131]},{165:$Ve2,256:632,258:633},{165:$Vf2,238:635,242:636},{237:[1,638]},o($VZ1,[2,197]),o($VZ1,[2,447]),{20:[2,199]},{17:[2,201]},o($Vd2,[2,438],{206:639,17:[1,640]}),o($Vd2,[2,188]),o($Vd2,[2,441]),{17:[2,128]},{20:[2,145],164:641,165:$Vb2},{20:[1,642]},{17:[1,643]},{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:644,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{20:[1,645],240:646,245:647,247:[1,648],248:[1,649]},o($Vg2,[2,216],{242:636,238:650,165:$Vf2}),{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:651,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{17:[2,212]},o($Vd2,[2,187]),o($Vd2,[2,439]),{20:[2,146]},{17:[1,653],20:[2,452],257:652},{20:[2,236],165:$Ve2,256:654,258:633},{243:[1,655]},o($V92,[2,448],{239:656,17:[1,657]}),{20:[1,658]},{243:[1,659]},{243:[2,221]},{243:[2,222]},o($Vg2,[2,217]),{243:[1,660]},{20:[2,233]},{20:[2,453]},{20:[2,237]},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,250:662,252:661,253:$Vh2,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},o($V92,[2,213]),o($V92,[2,449]),o($V92,[2,450],{241:664,17:[1,665]}),{17:[1,668],26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:669,191:69,192:70,244:666,246:667,249:670,250:671,251:$V72,252:270,253:$Vh2,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{17:[1,673],26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:669,191:69,192:70,244:672,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{17:[2,234]},{17:[2,235]},{26:675,122:[1,674],321:$V9},o($V92,[2,214]),o($V92,[2,451]),{17:[1,676]},{17:[1,677]},{18:[1,678]},{17:[1,679]},{17:[2,223]},{17:[2,224]},o([20,165,247,248],[2,215]),{18:[1,680]},{17:[2,228]},{17:[2,229],91:[1,681]},{20:[2,218]},{20:[2,219]},{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:683,191:69,192:70,246:682,249:670,250:671,251:$V72,252:270,253:$Vh2,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},o($Vi2,[2,225]),{26:142,28:123,61:$Vn1,91:$Vl1,94:141,95:$Vg,96:478,122:$Vh,163:683,191:69,192:70,252:270,307:$Vi,308:$VS,311:138,313:139,315:261,316:262,317:479,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo,335:477,337:$Vm1,340:$Vo1},{26:142,28:123,94:141,95:$Vg,122:$Vh,191:69,192:70,252:137,254:684,307:$Vi,308:$VS,311:138,313:139,321:$V9,322:$Vj,323:$Vk,324:$Vl,325:$Vm,326:$Vn,332:$Vo},{17:[1,685]},{17:[1,686]},{93:[1,687]},{20:[1,688]},{20:[1,689]},{17:[2,230]},{20:[2,220]},o($Vi2,[2,226])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],58:[2,90],65:[2,19],160:[2,96],184:[2,290],188:[2,16],191:[2,21],193:[2,336],206:[2,37],207:[2,35],222:[2,23],223:[2,25],230:[2,98],246:[2,177],247:[2,178],258:[2,120],267:[2,295],268:[2,296],269:[2,297],288:[2,425],296:[2,292],297:[2,338],347:[2,158],390:[2,118],406:[2,191],409:[2,184],422:[2,28],425:[2,114],428:[2,117],432:[2,126],449:[2,156],453:[2,165],463:[2,30],464:[2,391],465:[2,32],490:[2,169],527:[2,200],529:[2,285],531:[2,186],536:[2,127],544:[2,162],545:[2,163],546:[2,167],550:[2,193],574:[2,129],575:[2,130],577:[2,173],578:[2,232],593:[2,210],619:[2,131],625:[2,199],626:[2,201],630:[2,128],638:[2,212],641:[2,146],648:[2,221],649:[2,222],652:[2,233],653:[2,453],654:[2,237],661:[2,234],662:[2,235],670:[2,223],671:[2,224],674:[2,228],676:[2,218],677:[2,219],687:[2,230],688:[2,220]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.XEML_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'view', 'customize', 'override']);

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'customize': new Set(['entities']),
        'override': new Set(['entity']),
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', /*'interface', 'code'*/, 'triggers' ]),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),        
        //'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),     

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),   
        
        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block', 

        'override.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'json', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = []; // indent stack
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = []; // bracket stack
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { $xr: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                $xt: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { $xt: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { $xt: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { $xt: 'Validator', name, args };
            } 
                
            return { $xt: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { $xt: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { $xt: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { $xt: 'Processor', name, args };
            } 
                
            return { $xt: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { $xt: 'Activator', name, args };
            } 
                
            return { $xt: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return modifiers ? Object.assign({ $xt: 'PipedValue', value }, modifiers) : value;
        }

        normalizeFunctionCall(func) {
            return Object.assign({ $xt: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            if (typeof name === 'object') {                
                this.define('entityTemplate', name.name, { ...value, templateArgs: name.args }, line);
            } else {
                this.define('entity', name, value, line);
            }
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(object, line) {
            for (let key in object) {
                this.define('overrides', key, object[key], line);    
            }            
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 324;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 122;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 122;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 122;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 95;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 322;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 307;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 307;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 224;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 325;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 308;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 323;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:return yy_.yytext;                                                  
break;
case 31:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 321;
                            
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xeml;
exports.Parser = xeml.Parser;
exports.parse = function () { return xeml.parse.apply(xeml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}