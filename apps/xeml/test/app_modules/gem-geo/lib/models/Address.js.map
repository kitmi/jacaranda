{"version":3,"sources":["../../src/models/Address.js"],"names":["eachAsync_","require","OpenCC","twConverter","module","exports","Base","afterCreate_","context","addressId","return","id","country","States","db","model","data","findOne_","$query","connOptions","inputs","addressFullTxt","fullText","_query","states","findAll_","state","keyAddressFullTxt","convertPromise","startsWith","name","shortName","stateCode","code","updateOne_"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,OAAO,CAAC,YAAD,CAA9B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,WAAW,GAAG,IAAID,MAAJ,CAAW,UAAX,CAApB;;AAEAE,MAAM,CAACC,OAAP,GAAkBC,IAAD,IACb,cAAcA,IAAd,CAAmB;AACU,eAAZC,YAAY,CAACC,OAAD,EAAU;AAC/B,UAAMC,SAAS,GAAGD,OAAO,CAACE,MAAR,CAAeC,EAAjC;AACA,UAAMC,OAAO,GAAGJ,OAAO,CAACE,MAAR,CAAeE,OAAf,IAAyB,IAAzB,GAAgCJ,OAAO,CAACE,MAAR,CAAeE,OAA/C,GAAyD,IAAzE;AACA,UAAMC,MAAM,GAAG,MAAM,KAAKC,EAAL,CAAQC,KAAR,CAAc,OAAd,CAArB;AAEA,UAAMC,IAAI,GAAG,MAAM,KAAKC,QAAL,CAAc;AAAEC,MAAAA,MAAM,EAAE;AAAEP,QAAAA,EAAE,EAAEF;AAAN;AAAV,KAAd,EAA6CD,OAAO,CAACW,WAArD,CAAnB;AACA,UAAMC,MAAM,GAAG,EAAE,GAAGJ;AAAL,KAAf;AACA,UAAMK,cAAc,GAAGL,IAAI,CAACM,QAA5B;AAEA,UAAMC,MAAM,GAAG;AAAEX,MAAAA;AAAF,KAAf;AACA,UAAMY,MAAM,GAAG,MAAMX,MAAM,CAACY,QAAP,CAAgB;AAAEP,MAAAA,MAAM,EAAEK;AAAV,KAAhB,EAAoCf,OAAO,CAACW,WAA5C,CAArB;;AACA,QAAIE,cAAJ,EAAoB;AAChB,YAAMrB,UAAU,CAACwB,MAAD,EAAS,MAAME,KAAN,IAAgB;AACrC,cAAMC,iBAAiB,GAAGf,OAAO,KAAK,IAAZ,GAAmB,MAAMT,WAAW,CAACyB,cAAZ,CAA2BP,cAA3B,CAAzB,GAAsEA,cAAhG;;AAEA,YAAIM,iBAAiB,CAACE,UAAlB,CAA6BH,KAAK,CAACI,IAAnC,KAA4CH,iBAAiB,CAACE,UAAlB,CAA6BH,KAAK,CAACK,SAAnC,CAAhD,EAA+F;AAC3FX,UAAAA,MAAM,CAACY,SAAP,GAAmBN,KAAK,CAACO,IAAzB;AACAb,UAAAA,MAAM,CAACM,KAAP,GAAeA,KAAK,CAACI,IAArB;AACAV,UAAAA,MAAM,CAACR,OAAP,GAAiBA,OAAjB;AACH;AACJ,OARe,CAAhB;AASH;;AAED,UAAM,KAAKsB,UAAL,CAAgB,EAAE,GAAGd;AAAL,KAAhB,EAA+B;AAAEF,MAAAA,MAAM,EAAE;AAAEP,QAAAA,EAAE,EAAEF;AAAN;AAAV,KAA/B,EAA8DD,OAAO,CAACW,WAAtE,CAAN;AACH;;AAzBc,CADvB","sourcesContent":["const { eachAsync_ } = require('@genx/july');\nconst OpenCC = require('opencc');\nconst twConverter = new OpenCC('s2t.json');\n\nmodule.exports = (Base) =>\n    class extends Base {\n        static async afterCreate_(context) {\n            const addressId = context.return.id;\n            const country = context.return.country !=null ? context.return.country : 'TW';\n            const States = await this.db.model('State');\n\n            const data = await this.findOne_({ $query: { id: addressId } }, context.connOptions);\n            const inputs = { ...data };\n            const addressFullTxt = data.fullText;\n\n            const _query = { country };\n            const states = await States.findAll_({ $query: _query }, context.connOptions);\n            if (addressFullTxt) {\n                await eachAsync_(states, async(state) => {\n                    const keyAddressFullTxt = country === 'TW' ? await twConverter.convertPromise(addressFullTxt) : addressFullTxt;\n\n                    if (keyAddressFullTxt.startsWith(state.name) || keyAddressFullTxt.startsWith(state.shortName)) {\n                        inputs.stateCode = state.code;\n                        inputs.state = state.name;\n                        inputs.country = country;\n                    }\n                });\n            }\n\n            await this.updateOne_({ ...inputs }, { $query: { id: addressId } }, context.connOptions);\n        }\n    };\n"],"file":"Address.js"}