{"version":3,"sources":["../../src/models/UserVerification.js"],"names":["ValidationError","InvalidArgument","BadRequest","Forbidden","require","Processors","Validators","Generators","Types","Utils","Lang","module","exports","Base","createEmailVerify_","name","user","email","payload","connOpts","code","TEXT","generate","type","allowedChars","fixedLength","create_","$upsert","createMobileVerify_","mobile","auto","queryVerification_","verifyId","fetchAll","userVerify","findOne_","isExpired","result","id","activate_","password","verifyInfo","User","db","model","doTransaction_","updateOne_"],"mappings":"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","sourcesContent":["const {\n    ValidationError,\n    InvalidArgument,\n    BadRequest,\n    Forbidden,\n} = require('@genx/error');\nconst {\n    Processors,\n    Validators,\n    Generators,\n    Types,\n    Utils: { Lang },\n} = require('@genx/data');\n\nmodule.exports = (Base) =>\n    class extends Base {\n        static async createEmailVerify_(name, user, email, payload, connOpts) {\n            const code = Types.TEXT.generate({\n                type: 'text',\n                allowedChars: 'alphanumeric',\n                fixedLength: 8,\n            });\n            return this.create_(\n                {\n                    name,\n                    user,\n                    email,\n                    code,\n                    payload,\n                },\n                { $upsert: true },\n                connOpts\n            );\n        }\n\n        static async createMobileVerify_(\n            name,\n            user,\n            mobile,\n            payload,\n            connOpts\n        ) {\n            const code = Generators.auto({\n                type: 'text',\n                allowedChars: 'numeric',\n                fixedLength: 6,\n            });\n            return this.create_(\n                {\n                    name,\n                    user,\n                    mobile,\n                    code,\n                    payload,\n                },\n                { $upsert: true },\n                connOpts\n            );\n        }\n\n        static async queryVerification_(verifyId, fetchAll, connOpts) {\n            const userVerify = await this.findOne_(verifyId, connOpts);\n\n            if (!userVerify) {\n                throw new ValidationError('Invalid verification id.', {\n                    name: 'verifyId',\n                });\n            }\n\n            if (userVerify.isExpired) {\n                throw new ValidationError('Verification expired.');\n            }\n\n            if (fetchAll) {\n                return userVerify;\n            }\n\n            const result = {\n                id: userVerify.id,\n                name: userVerify.name,\n            };\n\n            if (userVerify.email) {\n                result.email = userVerify.email;\n            } else {\n                result.mobile = userVerify.mobile;\n            }\n\n            return result;\n        }\n\n        static async activate_(verifyId, code, password, connOpts) {\n            const verifyInfo = await this.queryVerification_(\n                verifyId,\n                true,\n                connOpts\n            );\n\n            if (verifyInfo.code !== code) {\n                throw new ValidationError('Verification code expired!');\n            }\n\n            const User = this.db.model('User');\n\n            return this.db.doTransaction_(\n                async (connOpts) => {\n                    await this.updateOne_(\n                        {\n                            isExpired: true,\n                        },\n                        verifyInfo.id,\n                        connOpts\n                    );\n\n                    return User.activate_(verifyInfo, password, connOpts);\n                },\n                null,\n                connOpts\n            );\n        }\n    };\n"],"file":"UserVerification.js"}