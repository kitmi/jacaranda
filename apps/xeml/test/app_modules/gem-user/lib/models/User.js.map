{"version":3,"sources":["../../src/models/User.js"],"names":["ValidationError","InvalidArgument","BadRequest","Forbidden","require","Processors","Validators","Generators","Convertors","Utils","Lang","_","isPlainObject","eachAsync_","module","exports","Base","omitCredentials","user","omit","validatePassword","password","hashedPassword","$hashPassword","passwordSalt","validateUserCredential_","username","query","status","loginBy","isPhone","mobile","normalizePhone","isEmail","email","toLowerCase","findOne_","$query","$association","isMobileVerified","isEmailVerified","loginUser_","loggedInUser","requireRoles","forUsage","pick","person","Person","db","model","roles","filter","role","usage","isSpecific","length","map","r","matchRoles","intersection","loggedInTime","app","now","updateOne_","currentLoginTime","lastLoginTime","$col","id","addUnverifiedUser_","userInput","connOpts","anyMatch","push","doTransaction_","users","findAll_","$or","whereSame","_userInput","entityName","meta","name","uuid","create_","$retrieveCreated","doesUserExist_","excludeAgent","dupId","extra","every","checkUserWithAnyOf_","undefined","activate_","verifyInfo","payload","JSON","parse","userData","$retrieveUpdated","console","log","grantRoles_","userRoleTypes","code","$in","$exist","currentRoles","Set","forEach","add","connector","insertMany_","Array","from","insertIgnore","grantSpecialRole_"],"mappings":"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","sourcesContent":["const {\n    ValidationError,\n    InvalidArgument,\n    BadRequest,\n    Forbidden,\n} = require('@genx/error');\nconst {\n    Processors,\n    Validators,\n    Generators,\n    Convertors,\n    Utils: { Lang },\n} = require('@genx/data');\nconst { _, isPlainObject, eachAsync_ } = require('@genx/july');\n\nmodule.exports = (Base) =>\n    class extends Base {\n        static omitCredentials(user) {\n            return _.omit(user, ['password', 'passwordSalt']);\n        }\n\n        static validatePassword(user, password) {\n            if (!user) {\n                throw new ValidationError('Invalid credential');\n            }\n\n            // validate password with hash\n            const hashedPassword = this.$hashPassword(\n                password,\n                user.passwordSalt\n            );\n            if (hashedPassword !== user.password) {\n                throw new ValidationError('Invalid credential');\n            }\n        }\n\n        static async validateUserCredential_(username, password) {\n            const query = { status: 'active' };\n            let loginBy = 'username';\n\n            if (Validators.isPhone(username)) {\n                query.mobile = Processors.normalizePhone(username, '+886');\n                loginBy = 'mobile';\n            } else if (Validators.isEmail(username)) {\n                query.email = username.toLowerCase();\n                loginBy = 'email';\n            } else {\n                query.username = username;\n            }\n\n            const user = await this.findOne_({\n                $query: query,\n                $association: ['roles.role'],\n            });\n\n            if (loginBy === 'mobile') {\n                if (!user.isMobileVerified) {\n                    throw new ValidationError('Mobile not verified.');\n                }\n            } else if (loginBy === 'email') {\n                if (!user.isEmailVerified) {\n                    throw new ValidationError('Email not verified.');\n                }\n            }\n\n            this.validatePassword(user, password);\n\n            // omit credential properties\n            return this.omitCredentials(user);\n        }\n\n        static async loginUser_(loggedInUser, requireRoles, forUsage) {\n            const user = _.pick(loggedInUser, [\n                'id',\n                'username',\n                'mobile',\n                'email',\n                'avatar',\n                'name',\n            ]);\n\n            if (loggedInUser.person) {\n                const Person = this.db.model('Person');\n                const person = await Person.findOne_(loggedInUser.person);\n                user[':person'] = person;\n            }\n\n            let roles = loggedInUser[':roles'];\n\n            if (forUsage) {\n                roles = roles.filter(\n                    (role) =>\n                        role[':role'].usage === forUsage &&\n                        !role[':role'].isSpecific\n                );\n                if (roles.length === 0) {\n                    throw new Forbidden('Permission denied.');\n                }\n            }\n\n            user.roles = roles ? roles.map((r) => r.role) : [];\n\n            if (requireRoles) {\n                const matchRoles = _.intersection(user.roles, requireRoles);\n                if (matchRoles.length === 0) {\n                    throw new Forbidden('Permission denied.');\n                }\n            }\n\n            const loggedInTime = this.db.app.now();\n\n            await this.updateOne_(\n                {\n                    currentLoginTime: loggedInTime,\n                    lastLoginTime: Lang.$col('currentLoginTime'),\n                },\n                loggedInUser.id\n            );\n\n            return user;\n        }\n\n        static async addUnverifiedUser_(userInput, connOpts) {\n            let { username, mobile, email } = userInput;\n\n            userInput.email = email.toLowerCase();\n\n            const anyMatch = [\n                {\n                    email,\n                },\n            ];\n\n            if (username) {\n                anyMatch.push({ username });\n            }\n\n            if (mobile) {\n                mobile = Processors.normalizePhone(mobile, '+886');\n                userInput.mobile = mobile;\n                anyMatch.push({ mobile });\n            }\n\n            return this.db.doTransaction_(\n                async (connOpts) => {\n                    const users = await this.findAll_(\n                        {\n                            $query: { status: 'active', $or: anyMatch },\n                        },\n                        connOpts\n                    );\n\n                    if (users.length > 0) {\n                        const user = users[0];\n                        let whereSame;\n                        if (user.email === email) {\n                            whereSame = 'email';\n                        } else if (mobile && user.mobile === mobile) {\n                            whereSame = 'mobile';\n                        } else {\n                            whereSame = 'username';\n                        }\n\n                        throw new ValidationError(\n                            `User with the same \"${whereSame}\" already exists.`\n                        );\n                    }\n\n                    const _userInput = {\n                        ...userInput,\n                        ':resourceGroup': {\n                            entityName: this.meta.name,\n                        },\n                    };\n\n                    _userInput.password = Generators.uuid();\n\n                    return this.create_(\n                        _userInput,\n                        { $retrieveCreated: true },\n                        connOpts\n                    );\n                },\n                null,\n                connOpts\n            );\n        }\n\n        // todo: review\n        static async doesUserExist_(username, excludeAgent) {\n            const query = { dupId: 0 },\n                extra = {};\n\n            if (Validators.isPhone(username)) {\n                query.mobile = Processors.normalizePhone(username, '+61');\n            } else if (Validators.isEmail(username)) {\n                query.email = username.toLowerCase();\n            } else {\n                throw new ValidationError('Invalid username.');\n            }\n\n            if (excludeAgent) {\n                extra.$association = ['roles'];\n            }\n\n            const user = await this.findOne_({\n                $query: query,\n                ...extra,\n            });\n\n            if (excludeAgent) {\n                return (\n                    user &&\n                    _.every(user[':roles'], (role) => role.role !== 'AGENT')\n                );\n            }\n\n            return !!user;\n        }\n\n        // todo: review\n        static async checkUserWithAnyOf_(mobile, email) {\n            let query;\n\n            if (!mobile) {\n                if (!email) {\n                    throw new BadRequest('Both mobile and email are empty.');\n                }\n\n                query = {\n                    email,\n                    dupId: 0,\n                };\n            } else if (!email) {\n                query = {\n                    mobile,\n                    dupId: 0,\n                };\n            } else {\n                query = {\n                    $or: [{ mobile }, { email }],\n                    dupId: 0,\n                };\n            }\n\n            const users = await this.findAll_({\n                $query: query,\n                $association: ['roles'],\n            });\n\n            if (users.length > 1) {\n                throw new BadRequest(\n                    'The specified mobile and email link to two different users.'\n                );\n            }\n\n            return users.length > 0 ? users[0] : undefined;\n        }\n\n        static async activate_(verifyInfo, password, connOpts) {\n            const payload =\n                verifyInfo.payload && JSON.parse(verifyInfo.payload);\n\n            const userData = {\n                status: 'active',\n            };\n\n            if (password) {\n                userData.password = password;\n            }\n\n            if (verifyInfo.email) {\n                userData.isEmailVerified = true;\n            } else if (verifyInfo.mobile) {\n                userData.isMobileVerified = true;\n            }\n\n            const user = await this.updateOne_(\n                userData,\n                {\n                    $query: {\n                        id: verifyInfo.user,\n                    },\n                    $retrieveUpdated: {\n                        $association: ['roles'],\n                    },\n                },\n                connOpts\n            );\n\n            console.log(user);\n\n            if (payload.roles && payload.roles.length > 0) {\n                await this.grantRoles_(user, payload.roles, payload, connOpts);\n            }\n        }\n\n        static async grantRoles_(user, roles, payload, connOpts) {\n            const userRoleTypes = await this.db.model('UserRoleType').findAll_(\n                {\n                    code: { $in: roles },\n                    usage: { $exist: true },\n                },\n                connOpts\n            );\n\n            return this.db.doTransaction_(\n                async (connOpts) => {\n                    if (!isPlainObject(user) || !user[':roles']) {\n                        user = await this.findOne_(\n                            {\n                                $query: {\n                                    id: isPlainObject(user) ? user.id : user,\n                                },\n                                $association: ['roles'],\n                            },\n                            connOpts\n                        );\n                    }\n\n                    const currentRoles = new Set([\n                        user[':roles'].map((role) => role.role),\n                    ]);\n\n                    roles.forEach((role) => {\n                        currentRoles.add(role);\n                    });\n\n                    await this.db.connector.insertMany_(\n                        'userRole',\n                        ['user', 'role'],\n                        Array.from(roles).map((role) => [user.id, role]),\n                        { ...connOpts, insertIgnore: true }\n                    );\n\n                    if (userRoleTypes.length > 0) {\n                        await eachAsync_(userRoleTypes, (role) =>\n                            this.grantSpecialRole_(\n                                user,\n                                role,\n                                payload,\n                                connOpts\n                            )\n                        );\n                    }\n                },\n                null,\n                connOpts\n            );\n        }\n    };\n"],"file":"User.js"}