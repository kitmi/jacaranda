{"version":3,"sources":["../../src/models/Resource.js"],"names":["ValidationError","ApplicationError","require","Utils","Lang","mime","module","exports","Base","getMimeTypeByName","fileName","posLastQ","lastIndexOf","substring","posLastDot","ext","length","getType","addResourceToGroup_","input","variables","connOpts","group","db","safeRetry_","max","findAll_","$query","category","$projection","type","name","alias","args","indexOrder","ret","create_","$retrieveCreated","UNCATEGORIZED"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA,eAAF;AAAmBC,EAAAA;AAAnB,IAAwCC,OAAO,CAAC,aAAD,CAArD;;AACA,MAAM;AACFC,EAAAA,KAAK,EAAE;AAAEC,IAAAA;AAAF;AADL,IAEFF,OAAO,CAAC,YAAD,CAFX;;AAIA,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAApB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD;AAAA;;AAAA,kBACb,cAAcA,IAAd,CAAmB;AAGS,WAAjBC,iBAAiB,CAACC,QAAD,EAAW;AAC/B,UAAI,CAACA,QAAL,EAAe;AACX,cAAM,IAAIT,gBAAJ,CAAqB,oBAArB,CAAN;AACH;;AAED,YAAMU,QAAQ,GAAGD,QAAQ,CAACE,WAAT,CAAqB,GAArB,CAAjB;;AAEA,UAAID,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACjBD,QAAAA,QAAQ,GAAGA,QAAQ,CAACG,SAAT,CAAmB,CAAnB,EAAsBF,QAAtB,CAAX;AACH;;AAED,YAAMG,UAAU,GAAGJ,QAAQ,CAACE,WAAT,CAAqB,GAArB,CAAnB;AACA,YAAMG,GAAG,GAAGL,QAAQ,CAACG,SAAT,CAAmBC,UAAU,GAAC,CAA9B,CAAZ;;AAEA,UAAIC,GAAG,CAACC,MAAJ,GAAa,CAAjB,EAAoB;AAChB,cAAM,IAAIhB,eAAJ,CAAoB,0CAApB,CAAN;AACH;;AAED,aAAOK,IAAI,CAACY,OAAL,CAAaF,GAAb,CAAP;AACH;;AAE+B,iBAAnBG,mBAAmB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,QAAnB,EAA6B;AACzD,UAAI,CAACF,KAAK,CAACG,KAAX,EAAkB;AACd,cAAM,IAAItB,eAAJ,CAAoB,sBAApB,CAAN;AACH;;AAED,aAAO,KAAKuB,EAAL,CAAQC,UAAR,CACH,8BADG,EAEH,MAAOH,QAAP,IAAoB;AAChB,YAAI,CAAC;AAAEI,UAAAA;AAAF,SAAD,IAAY,MAAM,KAAKC,QAAL,CAAc;AAChCC,UAAAA,MAAM,EAAE;AACJL,YAAAA,KAAK,EAAEH,KAAK,CAACG,KADT;AAEJM,YAAAA,QAAQ,EAAET,KAAK,CAACS;AAFZ,WADwB;AAKhCC,UAAAA,WAAW,EAAE,CACT;AACIC,YAAAA,IAAI,EAAE,UADV;AAEIC,YAAAA,IAAI,EAAE,KAFV;AAGIC,YAAAA,KAAK,EAAE,KAHX;AAIIC,YAAAA,IAAI,EAAE,CAAC,YAAD;AAJV,WADS;AALmB,SAAd,EAanBZ,QAbmB,CAAtB;AAeAI,QAAAA,GAAG;AAEHN,QAAAA,KAAK,CAACe,UAAN,GAAmBT,GAAnB;AAEA,cAAMU,GAAG,GAAG,MAAM,KAAKC,OAAL,CACdjB,KADc,EAEd;AAAEkB,UAAAA,gBAAgB,EAAE;AAApB,SAFc,EAGdhB,QAHc,CAAlB;AAMA,eAAOc,GAAP;AACH,OA7BE,EA8BHd,QA9BG,CAAP;AAgCH;;AA7Dc,GADN,SAEFiB,aAFE,GAEc,eAFd;AAAA,CAAjB","sourcesContent":["const { ValidationError, ApplicationError } = require('@genx/error');\nconst {\n    Utils: { Lang },\n} = require('@genx/data');\n\nconst mime = require('mime');\n\nmodule.exports = (Base) =>\n    class extends Base {\n        static UNCATEGORIZED = 'uncategorized';\n\n        static getMimeTypeByName(fileName) {\n            if (!fileName) {\n                throw new ApplicationError('Invalid file name.');\n            }\n\n            const posLastQ = fileName.lastIndexOf('?');\n            // drop query part\n            if (posLastQ !== -1) {\n                fileName = fileName.substring(0, posLastQ);\n            }\n\n            const posLastDot = fileName.lastIndexOf('.');\n            const ext = fileName.substring(posLastDot+1);\n\n            if (ext.length > 5) {\n                throw new ValidationError('The file name does contain an extension.')\n            }\n\n            return mime.getType(ext);    \n        }\n\n        static async addResourceToGroup_(input, variables, connOpts) {\n            if (!input.group) {\n                throw new ValidationError('\"group\" is required.');\n            }\n\n            return this.db.safeRetry_(\n                'Resource.addResourceToGroup_',\n                async (connOpts) => {\n                    let [{ max }] = await this.findAll_({\n                        $query: {\n                            group: input.group,\n                            category: input.category,\n                        },\n                        $projection: [\n                            {\n                                type: 'function',\n                                name: 'MAX',\n                                alias: 'max',\n                                args: ['indexOrder'],\n                            },\n                        ],\n                    }, connOpts);\n\n                    max++;\n\n                    input.indexOrder = max;\n\n                    const ret = await this.create_(\n                        input,\n                        { $retrieveCreated: true },\n                        connOpts\n                    );\n\n                    return ret;\n                },\n                connOpts\n            );\n        }\n    };\n"],"file":"Resource.js"}