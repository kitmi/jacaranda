{"version":3,"sources":["../src/JsonConfigProvider.js"],"sourcesContent":["import { _ } from '@kitmi/utils';\nimport path from 'node:path';\nimport { readFile, writeFile } from 'node:fs/promises';\n\nclass JsonConfigProvider {\n    /**\n     * JSON file config data source\n     * @constructs JsonConfigProvider\n     * @param {string} filePath - The path of config file\n     */\n    constructor(filePath) {\n        this.filePath = filePath;\n\n        /**\n         * The loaded config\n         * @type {object}\n         * @public\n         */\n        this.config = undefined;\n    }\n\n    parse(fileContent) {\n        return JSON.parse(fileContent);\n    }\n\n    stringify() {\n        return JSON.stringify(this.config ?? {}, null, 4);\n    }\n\n    /**\n     * Start loading the config files\n     * @returns {Promise.<object>}\n     */\n    async load_(logger, noThrow) {\n        try {\n            this.config = this.parse(await readFile(this.filePath, 'utf-8'));            \n        } catch (error) {\n            if (noThrow) {\n                logger?.log('warn', error.message || error);\n                return undefined;\n            }\n\n            throw error;\n        }\n\n        logger?.log('info', `Configuration is loaded from \"${path.relative(process.cwd(), this.filePath)}\"`);\n\n        return this.config;\n    }\n\n    /**\n     * Start saving the config to files\n     * @returns {Promise.<*>}\n     */\n    async save_() {\n        await writeFile(this.filePath, this.stringify(), 'utf-8');\n    }\n\n    /**\n     * Update config item by dotted path.\n     * @param {string} key - The path of config item, e.g. \"item.subItem.key\" refers to { item: { subItem: { key: \"*\" } } }\n     * @param {*} value - New value of config item\n     * @returns {JsonConfigProvider}\n     */\n    setItem(key, value) {\n        _.set(this.config, key, value);\n        return this;\n    }\n\n    /**\n     * Get config item by dotted path.\n     * @param {string} key\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getItem(key, defaultValue) {\n        return _.get(this.config, key, defaultValue);\n    }\n}\n\nexport default JsonConfigProvider;\n"],"names":["JsonConfigProvider","parse","fileContent","JSON","stringify","config","load_","logger","noThrow","readFile","filePath","error","log","message","undefined","path","relative","process","cwd","save_","writeFile","setItem","key","value","_","set","getItem","defaultValue","get","constructor"],"mappings":";;;;+BAgFA;;;eAAA;;;uBAhFkB;iEACD;0BACmB;;;;;;AAEpC,MAAMA;IAiBFC,MAAMC,WAAW,EAAE;QACf,OAAOC,KAAKF,KAAK,CAACC;IACtB;IAEAE,YAAY;QACR,OAAOD,KAAKC,SAAS,CAAC,IAAI,CAACC,MAAM,IAAI,CAAC,GAAG,MAAM;IACnD;IAEA;;;KAGC,GACD,MAAMC,MAAMC,MAAM,EAAEC,OAAO,EAAE;QACzB,IAAI;YACA,IAAI,CAACH,MAAM,GAAG,IAAI,CAACJ,KAAK,CAAC,MAAMQ,IAAAA,kBAAQ,EAAC,IAAI,CAACC,QAAQ,EAAE;QAC3D,EAAE,OAAOC,OAAO;YACZ,IAAIH,SAAS;gBACTD,QAAQK,IAAI,QAAQD,MAAME,OAAO,IAAIF;gBACrC,OAAOG;YACX;YAEA,MAAMH;QACV;QAEAJ,QAAQK,IAAI,QAAQ,CAAC,8BAA8B,EAAEG,iBAAI,CAACC,QAAQ,CAACC,QAAQC,GAAG,IAAI,IAAI,CAACR,QAAQ,EAAE,CAAC,CAAC;QAEnG,OAAO,IAAI,CAACL,MAAM;IACtB;IAEA;;;KAGC,GACD,MAAMc,QAAQ;QACV,MAAMC,IAAAA,mBAAS,EAAC,IAAI,CAACV,QAAQ,EAAE,IAAI,CAACN,SAAS,IAAI;IACrD;IAEA;;;;;KAKC,GACDiB,QAAQC,GAAG,EAAEC,KAAK,EAAE;QAChBC,QAAC,CAACC,GAAG,CAAC,IAAI,CAACpB,MAAM,EAAEiB,KAAKC;QACxB,OAAO,IAAI;IACf;IAEA;;;;;KAKC,GACDG,QAAQJ,GAAG,EAAEK,YAAY,EAAE;QACvB,OAAOH,QAAC,CAACI,GAAG,CAAC,IAAI,CAACvB,MAAM,EAAEiB,KAAKK;IACnC;IAxEA;;;;KAIC,GACDE,YAAYnB,QAAQ,CAAE;QAClB,IAAI,CAACA,QAAQ,GAAGA;QAEhB;;;;SAIC,GACD,IAAI,CAACL,MAAM,GAAGS;IAClB;AA2DJ;MAEA,WAAed"}