{"version":3,"sources":["../src/Pipeline.js"],"sourcesContent":["import { _, eachAsync_, get as _get, set as _set, isPlainObject } from '@kitmi/utils';\n\nimport * as builtinTasks from './tasks';\nimport JSX from '@kitmi/jsonx/bundle';\n\nconst JSV = JSX.JSV;\n\nfunction pushStep(steps, step) {\n    if (step.name.startsWith('$')) {\n        throw new Error('Invalid step name: ' + step.name);\n    }\n\n    steps.push(step);\n}\n\nexport function normalizeSteps(steps) {\n    if (Array.isArray(steps)) {\n        return steps.reduce((acc, step) => {\n            if (typeof step === 'string') {\n                pushStep(acc, { name: step, task: step });\n            } else if (isPlainObject(step)) {\n                if (step.task == null) {\n                    throw new Error('Task name is required.');\n                }\n\n                pushStep(acc, { name: step.task, ...step });\n            } else {\n                throw new Error('Invalid step info: ' + JSON.stringify(step));\n            }\n\n            return acc;\n        }, []);\n    }\n\n    if (!isPlainObject(steps)) {\n        throw new Error('Invalid steps: ' + JSON.stringify(steps));\n    }\n\n    return _.reduce(\n        steps,\n        (acc, stepInfo, name) => {\n            pushStep(acc, { name, task: name, ...stepInfo });\n            return acc;\n        },\n        []\n    );\n}\n\nclass Pipeline {\n    constructor(app, name, steps, { env, taskProvider, stepLogger }) {\n        this.app = app;\n        this.name = name;\n        this.steps = steps;\n\n        this.taskProvider = this.app.getService(taskProvider);\n        this.stepLogger = this.app.getService(stepLogger);\n\n        this.completed = [];\n        this.variables = {\n            $app: {\n                workingPath: app.workingPath,\n            },\n            $env: env,\n            $data: null,\n        };\n        this.failed = null;\n        this.processing = null;\n        this.started = false;\n        this.finished = false;\n    }\n\n    setVariables(...args) {\n        if (this.started) {\n            throw new Error('Variables cannot be set after the pipeline is started.');\n        }\n\n        if (args.length === 1) {\n            this.variables = { ...this.variables, ...args[0] };\n        } else if (args.length === 2) {\n            this.variables[args[0]] = args[1];\n        } else {\n            throw new Error('Invalid arguments.');\n        }\n    }        \n\n    getStepVariables() {\n        return _.reduce(this.variables, (acc, value, key) => {\n            if (!key.startsWith('$')) {\n                acc[key] = value;\n            }\n            return acc;\n        }, {});\n    }\n\n    getValue(name) {\n        if (name.startsWith('$last.')) {\n            const lastStep = this.completed[this.completed.length - 1];\n            if (this.processing.index !== lastStep.index + 1) {\n                throw new Error(`Last step which is depended by the current step \"${this.processing.name}\" is failed.`);\n            }\n\n            name = lastStep.name + '.' + name.substring(6);\n        }\n\n        const value = _get(this.variables, name);\n        if (value === undefined) {\n            throw new Error(`Value \"${name}\" not found from context.`);\n        }\n\n        return value;\n    }\n\n    setData(...args) {\n        if (args.length === 1) {\n            this.variables.$data = args[0];\n        } else if (args.length === 2) {\n            this.variables.$data = { ...this.variables.$data, [args[0]]: args[1] };\n        } else {\n            throw new Error('Invalid arguments.');\n        }\n    }\n\n    async run_(input) {\n        if (!this.finished) {\n            this.started = true;\n            this.variables.$input = input;\n\n            this.app.info(`Running job \"${this.name}\" ...`, { job: this.name, numSteps: this.steps.length });\n\n            await eachAsync_(this.steps, async ({ name, task, when, continueOnError, ...stepInfo }, stepIndex) => {\n                if (when) {\n                    const [matched, unmatchedReason] = JSV.match(this.variables, when);\n                    if (!matched) {\n                        this.app.info(`Step \"${name}\" is skipped due to: ${unmatchedReason}`, {\n                            job: this.name,\n                            name,\n                            task,\n                        });\n                        return;\n                    }\n                }\n\n                const taskExecutor = this.taskProvider?.getTask(task) || builtinTasks[task];\n\n                if (taskExecutor == null) {\n                    throw new Error(`Task \"${task}\" not found.`);\n                }\n\n                const stepMeta = {\n                    name,\n                    task,\n                    index: stepIndex,\n                };\n\n                const step = {\n                    ...stepMeta,\n                    setData: (...args) => this.setData(...args),\n                    getValue: (name) => this.getValue(name),\n                    cloneValues: () => ({ ...this.variables }),\n                    replaceValues: (obj) =>\n                        _.mapValues(obj, (value) => {\n                            if (isPlainObject(value)) {\n                                return step.replaceValues(value);\n                            }\n\n                            if (typeof value !== 'string') {\n                                throw new Error(\n                                    'Value name must be a string, for literal values please use the \"define\" task.'\n                                );\n                            }\n\n                            return step.getValue(value);\n                        }),\n                    // pipeline-related output\n                    syslog: (level, msg, info) => this.app.log(level, msg, { job: this.name, ...stepMeta, ...info }),\n                    // the business-related output\n                    log: (level, msg, info) =>\n                        this.stepLogger.log(level, msg, { meta: { job: this.name, ...stepMeta }, ...info }),\n                    getService: (name) => {\n                        const service = this.app.getService(name);\n                        if (service == null) {\n                            throw new Error(`Service \"${name}\" not found.`);\n                        }\n                        return service;\n                    },\n                };\n\n                this.processing = stepMeta;\n\n                this.app.info(`Running step \"${name}\" ... [${stepIndex + 1}/${this.steps.length}]`, {\n                    job: this.name,\n                    ...stepMeta,\n                });\n\n                try {\n                    this.variables[name] = await taskExecutor(step, stepInfo);\n                } catch (error) {\n                    if (this.failed == null) {\n                        this.failed = [];\n                    }\n                    this.failed.push(this.processing);\n                    delete this.processing;\n\n                    if (continueOnError) {\n                        this.app.error(\n                            `Error of step \"${name}\" is ignored as \"continueOnError\" enabled. ${error.message}`,\n                            {\n                                job: this.name,\n                                ...stepMeta,\n                            }\n                        );\n                        return;\n                    }\n\n                    this.app.error(`Step \"${name}\" failed.`, { job: this.name, ...stepMeta });\n                    \n                    throw error;\n                }\n\n                this.completed.push(this.processing);\n                delete this.processing;\n\n                this.app.info(`Step \"${name}\" is done.`, { job: this.name, ...stepMeta });\n            });\n\n            this.finished = true;\n        }\n\n        this.app.info(`Job \"${this.name}\" is completed.`, { job: this.name });\n        this.started = false;\n\n        return this.variables.$data;\n    }\n}\n\nexport default Pipeline;\n"],"names":["normalizeSteps","JSV","JSX","pushStep","steps","step","name","startsWith","Error","push","Array","isArray","reduce","acc","task","isPlainObject","JSON","stringify","_","stepInfo","Pipeline","setVariables","args","started","length","variables","getStepVariables","value","key","getValue","lastStep","completed","processing","index","substring","_get","undefined","setData","$data","run_","input","finished","$input","app","info","job","numSteps","eachAsync_","when","continueOnError","stepIndex","matched","unmatchedReason","match","taskExecutor","taskProvider","getTask","builtinTasks","stepMeta","cloneValues","replaceValues","obj","mapValues","syslog","level","msg","log","stepLogger","meta","getService","service","error","failed","message","constructor","env","$app","workingPath","$env"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IA2OA,OAAwB;eAAxB;;IA5NgBA,cAAc;eAAdA;;;uBAfuD;+DAEzC;+DACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhB,MAAMC,MAAMC,eAAG,CAACD,GAAG;AAEnB,SAASE,SAASC,KAAK,EAAEC,IAAI;IACzB,IAAIA,KAAKC,IAAI,CAACC,UAAU,CAAC,MAAM;QAC3B,MAAM,IAAIC,MAAM,wBAAwBH,KAAKC,IAAI;IACrD;IAEAF,MAAMK,IAAI,CAACJ;AACf;AAEO,SAASL,eAAeI,KAAK;IAChC,IAAIM,MAAMC,OAAO,CAACP,QAAQ;QACtB,OAAOA,MAAMQ,MAAM,CAAC,CAACC,KAAKR;YACtB,IAAI,OAAOA,SAAS,UAAU;gBAC1BF,SAASU,KAAK;oBAAEP,MAAMD;oBAAMS,MAAMT;gBAAK;YAC3C,OAAO,IAAIU,IAAAA,oBAAa,EAACV,OAAO;gBAC5B,IAAIA,KAAKS,IAAI,IAAI,MAAM;oBACnB,MAAM,IAAIN,MAAM;gBACpB;gBAEAL,SAASU,KAAK;oBAAEP,MAAMD,KAAKS,IAAI;oBAAE,GAAGT,IAAI;gBAAC;YAC7C,OAAO;gBACH,MAAM,IAAIG,MAAM,wBAAwBQ,KAAKC,SAAS,CAACZ;YAC3D;YAEA,OAAOQ;QACX,GAAG,EAAE;IACT;IAEA,IAAI,CAACE,IAAAA,oBAAa,EAACX,QAAQ;QACvB,MAAM,IAAII,MAAM,oBAAoBQ,KAAKC,SAAS,CAACb;IACvD;IAEA,OAAOc,QAAC,CAACN,MAAM,CACXR,OACA,CAACS,KAAKM,UAAUb;QACZH,SAASU,KAAK;YAAEP;YAAMQ,MAAMR;YAAM,GAAGa,QAAQ;QAAC;QAC9C,OAAON;IACX,GACA,EAAE;AAEV;AAEA,MAAMO;IAuBFC,aAAa,GAAGC,IAAI,EAAE;QAClB,IAAI,IAAI,CAACC,OAAO,EAAE;YACd,MAAM,IAAIf,MAAM;QACpB;QAEA,IAAIc,KAAKE,MAAM,KAAK,GAAG;YACnB,IAAI,CAACC,SAAS,GAAG;gBAAE,GAAG,IAAI,CAACA,SAAS;gBAAE,GAAGH,IAAI,CAAC,EAAE;YAAC;QACrD,OAAO,IAAIA,KAAKE,MAAM,KAAK,GAAG;YAC1B,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,EAAE,CAAC,GAAGA,IAAI,CAAC,EAAE;QACrC,OAAO;YACH,MAAM,IAAId,MAAM;QACpB;IACJ;IAEAkB,mBAAmB;QACf,OAAOR,QAAC,CAACN,MAAM,CAAC,IAAI,CAACa,SAAS,EAAE,CAACZ,KAAKc,OAAOC;YACzC,IAAI,CAACA,IAAIrB,UAAU,CAAC,MAAM;gBACtBM,GAAG,CAACe,IAAI,GAAGD;YACf;YACA,OAAOd;QACX,GAAG,CAAC;IACR;IAEAgB,SAASvB,IAAI,EAAE;QACX,IAAIA,KAAKC,UAAU,CAAC,WAAW;YAC3B,MAAMuB,WAAW,IAAI,CAACC,SAAS,CAAC,IAAI,CAACA,SAAS,CAACP,MAAM,GAAG,EAAE;YAC1D,IAAI,IAAI,CAACQ,UAAU,CAACC,KAAK,KAAKH,SAASG,KAAK,GAAG,GAAG;gBAC9C,MAAM,IAAIzB,MAAM,CAAC,iDAAiD,EAAE,IAAI,CAACwB,UAAU,CAAC1B,IAAI,CAAC,YAAY,CAAC;YAC1G;YAEAA,OAAOwB,SAASxB,IAAI,GAAG,MAAMA,KAAK4B,SAAS,CAAC;QAChD;QAEA,MAAMP,QAAQQ,IAAAA,UAAI,EAAC,IAAI,CAACV,SAAS,EAAEnB;QACnC,IAAIqB,UAAUS,WAAW;YACrB,MAAM,IAAI5B,MAAM,CAAC,OAAO,EAAEF,KAAK,yBAAyB,CAAC;QAC7D;QAEA,OAAOqB;IACX;IAEAU,QAAQ,GAAGf,IAAI,EAAE;QACb,IAAIA,KAAKE,MAAM,KAAK,GAAG;YACnB,IAAI,CAACC,SAAS,CAACa,KAAK,GAAGhB,IAAI,CAAC,EAAE;QAClC,OAAO,IAAIA,KAAKE,MAAM,KAAK,GAAG;YAC1B,IAAI,CAACC,SAAS,CAACa,KAAK,GAAG;gBAAE,GAAG,IAAI,CAACb,SAAS,CAACa,KAAK;gBAAE,CAAChB,IAAI,CAAC,EAAE,CAAC,EAAEA,IAAI,CAAC,EAAE;YAAC;QACzE,OAAO;YACH,MAAM,IAAId,MAAM;QACpB;IACJ;IAEA,MAAM+B,KAAKC,KAAK,EAAE;QACd,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;YAChB,IAAI,CAAClB,OAAO,GAAG;YACf,IAAI,CAACE,SAAS,CAACiB,MAAM,GAAGF;YAExB,IAAI,CAACG,GAAG,CAACC,IAAI,CAAC,CAAC,aAAa,EAAE,IAAI,CAACtC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAAEuC,KAAK,IAAI,CAACvC,IAAI;gBAAEwC,UAAU,IAAI,CAAC1C,KAAK,CAACoB,MAAM;YAAC;YAE9F,MAAMuB,IAAAA,iBAAU,EAAC,IAAI,CAAC3C,KAAK,EAAE,OAAO,EAAEE,IAAI,EAAEQ,IAAI,EAAEkC,IAAI,EAAEC,eAAe,EAAE,GAAG9B,UAAU,EAAE+B;gBACpF,IAAIF,MAAM;oBACN,MAAM,CAACG,SAASC,gBAAgB,GAAGnD,IAAIoD,KAAK,CAAC,IAAI,CAAC5B,SAAS,EAAEuB;oBAC7D,IAAI,CAACG,SAAS;wBACV,IAAI,CAACR,GAAG,CAACC,IAAI,CAAC,CAAC,MAAM,EAAEtC,KAAK,qBAAqB,EAAE8C,gBAAgB,CAAC,EAAE;4BAClEP,KAAK,IAAI,CAACvC,IAAI;4BACdA;4BACAQ;wBACJ;wBACA;oBACJ;gBACJ;gBAEA,MAAMwC,eAAe,IAAI,CAACC,YAAY,EAAEC,QAAQ1C,SAAS2C,MAAY,CAAC3C,KAAK;gBAE3E,IAAIwC,gBAAgB,MAAM;oBACtB,MAAM,IAAI9C,MAAM,CAAC,MAAM,EAAEM,KAAK,YAAY,CAAC;gBAC/C;gBAEA,MAAM4C,WAAW;oBACbpD;oBACAQ;oBACAmB,OAAOiB;gBACX;gBAEA,MAAM7C,OAAO;oBACT,GAAGqD,QAAQ;oBACXrB,SAAS,CAAC,GAAGf,OAAS,IAAI,CAACe,OAAO,IAAIf;oBACtCO,UAAU,CAACvB,OAAS,IAAI,CAACuB,QAAQ,CAACvB;oBAClCqD,aAAa,IAAO,CAAA;4BAAE,GAAG,IAAI,CAAClC,SAAS;wBAAC,CAAA;oBACxCmC,eAAe,CAACC,MACZ3C,QAAC,CAAC4C,SAAS,CAACD,KAAK,CAAClC;4BACd,IAAIZ,IAAAA,oBAAa,EAACY,QAAQ;gCACtB,OAAOtB,KAAKuD,aAAa,CAACjC;4BAC9B;4BAEA,IAAI,OAAOA,UAAU,UAAU;gCAC3B,MAAM,IAAInB,MACN;4BAER;4BAEA,OAAOH,KAAKwB,QAAQ,CAACF;wBACzB;oBACJ,0BAA0B;oBAC1BoC,QAAQ,CAACC,OAAOC,KAAKrB,OAAS,IAAI,CAACD,GAAG,CAACuB,GAAG,CAACF,OAAOC,KAAK;4BAAEpB,KAAK,IAAI,CAACvC,IAAI;4BAAE,GAAGoD,QAAQ;4BAAE,GAAGd,IAAI;wBAAC;oBAC9F,8BAA8B;oBAC9BsB,KAAK,CAACF,OAAOC,KAAKrB,OACd,IAAI,CAACuB,UAAU,CAACD,GAAG,CAACF,OAAOC,KAAK;4BAAEG,MAAM;gCAAEvB,KAAK,IAAI,CAACvC,IAAI;gCAAE,GAAGoD,QAAQ;4BAAC;4BAAG,GAAGd,IAAI;wBAAC;oBACrFyB,YAAY,CAAC/D;wBACT,MAAMgE,UAAU,IAAI,CAAC3B,GAAG,CAAC0B,UAAU,CAAC/D;wBACpC,IAAIgE,WAAW,MAAM;4BACjB,MAAM,IAAI9D,MAAM,CAAC,SAAS,EAAEF,KAAK,YAAY,CAAC;wBAClD;wBACA,OAAOgE;oBACX;gBACJ;gBAEA,IAAI,CAACtC,UAAU,GAAG0B;gBAElB,IAAI,CAACf,GAAG,CAACC,IAAI,CAAC,CAAC,cAAc,EAAEtC,KAAK,OAAO,EAAE4C,YAAY,EAAE,CAAC,EAAE,IAAI,CAAC9C,KAAK,CAACoB,MAAM,CAAC,CAAC,CAAC,EAAE;oBAChFqB,KAAK,IAAI,CAACvC,IAAI;oBACd,GAAGoD,QAAQ;gBACf;gBAEA,IAAI;oBACA,IAAI,CAACjC,SAAS,CAACnB,KAAK,GAAG,MAAMgD,aAAajD,MAAMc;gBACpD,EAAE,OAAOoD,OAAO;oBACZ,IAAI,IAAI,CAACC,MAAM,IAAI,MAAM;wBACrB,IAAI,CAACA,MAAM,GAAG,EAAE;oBACpB;oBACA,IAAI,CAACA,MAAM,CAAC/D,IAAI,CAAC,IAAI,CAACuB,UAAU;oBAChC,OAAO,IAAI,CAACA,UAAU;oBAEtB,IAAIiB,iBAAiB;wBACjB,IAAI,CAACN,GAAG,CAAC4B,KAAK,CACV,CAAC,eAAe,EAAEjE,KAAK,2CAA2C,EAAEiE,MAAME,OAAO,CAAC,CAAC,EACnF;4BACI5B,KAAK,IAAI,CAACvC,IAAI;4BACd,GAAGoD,QAAQ;wBACf;wBAEJ;oBACJ;oBAEA,IAAI,CAACf,GAAG,CAAC4B,KAAK,CAAC,CAAC,MAAM,EAAEjE,KAAK,SAAS,CAAC,EAAE;wBAAEuC,KAAK,IAAI,CAACvC,IAAI;wBAAE,GAAGoD,QAAQ;oBAAC;oBAEvE,MAAMa;gBACV;gBAEA,IAAI,CAACxC,SAAS,CAACtB,IAAI,CAAC,IAAI,CAACuB,UAAU;gBACnC,OAAO,IAAI,CAACA,UAAU;gBAEtB,IAAI,CAACW,GAAG,CAACC,IAAI,CAAC,CAAC,MAAM,EAAEtC,KAAK,UAAU,CAAC,EAAE;oBAAEuC,KAAK,IAAI,CAACvC,IAAI;oBAAE,GAAGoD,QAAQ;gBAAC;YAC3E;YAEA,IAAI,CAACjB,QAAQ,GAAG;QACpB;QAEA,IAAI,CAACE,GAAG,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACtC,IAAI,CAAC,eAAe,CAAC,EAAE;YAAEuC,KAAK,IAAI,CAACvC,IAAI;QAAC;QACnE,IAAI,CAACiB,OAAO,GAAG;QAEf,OAAO,IAAI,CAACE,SAAS,CAACa,KAAK;IAC/B;IAvLAoC,YAAY/B,GAAG,EAAErC,IAAI,EAAEF,KAAK,EAAE,EAAEuE,GAAG,EAAEpB,YAAY,EAAEY,UAAU,EAAE,CAAE;QAC7D,IAAI,CAACxB,GAAG,GAAGA;QACX,IAAI,CAACrC,IAAI,GAAGA;QACZ,IAAI,CAACF,KAAK,GAAGA;QAEb,IAAI,CAACmD,YAAY,GAAG,IAAI,CAACZ,GAAG,CAAC0B,UAAU,CAACd;QACxC,IAAI,CAACY,UAAU,GAAG,IAAI,CAACxB,GAAG,CAAC0B,UAAU,CAACF;QAEtC,IAAI,CAACpC,SAAS,GAAG,EAAE;QACnB,IAAI,CAACN,SAAS,GAAG;YACbmD,MAAM;gBACFC,aAAalC,IAAIkC,WAAW;YAChC;YACAC,MAAMH;YACNrC,OAAO;QACX;QACA,IAAI,CAACkC,MAAM,GAAG;QACd,IAAI,CAACxC,UAAU,GAAG;QAClB,IAAI,CAACT,OAAO,GAAG;QACf,IAAI,CAACkB,QAAQ,GAAG;IACpB;AAoKJ;MAEA,WAAerB"}