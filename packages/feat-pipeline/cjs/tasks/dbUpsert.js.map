{"version":3,"sources":["../../src/tasks/dbUpsert.js"],"sourcesContent":["import { _, isPlainObject } from '@kitmi/utils';\nimport { Types } from '@kitmi/validators/allSync';\n\nfunction mergeWhereIntoData(where, data) {\n    const flatten = (obj) => _.reduce(obj, (acc, value, key) => {\n        if (isPlainObject(value)) {\n            Object.assign(acc, flatten(value));\n            return acc;\n        }\n\n        acc[key] = value;\n        return acc;\n    }, {});\n\n    return { ...flatten(where), ...data };\n}\n\nexport default async function dbFindUnique(step, settings) {    \n    let { service, model, where, create, update } = Types.OBJECT.sanitize(settings, {\n        schema: {\n            service: { type: 'text' },\n            model: { type: 'text' },\n            where: { type: 'object' },\n            create: { type: 'object', optional: true },\n            update: { type: 'object', optional: true },\n        },\n    });\n\n    service = step.getService(service);\n    model = step.getValue(model);\n    where = step.replaceValues(where);\n\n    if (create) {\n        create = step.replaceValues(create);\n    }\n    if (update) {\n        update = step.replaceValues(update);\n    }\n\n    const Model = service[model];\n    const upsertInfo = { where, create: mergeWhereIntoData(where, create), update: mergeWhereIntoData(where, update) };\n    \n    await Model.upsert(upsertInfo);\n\n    return null;\n}\n"],"names":["dbFindUnique","mergeWhereIntoData","where","data","flatten","obj","_","reduce","acc","value","key","isPlainObject","Object","assign","step","settings","service","model","create","update","Types","OBJECT","sanitize","schema","type","optional","getService","getValue","replaceValues","Model","upsertInfo","upsert"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAiBA;;;eAA8BA;;;uBAjBG;yBACX;AAEtB,SAASC,mBAAmBC,KAAK,EAAEC,IAAI;IACnC,MAAMC,UAAU,CAACC,MAAQC,QAAC,CAACC,MAAM,CAACF,KAAK,CAACG,KAAKC,OAAOC;YAChD,IAAIC,IAAAA,oBAAa,EAACF,QAAQ;gBACtBG,OAAOC,MAAM,CAACL,KAAKJ,QAAQK;gBAC3B,OAAOD;YACX;YAEAA,GAAG,CAACE,IAAI,GAAGD;YACX,OAAOD;QACX,GAAG,CAAC;IAEJ,OAAO;QAAE,GAAGJ,QAAQF,MAAM;QAAE,GAAGC,IAAI;IAAC;AACxC;AAEe,eAAeH,aAAac,IAAI,EAAEC,QAAQ;IACrD,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEf,KAAK,EAAEgB,MAAM,EAAEC,MAAM,EAAE,GAAGC,cAAK,CAACC,MAAM,CAACC,QAAQ,CAACP,UAAU;QAC5EQ,QAAQ;YACJP,SAAS;gBAAEQ,MAAM;YAAO;YACxBP,OAAO;gBAAEO,MAAM;YAAO;YACtBtB,OAAO;gBAAEsB,MAAM;YAAS;YACxBN,QAAQ;gBAAEM,MAAM;gBAAUC,UAAU;YAAK;YACzCN,QAAQ;gBAAEK,MAAM;gBAAUC,UAAU;YAAK;QAC7C;IACJ;IAEAT,UAAUF,KAAKY,UAAU,CAACV;IAC1BC,QAAQH,KAAKa,QAAQ,CAACV;IACtBf,QAAQY,KAAKc,aAAa,CAAC1B;IAE3B,IAAIgB,QAAQ;QACRA,SAASJ,KAAKc,aAAa,CAACV;IAChC;IACA,IAAIC,QAAQ;QACRA,SAASL,KAAKc,aAAa,CAACT;IAChC;IAEA,MAAMU,QAAQb,OAAO,CAACC,MAAM;IAC5B,MAAMa,aAAa;QAAE5B;QAAOgB,QAAQjB,mBAAmBC,OAAOgB;QAASC,QAAQlB,mBAAmBC,OAAOiB;IAAQ;IAEjH,MAAMU,MAAME,MAAM,CAACD;IAEnB,OAAO;AACX"}