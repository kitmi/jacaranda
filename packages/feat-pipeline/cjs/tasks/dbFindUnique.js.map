{"version":3,"sources":["../../src/tasks/dbFindUnique.js"],"sourcesContent":["import { _ } from '@kitmi/utils';\nimport { Types } from '@kitmi/validators/allSync';\n\nexport async function findUnique_(step, settings) {\n    let { service, model, where } = Types.OBJECT.sanitize(settings, {\n        schema: {\n            service: { type: 'text' },\n            model: { type: 'text' },\n            where: { type: 'object' }\n        },\n    });\n\n    service = step.getService(service);\n    model = step.getValue(model);\n    where = step.replaceValues(where);\n\n    const Model = service[model];\n    const record = await Model.findUnique({ where });\n\n    return record;\n}\n\nexport default async function dbFindUnique(step, settings) {    \n    const record = await findUnique_(step, settings);\n\n    if (record == null) {\n        throw new Error('Record not found.');\n    }\n\n    step.syslog('info', 'Record found.' , {        \n        result: record\n    });\n\n    return record;\n}\n"],"names":["dbFindUnique","findUnique_","step","settings","service","model","where","Types","OBJECT","sanitize","schema","type","getService","getValue","replaceValues","Model","record","findUnique","Error","syslog","result"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAsBA,OAYC;eAZ6BA;;IAnBRC,WAAW;eAAXA;;;uBAHJ;yBACI;AAEf,eAAeA,YAAYC,IAAI,EAAEC,QAAQ;IAC5C,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAE,GAAGC,cAAK,CAACC,MAAM,CAACC,QAAQ,CAACN,UAAU;QAC5DO,QAAQ;YACJN,SAAS;gBAAEO,MAAM;YAAO;YACxBN,OAAO;gBAAEM,MAAM;YAAO;YACtBL,OAAO;gBAAEK,MAAM;YAAS;QAC5B;IACJ;IAEAP,UAAUF,KAAKU,UAAU,CAACR;IAC1BC,QAAQH,KAAKW,QAAQ,CAACR;IACtBC,QAAQJ,KAAKY,aAAa,CAACR;IAE3B,MAAMS,QAAQX,OAAO,CAACC,MAAM;IAC5B,MAAMW,SAAS,MAAMD,MAAME,UAAU,CAAC;QAAEX;IAAM;IAE9C,OAAOU;AACX;AAEe,eAAehB,aAAaE,IAAI,EAAEC,QAAQ;IACrD,MAAMa,SAAS,MAAMf,YAAYC,MAAMC;IAEvC,IAAIa,UAAU,MAAM;QAChB,MAAM,IAAIE,MAAM;IACpB;IAEAhB,KAAKiB,MAAM,CAAC,QAAQ,iBAAkB;QAClCC,QAAQJ;IACZ;IAEA,OAAOA;AACX"}