{"version":3,"sources":["../../src/tasks/exec.js"],"sourcesContent":["import { _, eachAsync_, esTemplate } from '@kitmi/utils';\nimport { Types } from '@kitmi/validators/allSync';\nimport { cmd } from '@kitmi/sys';\n\nfunction trimBuffer(buf) {\n    let output = buf.toString();\n\n    if (output.endsWith('\\r\\n')) {\n        output = output.slice(0, -2);\n    } else if (output.endsWith('\\n')) {\n        output = output.slice(0, -1);\n    }\n\n    return output;\n}\n\nasync function run_(step, settings, command) {\n    step.syslog('info', `exec: ${command}`);\n    const options = _.pick(settings, ['cwd', 'env', 'timeout', 'detached']);\n\n    const [program, ...args] = command.split(' ');\n\n    return cmd.runLive_(\n        program,\n        args,\n        (buf) => {\n            let output = trimBuffer(buf);\n\n            if (_.trimStart(output).substring(0, 4).toLocaleLowerCase() === 'warn') {\n                step.syslog('warn', output);\n            } else {\n                step.syslog('info', output);\n            }\n        },\n        (buf) => {\n            step.syslog('error', trimBuffer(buf));\n        },\n        options\n    );\n}\n\nconst exec = async (step, settings) => {\n    let { command, ...others } = Types.OBJECT.sanitize(settings, {\n        schema: {\n            command: [{ type: 'text' }, { type: 'array', elementSchema: { type: 'text' } }],\n            cwd: { type: 'text', optional: true },\n            env: { type: 'object', optional: true },\n            timeout: { type: 'integer', optional: true },\n            detached: { type: 'boolean', optional: true },\n        },\n        keepUnsanitized: true,\n    });\n\n    command = _.castArray(command);\n\n    const variables = step.cloneValues();\n\n    await eachAsync_(command, (_command) => {\n        let __command;\n        try {\n            __command = esTemplate(_command, variables);\n        } catch (e) {\n            throw new Error(`Failed to interpolate command line \\`${_command}\\`, ${e.message}`);\n        }\n        return run_(step, others, __command);\n    });\n};\n\nexport default exec;\n"],"names":["trimBuffer","buf","output","toString","endsWith","slice","run_","step","settings","command","syslog","options","_","pick","program","args","split","cmd","runLive_","trimStart","substring","toLocaleLowerCase","exec","others","Types","OBJECT","sanitize","schema","type","elementSchema","cwd","optional","env","timeout","detached","keepUnsanitized","castArray","variables","cloneValues","eachAsync_","_command","__command","esTemplate","e","Error","message"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoEA;;;eAAA;;;uBApE0C;yBACpB;qBACF;AAEpB,SAASA,WAAWC,GAAG;IACnB,IAAIC,SAASD,IAAIE,QAAQ;IAEzB,IAAID,OAAOE,QAAQ,CAAC,SAAS;QACzBF,SAASA,OAAOG,KAAK,CAAC,GAAG,CAAC;IAC9B,OAAO,IAAIH,OAAOE,QAAQ,CAAC,OAAO;QAC9BF,SAASA,OAAOG,KAAK,CAAC,GAAG,CAAC;IAC9B;IAEA,OAAOH;AACX;AAEA,eAAeI,KAAKC,IAAI,EAAEC,QAAQ,EAAEC,OAAO;IACvCF,KAAKG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAED,QAAQ,CAAC;IACtC,MAAME,UAAUC,QAAC,CAACC,IAAI,CAACL,UAAU;QAAC;QAAO;QAAO;QAAW;KAAW;IAEtE,MAAM,CAACM,SAAS,GAAGC,KAAK,GAAGN,QAAQO,KAAK,CAAC;IAEzC,OAAOC,QAAG,CAACC,QAAQ,CACfJ,SACAC,MACA,CAACd;QACG,IAAIC,SAASF,WAAWC;QAExB,IAAIW,QAAC,CAACO,SAAS,CAACjB,QAAQkB,SAAS,CAAC,GAAG,GAAGC,iBAAiB,OAAO,QAAQ;YACpEd,KAAKG,MAAM,CAAC,QAAQR;QACxB,OAAO;YACHK,KAAKG,MAAM,CAAC,QAAQR;QACxB;IACJ,GACA,CAACD;QACGM,KAAKG,MAAM,CAAC,SAASV,WAAWC;IACpC,GACAU;AAER;AAEA,MAAMW,OAAO,OAAOf,MAAMC;IACtB,IAAI,EAAEC,OAAO,EAAE,GAAGc,QAAQ,GAAGC,cAAK,CAACC,MAAM,CAACC,QAAQ,CAAClB,UAAU;QACzDmB,QAAQ;YACJlB,SAAS;gBAAC;oBAAEmB,MAAM;gBAAO;gBAAG;oBAAEA,MAAM;oBAASC,eAAe;wBAAED,MAAM;oBAAO;gBAAE;aAAE;YAC/EE,KAAK;gBAAEF,MAAM;gBAAQG,UAAU;YAAK;YACpCC,KAAK;gBAAEJ,MAAM;gBAAUG,UAAU;YAAK;YACtCE,SAAS;gBAAEL,MAAM;gBAAWG,UAAU;YAAK;YAC3CG,UAAU;gBAAEN,MAAM;gBAAWG,UAAU;YAAK;QAChD;QACAI,iBAAiB;IACrB;IAEA1B,UAAUG,QAAC,CAACwB,SAAS,CAAC3B;IAEtB,MAAM4B,YAAY9B,KAAK+B,WAAW;IAElC,MAAMC,IAAAA,iBAAU,EAAC9B,SAAS,CAAC+B;QACvB,IAAIC;QACJ,IAAI;YACAA,YAAYC,IAAAA,iBAAU,EAACF,UAAUH;QACrC,EAAE,OAAOM,GAAG;YACR,MAAM,IAAIC,MAAM,CAAC,qCAAqC,EAAEJ,SAAS,IAAI,EAAEG,EAAEE,OAAO,CAAC,CAAC;QACtF;QACA,OAAOvC,KAAKC,MAAMgB,QAAQkB;IAC9B;AACJ;MAEA,WAAenB"}