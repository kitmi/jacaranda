{"version":3,"sources":["../src/postgres.js"],"sourcesContent":["import { Feature } from '@kitmi/jacaranda';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    packages: ['pg'],\n\n    load_: async function (app, options, name) {\n        options = app.featureConfig(\n            options,\n            {\n                schema: [\n                    { connectionString: { type: 'text' } },\n                    {\n                        user: { type: 'text' },\n                        password: { type: 'text' },\n                        host: { type: 'text' },\n                        database: { type: 'text', optional: true },\n                        port: { type: 'integer', optional: true },\n                    },\n                ],\n            },\n            name\n        );\n\n        const { Pool, types, escapeLiteral, escapeIdentifier } =\n            await app.tryRequire_('pg');\n\n        const pool = new Pool(options);\n\n        pool.on('connect', () => {\n            app.log('info', 'Connected to postgresql.', {\n                connections: pool.totalCount,\n            });\n        });\n\n        pool.on('error', (err) => {\n            app.logError(err, 'Unexpected error on idle client');\n        });\n\n        app.on('stopping', async () => {\n            await pool.end();\n        });\n\n        const service = {\n            get types() {\n                return types;\n            },\n\n            literal: escapeLiteral,\n            identifier: escapeIdentifier,\n\n            query_: (...args) => pool.query(...args),\n            execute_: async (fnBusinessLogic_, useTransaction) => {\n                const client = await pool.connect();\n                try {\n                    if (useTransaction) {\n                        await client.query('BEGIN');\n                    }\n                    const result = await fnBusinessLogic_(client);\n                    if (useTransaction) {\n                        await client.query('COMMIT');\n                    }\n                    return result;\n                } catch (error) {\n                    if (useTransaction) {\n                        await client.query('ROLLBACK');\n                    }\n                    throw error;\n                } finally {\n                    client.release();\n                }\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","packages","load_","app","options","name","featureConfig","schema","connectionString","type","user","password","host","database","optional","port","Pool","types","escapeLiteral","escapeIdentifier","tryRequire_","pool","on","log","connections","totalCount","err","logError","end","service","literal","identifier","query_","args","query","execute_","fnBusinessLogic_","useTransaction","client","connect","result","error","release","registerService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAEA;;;eAAA;;;2BAFwB;MAExB,WAAe;IACXA,OAAOC,kBAAO,CAACC,OAAO;IAEtBC,WAAW;IAEXC,UAAU;QAAC;KAAK;IAEhBC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI;QACrCD,UAAUD,IAAIG,aAAa,CACvBF,SACA;YACIG,QAAQ;gBACJ;oBAAEC,kBAAkB;wBAAEC,MAAM;oBAAO;gBAAE;gBACrC;oBACIC,MAAM;wBAAED,MAAM;oBAAO;oBACrBE,UAAU;wBAAEF,MAAM;oBAAO;oBACzBG,MAAM;wBAAEH,MAAM;oBAAO;oBACrBI,UAAU;wBAAEJ,MAAM;wBAAQK,UAAU;oBAAK;oBACzCC,MAAM;wBAAEN,MAAM;wBAAWK,UAAU;oBAAK;gBAC5C;aACH;QACL,GACAT;QAGJ,MAAM,EAAEW,IAAI,EAAEC,KAAK,EAAEC,aAAa,EAAEC,gBAAgB,EAAE,GAClD,MAAMhB,IAAIiB,WAAW,CAAC;QAE1B,MAAMC,OAAO,IAAIL,KAAKZ;QAEtBiB,KAAKC,EAAE,CAAC,WAAW;YACfnB,IAAIoB,GAAG,CAAC,QAAQ,4BAA4B;gBACxCC,aAAaH,KAAKI,UAAU;YAChC;QACJ;QAEAJ,KAAKC,EAAE,CAAC,SAAS,CAACI;YACdvB,IAAIwB,QAAQ,CAACD,KAAK;QACtB;QAEAvB,IAAImB,EAAE,CAAC,YAAY;YACf,MAAMD,KAAKO,GAAG;QAClB;QAEA,MAAMC,UAAU;YACZ,IAAIZ,SAAQ;gBACR,OAAOA;YACX;YAEAa,SAASZ;YACTa,YAAYZ;YAEZa,QAAQ,CAAC,GAAGC,OAASZ,KAAKa,KAAK,IAAID;YACnCE,UAAU,OAAOC,kBAAkBC;gBAC/B,MAAMC,SAAS,MAAMjB,KAAKkB,OAAO;gBACjC,IAAI;oBACA,IAAIF,gBAAgB;wBAChB,MAAMC,OAAOJ,KAAK,CAAC;oBACvB;oBACA,MAAMM,SAAS,MAAMJ,iBAAiBE;oBACtC,IAAID,gBAAgB;wBAChB,MAAMC,OAAOJ,KAAK,CAAC;oBACvB;oBACA,OAAOM;gBACX,EAAE,OAAOC,OAAO;oBACZ,IAAIJ,gBAAgB;wBAChB,MAAMC,OAAOJ,KAAK,CAAC;oBACvB;oBACA,MAAMO;gBACV,SAAU;oBACNH,OAAOI,OAAO;gBAClB;YACJ;QACJ;QAEAvC,IAAIwC,eAAe,CAACtC,MAAMwB;IAC9B;AACJ"}