{"version":3,"sources":["../src/dataSource.js"],"sourcesContent":["/**\n * Enable data source feature\n * @module Feature_DataSource\n */\n\nimport { Feature } from '@kitmi/jacaranda';\nimport { _ } from '@kitmi/utils';\n\nexport default {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    /**\n     * Load the feature\n     * @param {ServiceContainer} app - The app module object\n     * @param {object} dataSources - Datasource settings\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, dataSources, name) => {\n        //const { Connector } = app.tryRequire('@genx/data');\n\n        dataSources = app.featureConfig(dataSources, {\n            type: 'object',\n            valueSchema: {\n                type: 'object',\n                valueSchema: {\n                    type: 'object',\n                    schema: {\n                        connection: { type: 'text' },\n                        logStatements: { type: 'boolean', optional: true },\n                    },\n                },\n            },\n        }, name);\n\n        /*\n\n        _.forOwn(dataSources, (dataSource, dbms) => {\n            _.forOwn(dataSource, (config, connectorName) => {\n                let serviceName = dbms + '.' + connectorName;\n\n                if (!config.connection) {\n                    throw new InvalidConfiguration(\n                        `Missing connection config for data source \"${serviceName}\".`,\n                        app,\n                        `dataSource.${dbms}.${connectorName}`\n                    );\n                }\n                \n                let { connection: connectionString, ...other } = config;  \n                \n                let connectorService = Connector.createConnector(dbms, connectionString, { logger: loggerProxy, ...other });\n                app.registerService(serviceName, connectorService);\n\n                app.on('stopping', (elegantStoppers) => {\n                    elegantStoppers.push(connectorService.end_());\n                });\n            });            \n        });        \n        */\n    },\n};\n"],"names":["stage","Feature","SERVICE","load_","app","dataSources","name","featureConfig","type","valueSchema","schema","connection","logStatements","optional"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;CAGC;;;;+BAKD;;;eAAA;;;2BAHwB;uBACN;MAElB,WAAe;IACX;;;KAGC,GACDA,OAAOC,kBAAO,CAACC,OAAO;IAEtB;;;;;KAKC,GACDC,OAAO,OAAOC,KAAKC,aAAaC;QAC5B,qDAAqD;QAErDD,cAAcD,IAAIG,aAAa,CAACF,aAAa;YACzCG,MAAM;YACNC,aAAa;gBACTD,MAAM;gBACNC,aAAa;oBACTD,MAAM;oBACNE,QAAQ;wBACJC,YAAY;4BAAEH,MAAM;wBAAO;wBAC3BI,eAAe;4BAAEJ,MAAM;4BAAWK,UAAU;wBAAK;oBACrD;gBACJ;YACJ;QACJ,GAAGP;IAEH;;;;;;;;;;;;;;;;;;;;;;;;QAwBA,GACJ;AACJ"}