{"version":3,"sources":["../src/dbImporter.js"],"sourcesContent":["import { Feature } from '@kitmi/jacaranda';\nimport { _ } from '@kitmi/utils';\nimport { fs } from '@kitmi/sys';\nimport yaml from 'yaml';\nimport path from 'node:path';\n\nconst YAML_EXT = ['.yaml', '.yml'];\nconst JSON_EXT = ['.json'];\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { service: serviceName } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    service: { type: 'text' },\n                },\n            },\n            name\n        );\n\n        const service = {\n            importList_: async (files) => {\n                const dbService = app.getService(serviceName);\n\n                for (const file of files) {\n                    const extName = path.extname(file);\n\n                    const fileContent = await fs.readFile(file, 'utf-8');\n                    let dataset;\n\n                    if (YAML_EXT.includes(extName)) {\n                        dataset = yaml.parse(fileContent);\n                    } else if (JSON_EXT.includes(extName)) {\n                        dataset = JSON.parse(fileContent);\n                    } else {\n                        throw new Error(`Unsupported file format: ${path.basename(file)}`);\n                    }\n\n                    await service.import_(dbService, dataset);\n                }\n            },\n\n            import_: async (dbService, dataset) => {\n                const { model, refs, pre, post, data } = dataset;\n\n                let prePipeline_, postPipeline_;\n                let prePipelineData;\n\n                const _globalBag = {};\n\n                if (pre) {\n                    const pipelineService = app.getService('pipeline');\n                    prePipeline_ = pipelineService.create(`${model} Pre-process`, pre, { modelName: model, global: _globalBag });\n                }\n\n                if (post) {\n                    const pipelineService = app.getService('pipeline');\n                    postPipeline_ = pipelineService.create(`${model} Post-process`, post, { modelName: model, global: _globalBag });\n                }\n\n                for (let record of data) {\n                    if (prePipeline_) {\n                        [prePipelineData, record] = await prePipeline_(record);\n                    }\n\n                    const refFields = _.pick(record, refs);\n                    const updateFields = _.omit(record, refs);\n\n                    console.log({\n                        where: refFields,\n                        create: record,\n                        update: updateFields,\n                    });\n\n                    await dbService[model].upsert({\n                        where: refFields,\n                        create: record,\n                        update: updateFields,\n                    });\n\n                    if (postPipeline_) {\n                        let extra;\n                        if (prePipelineData) {\n                            extra = { $pre: prePipelineData.getStepVariables() };\n                        }\n\n                        await postPipeline_(record, extra);\n                    }\n                }\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["YAML_EXT","JSON_EXT","stage","Feature","SERVICE","groupable","load_","app","options","name","service","serviceName","featureConfig","schema","type","importList_","files","dbService","getService","file","extName","path","extname","fileContent","fs","readFile","dataset","includes","yaml","parse","JSON","Error","basename","import_","model","refs","pre","post","data","prePipeline_","postPipeline_","prePipelineData","_globalBag","pipelineService","create","modelName","global","record","refFields","_","pick","updateFields","omit","console","log","where","update","upsert","extra","$pre","getStepVariables","registerService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BASA;;;eAAA;;;2BATwB;uBACN;qBACC;6DACF;iEACA;;;;;;AAEjB,MAAMA,WAAW;IAAC;IAAS;CAAO;AAClC,MAAMC,WAAW;IAAC;CAAQ;MAE1B,WAAe;IACXC,OAAOC,kBAAO,CAACC,OAAO;IAEtBC,WAAW;IAEXC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI;QACrC,MAAM,EAAEC,SAASC,WAAW,EAAE,GAAGJ,IAAIK,aAAa,CAC9CJ,SACA;YACIK,QAAQ;gBACJH,SAAS;oBAAEI,MAAM;gBAAO;YAC5B;QACJ,GACAL;QAGJ,MAAMC,UAAU;YACZK,aAAa,OAAOC;gBAChB,MAAMC,YAAYV,IAAIW,UAAU,CAACP;gBAEjC,KAAK,MAAMQ,QAAQH,MAAO;oBACtB,MAAMI,UAAUC,iBAAI,CAACC,OAAO,CAACH;oBAE7B,MAAMI,cAAc,MAAMC,OAAE,CAACC,QAAQ,CAACN,MAAM;oBAC5C,IAAIO;oBAEJ,IAAI1B,SAAS2B,QAAQ,CAACP,UAAU;wBAC5BM,UAAUE,aAAI,CAACC,KAAK,CAACN;oBACzB,OAAO,IAAItB,SAAS0B,QAAQ,CAACP,UAAU;wBACnCM,UAAUI,KAAKD,KAAK,CAACN;oBACzB,OAAO;wBACH,MAAM,IAAIQ,MAAM,CAAC,yBAAyB,EAAEV,iBAAI,CAACW,QAAQ,CAACb,MAAM,CAAC;oBACrE;oBAEA,MAAMT,QAAQuB,OAAO,CAAChB,WAAWS;gBACrC;YACJ;YAEAO,SAAS,OAAOhB,WAAWS;gBACvB,MAAM,EAAEQ,KAAK,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE,GAAGZ;gBAEzC,IAAIa,cAAcC;gBAClB,IAAIC;gBAEJ,MAAMC,aAAa,CAAC;gBAEpB,IAAIN,KAAK;oBACL,MAAMO,kBAAkBpC,IAAIW,UAAU,CAAC;oBACvCqB,eAAeI,gBAAgBC,MAAM,CAAC,CAAC,EAAEV,MAAM,YAAY,CAAC,EAAEE,KAAK;wBAAES,WAAWX;wBAAOY,QAAQJ;oBAAW;gBAC9G;gBAEA,IAAIL,MAAM;oBACN,MAAMM,kBAAkBpC,IAAIW,UAAU,CAAC;oBACvCsB,gBAAgBG,gBAAgBC,MAAM,CAAC,CAAC,EAAEV,MAAM,aAAa,CAAC,EAAEG,MAAM;wBAAEQ,WAAWX;wBAAOY,QAAQJ;oBAAW;gBACjH;gBAEA,KAAK,IAAIK,UAAUT,KAAM;oBACrB,IAAIC,cAAc;wBACd,CAACE,iBAAiBM,OAAO,GAAG,MAAMR,aAAaQ;oBACnD;oBAEA,MAAMC,YAAYC,QAAC,CAACC,IAAI,CAACH,QAAQZ;oBACjC,MAAMgB,eAAeF,QAAC,CAACG,IAAI,CAACL,QAAQZ;oBAEpCkB,QAAQC,GAAG,CAAC;wBACRC,OAAOP;wBACPJ,QAAQG;wBACRS,QAAQL;oBACZ;oBAEA,MAAMlC,SAAS,CAACiB,MAAM,CAACuB,MAAM,CAAC;wBAC1BF,OAAOP;wBACPJ,QAAQG;wBACRS,QAAQL;oBACZ;oBAEA,IAAIX,eAAe;wBACf,IAAIkB;wBACJ,IAAIjB,iBAAiB;4BACjBiB,QAAQ;gCAAEC,MAAMlB,gBAAgBmB,gBAAgB;4BAAG;wBACvD;wBAEA,MAAMpB,cAAcO,QAAQW;oBAChC;gBACJ;YACJ;QACJ;QAEAnD,IAAIsD,eAAe,CAACpD,MAAMC;IAC9B;AACJ"}