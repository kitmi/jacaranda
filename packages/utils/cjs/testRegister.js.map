{"version":3,"sources":["../src/testRegister.js"],"sourcesContent":["const _ = require('lodash');\nconst chai = require('chai');\nchai.use(function (chai, utils) {\n    const Assertion = chai.Assertion;\n\n    // your helpers here\n    Assertion.addMethod('throws', function (error) {\n        new Assertion(this._obj).Throw(error);\n    });\n\n    Assertion.addMethod('toThrow', function (error) {\n        new Assertion(this._obj).Throw(error);\n    });\n\n    Assertion.addMethod('exactly', function (value) {\n        new Assertion(this._obj === value).to.be.ok;\n    });\n\n    Assertion.addMethod('toEqual', function (value) {\n        new Assertion(_.isEqual(this._obj, value)).to.be.ok;\n    });\n\n    Assertion.addProperty('uppercase', function () {\n        var obj = this._obj;\n        new chai.Assertion(obj).to.be.a('string');\n\n        this.assert(\n            obj === obj.toUpperCase(), // adapt as needed\n            'expected #{this} to be all uppercase', // error message when fail for normal\n            'expected #{this} to not be all uppercase' // error message when fail for negated\n        );\n    });\n\n    Assertion.addProperty('lowercase', function () {\n        var obj = this._obj;\n        new chai.Assertion(obj).to.be.a('string');\n\n        this.assert(\n            obj === obj.toLowerCase(), // adapt as needed\n            'expected #{this} to be all lowercase', // error message when fail for normal\n            'expected #{this} to not be all lowercase' // error message when fail for negated\n        );\n    });\n\n    Assertion.overwriteMethod('keys', function (_super) {\n        return function assertKeys(...args) {\n            const obj = this._obj;\n            args.forEach((arg) => {\n                this.assert(\n                    _.has(obj, arg),\n                    'expected #{this} to have key #{exp}',\n                    'expected #{this} to not have key #{exp}',\n                    arg\n                );\n            });\n        };\n    });\n});\n\nglobal.assert = chai.assert;\nglobal.expect = chai.expect;\nglobal.should = chai.should();\n\nglobal.should.throws = (func, errorPattern) => {\n    func.should.throws(errorPattern);\n};\n"],"names":["_","require","chai","use","utils","Assertion","addMethod","error","_obj","Throw","value","to","be","ok","isEqual","addProperty","obj","a","assert","toUpperCase","toLowerCase","overwriteMethod","_super","assertKeys","args","forEach","arg","has","global","expect","should","throws","func","errorPattern"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAMA,IAAIC,QAAQ;AAClB,MAAMC,OAAOD,QAAQ;AACrBC,KAAKC,GAAG,CAAC,SAAUD,IAAI,EAAEE,KAAK;IAC1B,MAAMC,YAAYH,KAAKG,SAAS;IAEhC,oBAAoB;IACpBA,UAAUC,SAAS,CAAC,UAAU,SAAUC,KAAK;QACzC,IAAIF,UAAU,IAAI,CAACG,IAAI,EAAEC,KAAK,CAACF;IACnC;IAEAF,UAAUC,SAAS,CAAC,WAAW,SAAUC,KAAK;QAC1C,IAAIF,UAAU,IAAI,CAACG,IAAI,EAAEC,KAAK,CAACF;IACnC;IAEAF,UAAUC,SAAS,CAAC,WAAW,SAAUI,KAAK;QAC1C,IAAIL,UAAU,IAAI,CAACG,IAAI,KAAKE,OAAOC,EAAE,CAACC,EAAE,CAACC,EAAE;IAC/C;IAEAR,UAAUC,SAAS,CAAC,WAAW,SAAUI,KAAK;QAC1C,IAAIL,UAAUL,EAAEc,OAAO,CAAC,IAAI,CAACN,IAAI,EAAEE,QAAQC,EAAE,CAACC,EAAE,CAACC,EAAE;IACvD;IAEAR,UAAUU,WAAW,CAAC,aAAa;QAC/B,IAAIC,MAAM,IAAI,CAACR,IAAI;QACnB,IAAIN,KAAKG,SAAS,CAACW,KAAKL,EAAE,CAACC,EAAE,CAACK,CAAC,CAAC;QAEhC,IAAI,CAACC,MAAM,CACPF,QAAQA,IAAIG,WAAW,IACvB,wCACA,2CAA2C,sCAAsC;;IAEzF;IAEAd,UAAUU,WAAW,CAAC,aAAa;QAC/B,IAAIC,MAAM,IAAI,CAACR,IAAI;QACnB,IAAIN,KAAKG,SAAS,CAACW,KAAKL,EAAE,CAACC,EAAE,CAACK,CAAC,CAAC;QAEhC,IAAI,CAACC,MAAM,CACPF,QAAQA,IAAII,WAAW,IACvB,wCACA,2CAA2C,sCAAsC;;IAEzF;IAEAf,UAAUgB,eAAe,CAAC,QAAQ,SAAUC,MAAM;QAC9C,OAAO,SAASC,WAAW,GAAGC,IAAI;YAC9B,MAAMR,MAAM,IAAI,CAACR,IAAI;YACrBgB,KAAKC,OAAO,CAAC,CAACC;gBACV,IAAI,CAACR,MAAM,CACPlB,EAAE2B,GAAG,CAACX,KAAKU,MACX,uCACA,2CACAA;YAER;QACJ;IACJ;AACJ;AAEAE,OAAOV,MAAM,GAAGhB,KAAKgB,MAAM;AAC3BU,OAAOC,MAAM,GAAG3B,KAAK2B,MAAM;AAC3BD,OAAOE,MAAM,GAAG5B,KAAK4B,MAAM;AAE3BF,OAAOE,MAAM,CAACC,MAAM,GAAG,CAACC,MAAMC;IAC1BD,KAAKF,MAAM,CAACC,MAAM,CAACE;AACvB"}