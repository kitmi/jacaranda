{"version":3,"sources":["../src/pipeAsync_.js"],"sourcesContent":["import isPromise from \"./isPromise\";\n\nconst pipeAsync_ = async (readStream, writeStream) => {\n    isPromise(readStream) && (readStream = await readStream);\n\n    if (readStream instanceof ReadableStream && !(writeStream instanceof WritableStream)) {\n        writeStream = writeStream.constructor.toWeb(writeStream);\n        return readStream.pipeTo(writeStream);\n    } \n\n    return new Promise((resolve, reject) => {\n        writeStream.on('close', resolve);\n        writeStream.on('error', reject);\n        readStream.pipe(writeStream);\n    });\n}\n\nexport default pipeAsync_;"],"names":["pipeAsync_","readStream","writeStream","isPromise","ReadableStream","WritableStream","constructor","toWeb","pipeTo","Promise","resolve","reject","on","pipe"],"mappings":";;;;+BAiBA;;;eAAA;;;kEAjBsB;;;;;;AAEtB,MAAMA,aAAa,OAAOC,YAAYC;IAClCC,IAAAA,kBAAS,EAACF,eAAgBA,CAAAA,aAAa,MAAMA,UAAS;IAEtD,IAAIA,sBAAsBG,kBAAkB,CAAEF,CAAAA,uBAAuBG,cAAa,GAAI;QAClFH,cAAcA,YAAYI,WAAW,CAACC,KAAK,CAACL;QAC5C,OAAOD,WAAWO,MAAM,CAACN;IAC7B;IAEA,OAAO,IAAIO,QAAQ,CAACC,SAASC;QACzBT,YAAYU,EAAE,CAAC,SAASF;QACxBR,YAAYU,EAAE,CAAC,SAASD;QACxBV,WAAWY,IAAI,CAACX;IACpB;AACJ;MAEA,WAAeF"}