{"version":3,"sources":["../src/arrayImmutable.js"],"sourcesContent":["/**\n * Move a value in an array-like object as a new copy.\n * @function array.move\n * @param {*} array \n * @param {*} from \n * @param {*} to \n * @returns {Array}\n */\nexport const move = (array, from, to) => {\n    const copy = copyArrayLike(array);\n    if (from === to) {\n        return copy;\n    }\n\n    const value = copy[from];\n    copy.splice(from, 1);\n    copy.splice(to, 0, value);\n    return copy;\n};\n\n/**\n * Swap two values in an array-like object as a new copy.\n * @function array.swap\n * @param {*} arrayLike \n * @param {integer} indexA \n * @param {integer} indexB \n * @returns {Array}\n */\nexport const swap = (arrayLike, indexA, indexB) => {\n    const copy = copyArrayLike(arrayLike);\n    if (indexA === indexB) {\n        return copy;\n    }\n    const a = copy[indexA];\n    copy[indexA] = copy[indexB];\n    copy[indexB] = a;\n    return copy;\n};\n\n/**\n * Insert a value into an array-like object as a new copy.\n * @function array.insert\n * @param {*} arrayLike \n * @param {integer} index \n * @param {*} value \n * @returns {Array}\n */\nexport const insert = (arrayLike, index, value) => {\n    const copy = copyArrayLike(arrayLike);\n    copy.splice(index, 0, value);\n    return copy;\n};\n\n/**\n * Copy an array-like object to an array, return an empty array if the argument is null or undefined.\n * @function array.copyArrayLike\n * @param {*} arrayLike \n * @returns {Array}\n */\nexport const copyArrayLike = (arrayLike) => {\n    if (!arrayLike) {\n        return [];\n    } else {\n        return [...arrayLike];\n    }\n};\n\n/**\n * Push a value into an array-like object if the value is not in the array-like object.\n * @function array.uniqPush\n * @param {*} arrayLike \n * @param {*} value \n * @returns {Array}\n */\nexport const uniqPush = (arrayLike, value) => {\n    if (!arrayLike.includes(value)) {\n        return [...arrayLike, value];\n    }\n\n    return arrayLike;\n};\n"],"names":["copyArrayLike","insert","move","swap","uniqPush","array","from","to","copy","value","splice","arrayLike","indexA","indexB","a","index","includes"],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;;;;IAoDYA,aAAa;eAAbA;;IAZAC,MAAM;eAANA;;IAvCAC,IAAI;eAAJA;;IAoBAC,IAAI;eAAJA;;IA8CAC,QAAQ;eAARA;;;AAlEN,MAAMF,OAAO,CAACG,OAAOC,MAAMC;IAC9B,MAAMC,OAAOR,cAAcK;IAC3B,IAAIC,SAASC,IAAI;QACb,OAAOC;IACX;IAEA,MAAMC,QAAQD,IAAI,CAACF,KAAK;IACxBE,KAAKE,MAAM,CAACJ,MAAM;IAClBE,KAAKE,MAAM,CAACH,IAAI,GAAGE;IACnB,OAAOD;AACX;AAUO,MAAML,OAAO,CAACQ,WAAWC,QAAQC;IACpC,MAAML,OAAOR,cAAcW;IAC3B,IAAIC,WAAWC,QAAQ;QACnB,OAAOL;IACX;IACA,MAAMM,IAAIN,IAAI,CAACI,OAAO;IACtBJ,IAAI,CAACI,OAAO,GAAGJ,IAAI,CAACK,OAAO;IAC3BL,IAAI,CAACK,OAAO,GAAGC;IACf,OAAON;AACX;AAUO,MAAMP,SAAS,CAACU,WAAWI,OAAON;IACrC,MAAMD,OAAOR,cAAcW;IAC3BH,KAAKE,MAAM,CAACK,OAAO,GAAGN;IACtB,OAAOD;AACX;AAQO,MAAMR,gBAAgB,CAACW;IAC1B,IAAI,CAACA,WAAW;QACZ,OAAO,EAAE;IACb,OAAO;QACH,OAAO;eAAIA;SAAU;IACzB;AACJ;AASO,MAAMP,WAAW,CAACO,WAAWF;IAChC,IAAI,CAACE,UAAUK,QAAQ,CAACP,QAAQ;QAC5B,OAAO;eAAIE;YAAWF;SAAM;IAChC;IAEA,OAAOE;AACX"}