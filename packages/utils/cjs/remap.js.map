{"version":3,"sources":["../src/remap.js"],"sourcesContent":["import _each from 'lodash/each';\n\n/**\n * Remap the keys of object elements in an array, like projection.\n * @alias object.remap\n * @param {*} object\n * @param {Object} mapping - key to newKey or key to array[ newKey, valueMap ] for next level mapping\n * @param {boolean} keepUnmapped - If true, will keep those not in mapping as its original key, otherwise filter out\n * @returns {Object} Remapped object\n */\nfunction remap(object, mapping, keepUnmapped) {\n    if (typeof mapping === 'string') return { [mapping]: object };\n\n    let newObj = {};\n    _each(object, (v, k) => {\n        /* eslint-disable no-prototype-builtins */\n        if (mapping.hasOwnProperty(k)) {\n            /* eslint-enable no-prototype-builtins */\n            let nk = mapping[k];\n            if (Array.isArray(nk)) {\n                newObj[nk[0]] = {\n                    ...newObj[nk[0]],\n                    ...remap(v, nk[1], keepUnmapped),\n                };\n            } else {\n                newObj[nk] = v;\n            }\n        } else {\n            if (keepUnmapped) {\n                newObj[k] = v;\n            }\n        }\n    });\n\n    return newObj;\n}\n\nexport default remap;\n"],"names":["remap","object","mapping","keepUnmapped","newObj","_each","v","k","hasOwnProperty","nk","Array","isArray"],"mappings":";;;;+BAqCA;;;eAAA;;;6DArCkB;;;;;;AAElB;;;;;;;CAOC,GACD,SAASA,MAAMC,MAAM,EAAEC,OAAO,EAAEC,YAAY;IACxC,IAAI,OAAOD,YAAY,UAAU,OAAO;QAAE,CAACA,QAAQ,EAAED;IAAO;IAE5D,IAAIG,SAAS,CAAC;IACdC,IAAAA,aAAK,EAACJ,QAAQ,CAACK,GAAGC;QACd,wCAAwC,GACxC,IAAIL,QAAQM,cAAc,CAACD,IAAI;YAC3B,uCAAuC,GACvC,IAAIE,KAAKP,OAAO,CAACK,EAAE;YACnB,IAAIG,MAAMC,OAAO,CAACF,KAAK;gBACnBL,MAAM,CAACK,EAAE,CAAC,EAAE,CAAC,GAAG;oBACZ,GAAGL,MAAM,CAACK,EAAE,CAAC,EAAE,CAAC;oBAChB,GAAGT,MAAMM,GAAGG,EAAE,CAAC,EAAE,EAAEN,aAAa;gBACpC;YACJ,OAAO;gBACHC,MAAM,CAACK,GAAG,GAAGH;YACjB;QACJ,OAAO;YACH,IAAIH,cAAc;gBACdC,MAAM,CAACG,EAAE,GAAGD;YAChB;QACJ;IACJ;IAEA,OAAOF;AACX;MAEA,WAAeJ"}