{"version":3,"sources":["../src/hookInvoke.js"],"sourcesContent":["/**\n * Add hooks before an object's method is being called and after.\n * @alias lang.hookInvoke\n * @param {*} obj\n * @param {*} onCalling - Before hook\n * @param {*} onCalled - After hook\n * @returns {Object} The hooked object\n */\nconst hookInvoke = (obj, onCalling, onCalled) =>\n    new Proxy(obj, {\n        get(target, propKey /*, receiver*/) {\n            const origMethod = target[propKey];\n            if (typeof origMethod === 'function') {\n                return function (...args) {\n                    onCalling && Promise.resolve(onCalling(obj, { name: propKey, args }));\n                    let returned = origMethod.apply(target, args);\n                    onCalled &&\n                        Promise.resolve(returned)\n                            .then((returned) => Promise.resolve(onCalled(obj, { name: propKey, returned })))\n                            .catch();\n                    return returned;\n                };\n            }\n\n            return origMethod;\n        },\n    });\n\nexport default hookInvoke;\n"],"names":["hookInvoke","obj","onCalling","onCalled","Proxy","get","target","propKey","origMethod","args","Promise","resolve","name","returned","apply","then","catch"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;CAOC;;;;+BAqBD;;;eAAA;;;AApBA,MAAMA,aAAa,CAACC,KAAKC,WAAWC,WAChC,IAAIC,MAAMH,KAAK;QACXI,KAAIC,MAAM,EAAEC,QAAQ,YAAY,GAAb;YACf,MAAMC,aAAaF,MAAM,CAACC,QAAQ;YAClC,IAAI,OAAOC,eAAe,YAAY;gBAClC,OAAO,SAAU,GAAGC,IAAI;oBACpBP,aAAaQ,QAAQC,OAAO,CAACT,UAAUD,KAAK;wBAAEW,MAAML;wBAASE;oBAAK;oBAClE,IAAII,WAAWL,WAAWM,KAAK,CAACR,QAAQG;oBACxCN,YACIO,QAAQC,OAAO,CAACE,UACXE,IAAI,CAAC,CAACF,WAAaH,QAAQC,OAAO,CAACR,SAASF,KAAK;4BAAEW,MAAML;4BAASM;wBAAS,KAC3EG,KAAK;oBACd,OAAOH;gBACX;YACJ;YAEA,OAAOL;QACX;IACJ;MAEJ,WAAeR"}