{"version":3,"sources":["../src/deleteLines.js"],"sourcesContent":["function deleteLines(textData, patterns, lineDelimiter) {\n    lineDelimiter == null && (lineDelimiter = '\\n');\n\n    // Split the file into lines\n    let lines = textData.split(lineDelimiter);\n\n    let combinedPattern = new RegExp(patterns.map((pattern) => '(' + pattern.source + ')').join('|'));\n\n    // Filter out the lines that match any pattern\n    let filteredLines = lines.filter((line) => {\n        if (line.match(combinedPattern)) {\n            return false;\n        }\n\n        // If it doesn't match any pattern, include it\n        return true;\n    });\n\n    // Join the remaining lines back into a single string\n    return filteredLines.join(lineDelimiter);\n}\n\nexport default deleteLines;\n"],"names":["deleteLines","textData","patterns","lineDelimiter","lines","split","combinedPattern","RegExp","map","pattern","source","join","filteredLines","filter","line","match"],"mappings":";;;;+BAsBA;;;eAAA;;;AAtBA,SAASA,YAAYC,QAAQ,EAAEC,QAAQ,EAAEC,aAAa;IAClDA,iBAAiB,QAASA,CAAAA,gBAAgB,IAAG;IAE7C,4BAA4B;IAC5B,IAAIC,QAAQH,SAASI,KAAK,CAACF;IAE3B,IAAIG,kBAAkB,IAAIC,OAAOL,SAASM,GAAG,CAAC,CAACC,UAAY,MAAMA,QAAQC,MAAM,GAAG,KAAKC,IAAI,CAAC;IAE5F,8CAA8C;IAC9C,IAAIC,gBAAgBR,MAAMS,MAAM,CAAC,CAACC;QAC9B,IAAIA,KAAKC,KAAK,CAACT,kBAAkB;YAC7B,OAAO;QACX;QAEA,8CAA8C;QAC9C,OAAO;IACX;IAEA,qDAAqD;IACrD,OAAOM,cAAcD,IAAI,CAACR;AAC9B;MAEA,WAAeH"}