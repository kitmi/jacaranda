{"version":3,"sources":["../src/findKeyAsync_.js"],"sourcesContent":["import isPlainObject from './isPlainObject';\n\n/**\n * Iterate a collection asynchronously until predicate returns true\n * The returned value is undefined if not found.\n * That's different from the _.find() function in lodash.\n * @alias collection.findKeyAsync_\n * @async\n * @param {Array|Object} obj\n * @param {asyncIterator} asyncPredicate_\n * @returns {Promise.<Object|undefined>}\n */\nasync function findKeyAsync_(obj, asyncPredicate_) {\n    if (Array.isArray(obj)) {\n        let l = obj.length;\n        for (let i = 0; i < l; i++) {\n            const el = obj[i];\n            if (await asyncPredicate_(el, i, obj)) {\n                return i;\n            }\n        }\n\n        return undefined;\n    } else if (isPlainObject(obj)) {\n        for (let k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                const el = obj[k];\n                if (await asyncPredicate_(el, k, obj)) {\n                    return k;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    return Promise.reject('The first argument should be a collection.');\n}\n\nexport default findKeyAsync_;\n"],"names":["findKeyAsync_","obj","asyncPredicate_","Array","isArray","l","length","i","el","undefined","isPlainObject","k","Object","prototype","hasOwnProperty","call","Promise","reject"],"mappings":";;;;+BAuCA;;;eAAA;;;sEAvC0B;;;;;;AAE1B;;;;;;;;;CASC,GACD,eAAeA,cAAcC,GAAG,EAAEC,eAAe;IAC7C,IAAIC,MAAMC,OAAO,CAACH,MAAM;QACpB,IAAII,IAAIJ,IAAIK,MAAM;QAClB,IAAK,IAAIC,IAAI,GAAGA,IAAIF,GAAGE,IAAK;YACxB,MAAMC,KAAKP,GAAG,CAACM,EAAE;YACjB,IAAI,MAAML,gBAAgBM,IAAID,GAAGN,MAAM;gBACnC,OAAOM;YACX;QACJ;QAEA,OAAOE;IACX,OAAO,IAAIC,IAAAA,sBAAa,EAACT,MAAM;QAC3B,IAAK,IAAIU,KAAKV,IAAK;YACf,IAAIW,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACd,KAAKU,IAAI;gBAC9C,MAAMH,KAAKP,GAAG,CAACU,EAAE;gBACjB,IAAI,MAAMT,gBAAgBM,IAAIG,GAAGV,MAAM;oBACnC,OAAOU;gBACX;YACJ;QACJ;QAEA,OAAOF;IACX;IAEA,OAAOO,QAAQC,MAAM,CAAC;AAC1B;MAEA,WAAejB"}