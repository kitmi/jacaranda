{"version":3,"sources":["../src/unquote.js"],"sourcesContent":["import replaceAll from './replaceAll';\n\n/**\n * Unquote a string\n * @function string.unquote\n * @param {String} str\n * @param {boolean} [unescape=false] - True to unescape slashed quote, default false\n * @param {Set|Array} [quoteSet] - Set of chars\n * @returns {String}\n */\nfunction unquote(str, unescape, quoteSet) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n\n    if (str.length < 2) {\n        return str;\n    }\n\n    let start = str[0];\n    if (start !== str[str.length - 1]) {\n        return str;\n    }\n\n    if (quoteSet) {\n        if (Array.isArray(quoteSet)) {\n            quoteSet = new Set(quoteSet);\n        }\n\n        if (!quoteSet.has(start)) {\n            return str;\n        }\n    }\n\n    str = str.slice(1, -1);\n\n    if (unescape) {\n        return replaceAll(str, '\\\\' + start, start);\n    }\n\n    return str;\n}\n\nexport default unquote;\n"],"names":["unquote","str","unescape","quoteSet","length","start","Array","isArray","Set","has","slice","replaceAll"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA2CA;;;eAAA;;;mEA3CuB;;;;;;AAEvB;;;;;;;CAOC,GACD,SAASA,QAAQC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ;IACpC,IAAI,OAAOF,QAAQ,UAAU;QACzB,OAAOA;IACX;IAEA,IAAIA,IAAIG,MAAM,GAAG,GAAG;QAChB,OAAOH;IACX;IAEA,IAAII,QAAQJ,GAAG,CAAC,EAAE;IAClB,IAAII,UAAUJ,GAAG,CAACA,IAAIG,MAAM,GAAG,EAAE,EAAE;QAC/B,OAAOH;IACX;IAEA,IAAIE,UAAU;QACV,IAAIG,MAAMC,OAAO,CAACJ,WAAW;YACzBA,WAAW,IAAIK,IAAIL;QACvB;QAEA,IAAI,CAACA,SAASM,GAAG,CAACJ,QAAQ;YACtB,OAAOJ;QACX;IACJ;IAEAA,MAAMA,IAAIS,KAAK,CAAC,GAAG,CAAC;IAEpB,IAAIR,UAAU;QACV,OAAOS,IAAAA,mBAAU,EAACV,KAAK,OAAOI,OAAOA;IACzC;IAEA,OAAOJ;AACX;MAEA,WAAeD"}