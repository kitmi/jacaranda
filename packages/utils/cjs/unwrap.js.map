{"version":3,"sources":["../src/unwrap.js"],"sourcesContent":["import replaceAll from './replaceAll';\n\nconst pairs = {\n    '(': ')',\n    '[': ']',\n    '{': '}',\n    '<': '>',\n};\n\n/**\n * Unwrap a string\n * @function string.unwrap\n * @param {String} str\n * @param {String} [startToken] - Start token, default \"\n * @param {String} [endToken] - End token, default \"\n * @returns {String}\n */\nfunction unwrap(str, startToken, endToken) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n\n    if (str.length < 2) {\n        return str;\n    }\n\n    if (startToken == null && endToken == null) {\n        let start = str[0];\n        let end = str[str.length - 1];\n        const endToken2 = pairs[start];\n\n        if (endToken2 == null || end !== endToken2) {\n            return str;\n        }\n\n        return str.slice(1, -1);\n    }\n\n    if (endToken == null) {\n        endToken = startToken;\n    }\n\n    if (str.startsWith(startToken) && str.endsWith(endToken)) {\n        return str.slice(startToken.length, -endToken.length);\n    }\n\n    return str;\n}\n\nexport default unwrap;\n"],"names":["pairs","unwrap","str","startToken","endToken","length","start","end","endToken2","slice","startsWith","endsWith"],"mappings":";;;;+BAiDA;;;eAAA;;;mEAjDuB;;;;;;AAEvB,MAAMA,QAAQ;IACV,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACT;AAEA;;;;;;;CAOC,GACD,SAASC,OAAOC,GAAG,EAAEC,UAAU,EAAEC,QAAQ;IACrC,IAAI,OAAOF,QAAQ,UAAU;QACzB,OAAOA;IACX;IAEA,IAAIA,IAAIG,MAAM,GAAG,GAAG;QAChB,OAAOH;IACX;IAEA,IAAIC,cAAc,QAAQC,YAAY,MAAM;QACxC,IAAIE,QAAQJ,GAAG,CAAC,EAAE;QAClB,IAAIK,MAAML,GAAG,CAACA,IAAIG,MAAM,GAAG,EAAE;QAC7B,MAAMG,YAAYR,KAAK,CAACM,MAAM;QAE9B,IAAIE,aAAa,QAAQD,QAAQC,WAAW;YACxC,OAAON;QACX;QAEA,OAAOA,IAAIO,KAAK,CAAC,GAAG,CAAC;IACzB;IAEA,IAAIL,YAAY,MAAM;QAClBA,WAAWD;IACf;IAEA,IAAID,IAAIQ,UAAU,CAACP,eAAeD,IAAIS,QAAQ,CAACP,WAAW;QACtD,OAAOF,IAAIO,KAAK,CAACN,WAAWE,MAAM,EAAE,CAACD,SAASC,MAAM;IACxD;IAEA,OAAOH;AACX;MAEA,WAAeD"}