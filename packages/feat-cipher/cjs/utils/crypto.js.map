{"version":3,"sources":["../../src/utils/crypto.js"],"sourcesContent":["import crypto from 'node:crypto';\nimport { ValidationError } from '@kitmi/types';\n\nexport const encrypt = (cipherAlgorithm, key, message) => {\n    if (!key || key.length !== 32) {\n        throw new ValidationError('The length of symmetric key should be exactly 32.', {\n            key,\n        });\n    }\n\n    const buf = Buffer.alloc(16);\n    crypto.randomFillSync(buf);\n\n    const cipher = crypto.createCipheriv(cipherAlgorithm, key, buf);\n\n    let encryptedData = cipher.update(message, 'utf-8', 'base64');\n    encryptedData += cipher.final('base64');\n    encryptedData += buf.toString('hex');\n    return encryptedData;\n};\n\nexport const decrypt = (cipherAlgorithm, key, message) => {\n    if (!key || key.length !== 32) {\n        throw new ValidationError('The length of symmetric key should be exactly 32.', {\n            key,\n        });\n    }\n\n    const l = message.length - 32;\n    const iv = Buffer.from(message.substring(l), 'hex');\n\n    const encrypted = message.substring(0, l);\n\n    const decipher = crypto.createDecipheriv(cipherAlgorithm, key, iv);\n    let decrypted = decipher.update(encrypted, 'base64', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n};\n\nexport const generateKeyPair = (keyPairType, asymmetricBits, options) => {\n    const keypair = crypto.generateKeyPairSync(keyPairType, {\n        modulusLength: asymmetricBits,\n        publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem',\n        },\n        privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem',\n        },\n        ...options,\n    });\n\n    return keypair;\n};\n\nexport const generateKeyPair_ = async (keyPairType, asymmetricBits, options) => {\n    const keypair = await new Promise((resolve, reject) =>\n        crypto.generateKeyPair(\n            keyPairType,\n            {\n                modulusLength: asymmetricBits,\n                publicKeyEncoding: {\n                    type: 'spki',\n                    format: 'pem',\n                },\n                privateKeyEncoding: {\n                    type: 'pkcs8',\n                    format: 'pem',\n                },\n                ...options,\n            },\n            (err, publicKey, privateKey) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n\n                resolve({ publicKey, privateKey });\n            }\n        )\n    );\n\n    return keypair;\n};\n\nexport const publicEncrypt = (publicKey, message, encoding = 'base64') => {\n    return crypto.publicEncrypt(publicKey, Buffer.from(message, 'utf8')).toString(encoding);\n};\n\nexport const privateDecrypt = (privateKey, message, encoding = 'base64') => {\n    return crypto.privateDecrypt(privateKey, Buffer.from(message, encoding)).toString('utf8');\n};\n\nexport const privateSign = (signerAlgorithm, privateKey, message, encoding = 'base64') => {\n    const signer = crypto.createSign(signerAlgorithm);\n    signer.update(message);\n\n    return signer.sign(privateKey, encoding);\n};\n\nexport const publicVerify = (signerAlgorithm, publicKey, message, signature, encoding = 'base64') => {\n    const verifier = crypto.createVerify(signerAlgorithm);\n    verifier.update(message);\n\n    return verifier.verify(publicKey, signature, encoding);\n};"],"names":["decrypt","encrypt","generateKeyPair","generateKeyPair_","privateDecrypt","privateSign","publicEncrypt","publicVerify","cipherAlgorithm","key","message","length","ValidationError","buf","Buffer","alloc","crypto","randomFillSync","cipher","createCipheriv","encryptedData","update","final","toString","l","iv","from","substring","encrypted","decipher","createDecipheriv","decrypted","keyPairType","asymmetricBits","options","keypair","generateKeyPairSync","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","Promise","resolve","reject","err","publicKey","privateKey","encoding","signerAlgorithm","signer","createSign","sign","signature","verifier","createVerify","verify"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}