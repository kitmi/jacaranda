{"version":3,"sources":["../src/bootstrap.js"],"sourcesContent":["import path from 'node:path';\nimport fs from 'node:fs';\nimport { _, esmCheck } from '@kitmi/utils';\n\nimport JacaTester, { jacat, setJacat } from './tester';\n\nlet _initialized = false;\nlet _config = null;\nlet _asyncDump = null;\n\nconst bootstrap = () => {\n    let configPath = path.resolve(process.cwd(), 'test.config.json');\n    if (!fs.existsSync(configPath)) {\n        configPath = path.resolve(process.cwd(), 'test/test.config.json');\n\n        if (!fs.existsSync(configPath)) {\n            throw new Error('Cannot find \"test.config.json\" in current directory or \"./test\".');\n        }\n    }\n\n    _config = JSON.parse(fs.readFileSync(configPath, 'utf8'));\n    processConfigSection(_config.only);\n    processConfigSection(_config.skip);\n\n    if (_config.enableAsyncDump) {\n        _asyncDump = esmCheck(require('./asyncDump'));\n    }    \n\n    const _jacat = new JacaTester(_config);\n    setJacat(_jacat);\n\n    global.jacat = _jacat;\n};\n\nconst processConfigSection = (section) => {\n    if (section) {\n        configFileListToHashSet(section, 'files');\n        if (section.suites) {\n            section.suites = _.mapValues(section.suites, (value) => {\n                if (Array.isArray(value)) {\n                    return new Set(value);\n                }\n                return value;\n            });\n        }\n    }\n};\n\nconst configFileListToHashSet = (node, listKey) => {\n    const list = node[listKey];\n    if (list) {\n        node[listKey] = new Set(list.map((file) => path.resolve(process.cwd(), file)));\n    }\n};\n\nif (!_initialized) {\n    _initialized = true;\n    bootstrap();\n}\n\nexport const mochaHooks = {\n    beforeEach(done) {\n        const testCaseTitle = this.currentTest.title;\n        const testFile = this.currentTest.file;\n        const testSuiteTitle = this.currentTest.parent.title;\n\n        const _done = () => {\n            // do something if needed\n            done();\n        };\n\n        if (!_.isEmpty(_config.only)) {\n            // only mode\n            const { files, suites } = _config.only;\n\n            // Check if the test file, suite, or case is in the config\n            // If it is not, skip the test\n\n            if (files && !files.has(testFile)) {\n                this.skip();\n                return done();\n            }\n\n            if (suites) {\n                const suiteInfo = suites[testSuiteTitle];\n\n                if (suiteInfo == null) {\n                    this.skip();\n                    return done();\n                }\n\n                if (suiteInfo === 'all') {\n                    return _done();\n                }\n\n                if (!suiteInfo.has(testCaseTitle)) {\n                    this.skip();\n                    return done();\n                }\n            }\n        } else if (!_.isEmpty(_config.skip)) {\n            // skip mode\n            const { files, suites } = _config.skip;\n\n            // Check if the test file, suite, or case is in the config\n            if (files && files.has(testFile)) {\n                // If it is, skip the test\n                this.skip();\n                return done();\n            }\n\n            if (suites) {\n                const suiteInfo = suites[testSuiteTitle];\n                if (suiteInfo != null) {\n                    if (suiteInfo === 'all') {\n                        this.skip();\n                        return done();\n                    }\n\n                    if (suiteInfo.has(testCaseTitle)) {\n                        this.skip();\n                        return done();\n                    }\n                }\n            }\n        }\n\n        _done();\n    },\n};\n\nexport const mochaGlobalSetup = async function () {\n    if (_config.enableAllure) {\n        global.allure = esmCheck(require('allure-mocha/runtime')).allure;\n    }\n};\n\nexport const mochaGlobalTeardown = async function () {\n    await jacat.closeAllServers_();\n\n    if (_config.enableAsyncDump) {\n        _asyncDump();\n    }\n};\n"],"names":["mochaGlobalSetup","mochaGlobalTeardown","mochaHooks","_initialized","_config","_asyncDump","bootstrap","configPath","path","resolve","process","cwd","fs","existsSync","Error","JSON","parse","readFileSync","processConfigSection","only","skip","enableAsyncDump","esmCheck","require","_jacat","JacaTester","setJacat","global","jacat","section","configFileListToHashSet","suites","_","mapValues","value","Array","isArray","Set","node","listKey","list","map","file","beforeEach","done","testCaseTitle","currentTest","title","testFile","testSuiteTitle","parent","_done","isEmpty","files","has","suiteInfo","enableAllure","allure","closeAllServers_"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}