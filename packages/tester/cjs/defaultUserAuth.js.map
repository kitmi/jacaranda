{"version":3,"sources":["../src/defaultUserAuth.js"],"sourcesContent":["import { _, get } from \"@kitmi/utils\";\n\n// Cache for storing user tokens\nconst tokenCache = {};\n\n/**\n * Returns a middleware function that adds user authentication to a client.\n * @param {string|Object} authKey - The user tag or user authentication object.\n * @returns {Function} A middleware function that adds user authentication to a client.\n * @throws {Error} If the user authentication settings are missing required fields.\n */\nfunction defaultUserAuth(authKey) {\n    return async (client, authConfig) => {\n        // If no user tag is provided, remove the onSending function and return the client\n        if (!authKey) {\n            delete client.onSending;\n            return client;\n        }\n\n        let token = tokenCache[authKey];\n\n        // If the token is not cached, authenticate the user and cache the token\n        if (!token) {\n            if (!authConfig.endpoint || !authConfig.username || !authConfig.password) {\n                throw new Error(\n                    `\"endpoint\", \"username\", \"password\" is required for authentication of user \"${authKey}\".`\n                );\n            }\n\n            let body = await client.post(\n                authConfig.endpoint,\n                {\n                    username: authConfig.username,\n                    password: authConfig.password,\n                },\n                authConfig.query,\n                authConfig.headers ? { headers: authConfig.headers } : null\n            );\n            if (authConfig.tokenKey) {\n                token = get(body, authConfig.tokenKey);\n            } else {\n                token = body.token;\n            }\n            tokenCache[authKey] = token;\n        }\n\n        // Add the token to the Authorization header of each request\n        client.onSending = (req) => {\n            req.set(\"Authorization\", `Bearer ${token}`);\n        };\n    };\n}\n\nexport default defaultUserAuth;"],"names":["tokenCache","defaultUserAuth","authKey","client","authConfig","onSending","token","endpoint","username","password","Error","body","post","query","headers","tokenKey","get","req","set"],"mappings":";;;;+BAqDA;;;eAAA;;;uBArDuB;AAEvB,gCAAgC;AAChC,MAAMA,aAAa,CAAC;AAEpB;;;;;CAKC,GACD,SAASC,gBAAgBC,OAAO;IAC5B,OAAO,OAAOC,QAAQC;QAClB,kFAAkF;QAClF,IAAI,CAACF,SAAS;YACV,OAAOC,OAAOE,SAAS;YACvB,OAAOF;QACX;QAEA,IAAIG,QAAQN,UAAU,CAACE,QAAQ;QAE/B,wEAAwE;QACxE,IAAI,CAACI,OAAO;YACR,IAAI,CAACF,WAAWG,QAAQ,IAAI,CAACH,WAAWI,QAAQ,IAAI,CAACJ,WAAWK,QAAQ,EAAE;gBACtE,MAAM,IAAIC,MACN,CAAC,2EAA2E,EAAER,QAAQ,EAAE,CAAC;YAEjG;YAEA,IAAIS,OAAO,MAAMR,OAAOS,IAAI,CACxBR,WAAWG,QAAQ,EACnB;gBACIC,UAAUJ,WAAWI,QAAQ;gBAC7BC,UAAUL,WAAWK,QAAQ;YACjC,GACAL,WAAWS,KAAK,EAChBT,WAAWU,OAAO,GAAG;gBAAEA,SAASV,WAAWU,OAAO;YAAC,IAAI;YAE3D,IAAIV,WAAWW,QAAQ,EAAE;gBACrBT,QAAQU,IAAAA,UAAG,EAACL,MAAMP,WAAWW,QAAQ;YACzC,OAAO;gBACHT,QAAQK,KAAKL,KAAK;YACtB;YACAN,UAAU,CAACE,QAAQ,GAAGI;QAC1B;QAEA,4DAA4D;QAC5DH,OAAOE,SAAS,GAAG,CAACY;YAChBA,IAAIC,GAAG,CAAC,iBAAiB,CAAC,OAAO,EAAEZ,MAAM,CAAC;QAC9C;IACJ;AACJ;MAEA,WAAeL"}