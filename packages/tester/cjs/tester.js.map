{"version":3,"sources":["../src/tester.js"],"sourcesContent":["import { _, esmCheck, toBoolean, batchAsync_, Box, keyAt } from '@kitmi/utils';\nimport WebServer, { startWorker, HttpClient } from '@kitmi/jacaranda';\nimport Benchmark from 'benchmark';\nimport path from \"node:path\";\nimport loadFixtures from './loadFixtures';\n\nfunction serialize(obj, replacer, space) {\n    let content;\n    let type;\n\n    if (typeof obj === 'string') {\n        content = obj;\n        type = 'text/plain';\n    } else {\n        content = JSON.stringify(obj, replacer, space);\n        type = 'application/json';\n    }\n\n    return { content, type };\n}\n\nconst [ jacatProxy, _setJacat ] = Box();\n\nexport const jacat = jacatProxy;\nexport const setJacat = _setJacat;\n\n/**\n * Jacaranda tester.\n * @class\n */\nclass JacaTester {\n    /**\n     * Load fixtures and declare test case with `it`.\n     * @function module:tester.loadFixtures\n     * @param {Function} [testCase] - Test case to run after loading fixtures. (data) => {}\n     */\n    loadFixtures = loadFixtures;\n\n    constructor(config) {\n        this.config = config;\n        this.startedServers = {};\n        this.isCoverMode = process.env.COVER && toBoolean(process.env.COVER);\n    }\n\n    // ------------------------------\n    // allure\n    // ------------------------------\n\n    async step_(name, fn) {\n        if (allure) {\n            await allure.step(name, fn);\n        }\n    }\n\n    param(name, value) {\n        if (allure) {\n            const { content, type } = serialize(value);\n            allure.parameter(name, content, type);\n        }\n    }\n\n    attach(name, value) {\n        if (allure) {\n            const { content, type } = serialize(value, null, 4);\n            allure.attachment(name, content, type);\n        }\n    }\n\n    // ------------------------------\n    // server\n    // ------------------------------\n\n    // for server code coverage\n    async startServer_(name) {   \n        if (name == null) {\n            name = keyAt(this.config.servers);\n            if (!name) {\n                throw new Error('No server defined in config');\n            }\n        }\n        \n        if (this.startedServers[name]) {\n            return;\n        }\n\n        const serverOptions = this.config.servers?.[name];\n\n        if (!serverOptions) {\n            throw new Error(`Server options for \"${name}\" not found`);\n        }\n\n        const server = new WebServer(name, serverOptions);\n        await server.start_();\n\n        this.startedServers[name] = server;\n    }\n\n    async stopServer_(server) {\n        if (typeof server === 'string') {\n            server = this.startedServers[server];\n        }\n\n        if (server == null) {\n            return;\n        }\n\n        await server.stop_();\n\n        delete this.startedServers[server.name];\n    }\n\n    async closeAllServers_() {\n        await batchAsync_(Object.values(this.startedServers), async (server) => {\n            await server.stop_();\n        });\n        this.startedServers = {};\n    }\n\n    // ------------------------------\n    // worker\n    // ------------------------------\n\n    /**\n     * Start a worker app for testing\n     * @param {String} [name] - Name of the worker to start.\n     * @param {function} testToRun - Test (async) function to run.\n     * @async\n     */\n    async startWorker_(name, testToRun) {\n        \n\n        if (name == null) {\n            name = keyAt(this.config.servers);\n            if (!name) {\n                throw new Error('No server defined in config');\n            }\n        }\n\n        let err;\n\n        const result = await startWorker(\n            async (app) => {\n                try {\n                    return await testToRun(app);\n                } catch (e) {\n                    console.error(e);\n                    err = e;\n                }\n            },\n            {\n                workerName: 'tester',\n                configName: 'test',\n                configPath: 'test/conf',\n                ignoreUncaught: true,\n                exitOnUncaught: false,\n                ...this.config.workerOptions,\n                ...options,\n            }\n        );\n\n        if (err) {\n            throw err;\n        }\n\n        return result;\n    }\n\n    // ------------------------------\n    // httpClient\n    // ------------------------------\n\n    /**\n     *\n     * @param {String|WebServer} server\n     * @param {String|Function} [authenticator]\n     * @param {Function} testToRun\n     * @param {*} options\n     * @returns\n     */\n    async withHttpClient_(server, authenticator, testToRun, options) {\n        if (typeof options === 'undefined') {\n            if (typeof testToRun === 'undefined') {\n                testToRun = authenticator;\n                authenticator = null;\n            } else if (typeof testToRun === 'object') {\n                options = testToRun;\n                testToRun = authenticator;\n                authenticator = null;\n            }\n        }\n\n        const { worker: workerOptions, client: clientOptions } = options || {};\n        if (typeof server === 'string') {\n            server = await this.startServer_(server);\n        }\n\n        return this.startWorker_(async (app) => {\n            if (typeof authenticator === 'string') {\n                authenticator = defaultUserAuth(authenticator /** authticationKey */);\n            }\n\n            const { authentication: authConfig } = this.config;\n\n            const getHttpClient_ = async () => {\n                let agentClientSetting =\n                    this.config.httpAgent?.[this.isCoverMode ? 'coverage' : 'normal'];\n\n                if (typeof agentClientSetting === 'string') {\n                    agentClientSetting = { adapter: agentClientSetting };\n                } else if (Array.isArray(agentClientSetting)) {\n                    agentClientSetting = { adapter: agentClientSetting[0], options: agentClientSetting[1] };\n                }\n                    \n                const agentCreatorModule = agentClientSetting?.adapter ?? (this.isCoverMode ? 'supertest' : 'superagent');\n                const agentCreator = esmCheck(require(`@kitmi/adapters/${agentCreatorModule}`));\n\n                const agent = agentCreator();\n                if (this.isCoverMode) {                    \n                    agent.server = server.httpServer;\n                }\n\n                const client = new HttpClient(agent, {  ...agentClientSetting.options , ...clientOptions });                \n\n                client.onResponse = (result, req, res) => {\n                    this.attach(`${req.method} ${req.url}`, { headers: res.header, response: result });\n                };\n\n                if (!authenticator) {\n                    delete client.onSending;\n                    return client;\n                }\n\n                await authenticator(client, authConfig);\n\n                return client;\n            }\n\n            const client = await getHttpClient_();\n            return testToRun(client, app);\n        }, workerOptions);\n    }\n\n    // ------------------------------\n    // benchmark\n    // ------------------------------\n\n    /**\n     * Run benchmark against given methods.\n     * @param {*} mapOfMethods - Map of name to function with payload\n     * @param {*} verifier - Function to verify the result of each method\n     * @param {*} payload\n     */\n    async benchmark_(mapOfMethods, verifier, payload) {\n        const suite = new Benchmark.Suite();\n\n        _.each(mapOfMethods, (f, name) => {\n            verifier(f(payload));\n\n            suite.add(name, function () {\n                f(payload);\n            });\n        });\n\n        return new Promise((resolve, reject) => {\n            const self = this;\n\n            suite\n                .on('cycle', function (event) {\n                    const cycleMessage = String(event.target);\n                    console.log(cycleMessage);\n                    self.attach('cycle', cycleMessage);\n                })\n                .on('complete', function () {\n                    const completeMessage = 'The fastest is ' + this.filter('fastest').map('name');\n                    self.attach('complete', completeMessage);\n                    resolve();\n                })\n                .on('error', (event) => reject(String(event.target)))\n                .run({ async: true });\n        });\n    }\n}\n\nexport default JacaTester;\n"],"names":["jacat","setJacat","serialize","obj","replacer","space","content","type","JSON","stringify","jacatProxy","_setJacat","Box","JacaTester","step_","name","fn","allure","step","param","value","parameter","attach","attachment","startServer_","keyAt","config","servers","Error","startedServers","serverOptions","server","WebServer","start_","stopServer_","stop_","closeAllServers_","batchAsync_","Object","values","startWorker_","testToRun","err","result","startWorker","app","e","console","error","workerName","configName","configPath","ignoreUncaught","exitOnUncaught","workerOptions","options","withHttpClient_","authenticator","worker","client","clientOptions","defaultUserAuth","authentication","authConfig","getHttpClient_","agentClientSetting","httpAgent","isCoverMode","adapter","Array","isArray","agentCreatorModule","agentCreator","esmCheck","require","agent","httpServer","HttpClient","onResponse","req","res","method","url","headers","header","response","onSending","benchmark_","mapOfMethods","verifier","payload","suite","Benchmark","Suite","_","each","f","add","Promise","resolve","reject","self","on","event","cycleMessage","String","target","log","completeMessage","filter","map","run","async","constructor","loadFixtures","process","env","COVER","toBoolean"],"mappings":"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"}