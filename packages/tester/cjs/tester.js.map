{"version":3,"sources":["../src/tester.js"],"sourcesContent":["import { _, batchAsync_, Box, fxargs } from '@kitmi/utils';\nimport testShouldThrow_ from '@kitmi/utils/testShouldThrow_';\nimport WebServer, { startWorker, HttpClient } from '@kitmi/jacaranda';\nimport Benchmark from 'benchmark';\nimport _superagent from 'superagent';\nimport { superagent } from '@kitmi/adapters';\n\nimport loadFixtures from './loadFixtures';\nimport createAuth from './createAuth';\n\nfunction serialize(obj, replacer, space) {\n    let content;\n    let type;\n\n    if (typeof obj === 'string') {\n        content = obj;\n        type = 'text/plain';\n    } else {\n        content = JSON.stringify(obj, replacer, space);\n        type = 'application/json';\n    }\n\n    return { content, type };\n}\n\nconst [jacatProxy, _setJacat] = Box();\n\nexport const jacat = jacatProxy;\nexport const setJacat = _setJacat;\n\n/**\n * Jacaranda tester.\n * @class Tester\n */\nclass JacaTester {\n    /**\n     * Test if an async function throws an error\n     * @function Tester.throw_\n     * @param {Function} fn - Function (async) that should throw an error\n     * @param {*} error\n     */\n    throw_ = testShouldThrow_;\n\n    /**\n     * Load fixtures and declare test case with `it`.\n     * @function Tester.loadFixtures\n     * @param {Function} [testCase] - Test case to run after loading fixtures. (data) => {}\n     */\n    loadFixtures = loadFixtures;\n\n    constructor(config) {\n        this.config = config;\n        this.startedServers = {};\n    }\n\n    // ------------------------------\n    // allure\n    // ------------------------------\n\n    /**\n     * Mark a step of a test case.\n     * @param {String} name - Name of the step.\n     * @param {Function} fn - Function to run.\n     * @async\n     */\n    async step_(name, fn) {\n        if (allure) {\n            await allure.step(name, fn);\n        }\n    }\n\n    /**\n     * Record a parameter in a test case report.\n     * @param {String} name - Name of the parameter.\n     * @param {*} value - Value of the parameter.\n     */\n    param(name, value) {\n        if (allure) {\n            const { content, type } = serialize(value);\n            allure.parameter(name, content, type);\n        }\n    }\n\n    /**\n     * Attach an object in a test case report.\n     * @param {String} name - Name of the attachment.\n     * @param {*} value - Value of the attachment.\n     */\n    attach(name, value) {\n        if (allure) {\n            const { content, type } = serialize(value, null, 4);\n            allure.attachment(name, content, type);\n        }\n    }\n\n    // ------------------------------\n    // server\n    // ------------------------------\n\n    /**\n     * Start a server for code coverage testing.\n     * @param  {String} [name] - Name of the server to start, should be configured in test config.\n     * @param  {Object} [options]\n     * @async\n     */\n    async startServer_(...args) {\n        let [name, options] = fxargs(args, ['string?', 'object?']);\n\n        if (name && this.startedServers[name]) {\n            return this.startedServers[name];\n        }\n\n        const serverOptions = name ? this.config.servers?.[name] : null;\n\n        if (!serverOptions) {\n            throw new Error(`Server options for \"${name}\" not found.`);\n        }\n\n        const server = new WebServer(name, { ...serverOptions, ...options });\n        await server.start_();\n\n        if (name) {\n            this.startedServers[name] = server;\n        }\n\n        return server;\n    }\n\n    /**\n     * Stop a running server.\n     * @param {WebServer} server\n     * @async\n     */\n    async stopServer_(server) {\n        if (typeof server === 'string') {\n            server = this.startedServers[server];\n        }\n\n        if (server == null) {\n            return;\n        }\n\n        await server.stop_();\n\n        delete this.startedServers[server.name];\n    }\n\n    /**\n     * Stop all running servers.\n     * @async\n     */\n    async closeAllServers_() {\n        await batchAsync_(Object.values(this.startedServers), async (server) => {\n            await server.stop_();\n        });\n        this.startedServers = {};\n    }\n\n    // ------------------------------\n    // worker\n    // ------------------------------\n\n    /**\n     * Start a worker app for testing\n     * @param {String} [name] - Name of the worker to start.\n     * @param {function} testToRun - Test (async) function to run.\n     * @param {*} [options] - Options for starting the worker.\n     * @async\n     */\n    async startWorker_(...args) {\n        let [name, testToRun, options] = fxargs(args, ['string?', 'function', 'object?']);\n\n        const workerOptions = name ? this.config.workers?.[name] : null;\n\n        let err;\n\n        const result = await startWorker(\n            async (app) => {\n                try {\n                    return await testToRun(app);\n                } catch (e) {\n                    console.error(e);\n                    err = e;\n                }\n            },\n            {\n                ...workerOptions,\n                ...options,\n            }\n        );\n\n        if (err) {\n            throw err;\n        }\n\n        return result;\n    }\n\n    // ------------------------------\n    // httpClient\n    // ------------------------------\n\n    /**\n     *\n     * @param {String|WebServer} server\n     * @param {String|Function} [authenticator]\n     * @param {Function} testToRun\n     * @param {*} options\n     * @returns\n     */\n    async withClient_(...args) {\n        let [server, authenticator, testToRun, options] = fxargs(args, [\n            'string|object?',\n            'string?',\n            'function',\n            'object?',\n        ]);\n\n        if (typeof server !== 'object') {\n            server = await this.startServer_(server);\n        }\n\n        const authConfig = authenticator ? this.config.authentications?.[authenticator] : null;\n        authenticator &&= createAuth(authenticator /** authticationKey */, authConfig ?? {});\n\n        const client = new HttpClient(superagent(_superagent), { endpoint: server.host, ...options });\n\n        client.onResponse = (result, req, res) => {\n            this.attach(`${req.method} ${req.url}`, { headers: res.header, response: result });\n        };\n\n        authenticator && (await authenticator(client));\n\n        await testToRun(client, server);\n    }\n\n    // ------------------------------\n    // benchmark\n    // ------------------------------\n\n    /**\n     * Run benchmark against given methods.\n     * @param {*} mapOfMethods - Map of name to function with payload\n     * @param {*} verifier - Function to verify the result of each method\n     * @param {*} payload\n     */\n    async benchmark_(mapOfMethods, verifier, payload) {\n        const suite = new Benchmark.Suite();\n\n        _.each(mapOfMethods, (f, name) => {\n            verifier(f(payload));\n\n            suite.add(name, function () {\n                f(payload);\n            });\n        });\n\n        return new Promise((resolve, reject) => {\n            const self = this;\n\n            suite\n                .on('cycle', function (event) {\n                    const cycleMessage = String(event.target);\n                    console.log(cycleMessage);\n                    self.attach('cycle', cycleMessage);\n                })\n                .on('complete', function () {\n                    const completeMessage = 'The fastest is ' + this.filter('fastest').map('name');\n                    self.attach('complete', completeMessage);\n                    resolve();\n                })\n                .on('error', (event) => reject(String(event.target)))\n                .run({ async: true });\n        });\n    }\n}\n\nexport default JacaTester;\n"],"names":["jacat","setJacat","serialize","obj","replacer","space","content","type","JSON","stringify","jacatProxy","_setJacat","Box","JacaTester","step_","name","fn","allure","step","param","value","parameter","attach","attachment","startServer_","args","options","fxargs","startedServers","serverOptions","config","servers","Error","server","WebServer","start_","stopServer_","stop_","closeAllServers_","batchAsync_","Object","values","startWorker_","testToRun","workerOptions","workers","err","result","startWorker","app","e","console","error","withClient_","authenticator","authConfig","authentications","createAuth","client","HttpClient","superagent","_superagent","endpoint","host","onResponse","req","res","method","url","headers","header","response","benchmark_","mapOfMethods","verifier","payload","suite","Benchmark","Suite","_","each","f","add","Promise","resolve","reject","self","on","event","cycleMessage","String","target","log","completeMessage","filter","map","run","async","constructor","throw_","testShouldThrow_","loadFixtures"],"mappings":"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"}