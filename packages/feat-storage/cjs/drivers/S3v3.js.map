{"version":3,"sources":["../../src/drivers/S3v3.js"],"sourcesContent":["import { fxargs, esTemplate } from '@kitmi/utils';\nimport { fs } from '@kitmi/sys';\nimport { Types } from '@kitmi/validators/allSync';\nimport { DEFAULT_UPLOAD_EXPIRY, DEFAULT_DOWNLOAD_EXPIRY } from '../common';\n\nclass S3Service {\n    static packages = ['@aws-sdk/client-s3', '@aws-sdk/s3-request-presigner'];\n\n    constructor(app, options) {\n        let { region, accessKeyId, secretAccessKey, bucket } = Types.OBJECT.sanitize(options, {\n            schema: {\n                region: { type: 'text' },\n                accessKeyId: { type: 'text' },\n                secretAccessKey: { type: 'text' },\n                bucket: { type: 'text' },\n            },\n        });\n\n        const vars = app.getRuntimeVariables();\n\n        region = esTemplate(region, vars);\n        accessKeyId = esTemplate(accessKeyId, vars);\n        secretAccessKey = esTemplate(secretAccessKey, vars);\n        bucket = esTemplate(bucket, vars);\n\n        this.SDK = app.tryRequire('@aws-sdk/client-s3');\n        const S3Client = this.SDK.S3Client;\n\n        this.presigner = app.tryRequire('@aws-sdk/s3-request-presigner');\n\n        this.client = new S3Client({\n            region,\n            credentials: {\n                accessKeyId,\n                secretAccessKey,\n            },\n        });\n\n        this.region = region;\n        this.bucket = bucket;\n    }\n\n    async upload_(...args) {\n        const [objectKey, file, contentType, payload] = fxargs(args, [\n            'string',\n            'string',\n            'string?',\n            'object?',\n        ]);\n\n        const { PutObjectCommand } = this.SDK;\n\n        const putObjectInput = {\n            Bucket: this.bucket,\n            Key: objectKey,\n            Body: fs.createReadStream(file),\n        };\n\n        if (payload?.publicRead) {\n            putObjectInput.ACL = 'public-read';\n        }\n\n        if (contentType) {\n            // most of the time, you don't know the contentType before user selected the file\n            putObjectInput.ContentType = contentType;\n        }\n\n        const command = new PutObjectCommand(putObjectInput);\n\n        const result = await this.client.send(command);\n        result.url = `https://s3.${this.region}.amazonaws.com/${this.bucket}/${objectKey}`;\n\n        return result;\n    }\n\n    async getUploadUrl_(...args) {\n        const [objectKey, contentType, expiresInSeconds = DEFAULT_UPLOAD_EXPIRY, payload] = fxargs(args, [\n            'string',\n            'string?',\n            'integer?',\n            'object?',\n        ]);\n\n        const { PutObjectCommand } = this.SDK;\n\n        /**\n         * @see https://docs.aws.amazon.com/AWSJavaScriptSDK/v3/latest/clients/client-s3/modules/putobjectrequest.html\n         */\n        const putObjectInput = {\n            Bucket: this.bucket,\n            Key: objectKey,\n        };\n\n        if (payload?.publicRead) {\n            putObjectInput.ACL = 'public-read';\n        }\n\n        if (contentType) {\n            // most of the time, you don't know the contentType before user selected the file\n            putObjectInput.ContentType = contentType;\n        }\n\n        const command = new PutObjectCommand(putObjectInput);\n        return this.presigner.getSignedUrl(this.client, command, {\n            expiresIn: expiresInSeconds,\n        });\n    }\n\n    async getDownloadUrl_(...args) {\n        const [objectKey, expiresInSeconds = DEFAULT_DOWNLOAD_EXPIRY, payload] = fxargs(args, [\n            'string',\n            'integer?',\n            'object?',\n        ]);\n\n        const { GetObjectCommand } = this.SDK;\n\n        const getObjectInput = {\n            Bucket: this.bucket,\n            Key: objectKey,\n            ...payload,\n        };\n\n        const command = new GetObjectCommand(getObjectInput);\n\n        return this.presigner.getSignedUrl(this.client, command, {\n            expiresIn: expiresInSeconds,\n        });\n    }\n}\n\nexport default S3Service;\n"],"names":["S3Service","upload_","args","objectKey","file","contentType","payload","fxargs","PutObjectCommand","SDK","putObjectInput","Bucket","bucket","Key","Body","fs","createReadStream","publicRead","ACL","ContentType","command","result","client","send","url","region","getUploadUrl_","expiresInSeconds","DEFAULT_UPLOAD_EXPIRY","presigner","getSignedUrl","expiresIn","getDownloadUrl_","DEFAULT_DOWNLOAD_EXPIRY","GetObjectCommand","getObjectInput","constructor","app","options","accessKeyId","secretAccessKey","Types","OBJECT","sanitize","schema","type","vars","getRuntimeVariables","esTemplate","tryRequire","S3Client","credentials","packages"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}