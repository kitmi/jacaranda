{"version":3,"sources":["../../src/processors/common.js"],"sourcesContent":["import {\n    _,\n    trimLines,\n    deleteLines,\n    grepLines,\n    quote,\n    unquote,\n    csvLineParse,\n    padLeft,\n    padRight,\n    base64Encode,\n    base64Decode,\n    pascalCase,\n    camelCase,\n    kebabCase,\n    snakeCase,\n} from '@kitmi/utils';\n\nconst _quoteSet = ['\"', \"'\"];\n\nexport default {\n    trimLines: (value, options) => trimLines(value, options?.lineDelimiter),\n\n    stripLines: (value, options) =>\n        deleteLines(value, Array.isArray(options) ? options : options?.patterns, options?.lineDelimiter),\n    grepLines: (value, options) =>\n        grepLines(value, Array.isArray(options) ? options : options?.patterns, options?.lineDelimiter),\n\n    quote: (value, options) => quote(value, options?.quoteChar),\n    unquote: (value, options) => unquote(value, options?.unescape, options?.quoteSet ?? _quoteSet),\n\n    fromCsv: (value, options) => csvLineParse(value, options), // delimiter, emptyAsNull\n\n    padLeft: (value, options) =>\n        padLeft(value, typeof options === 'string' ? options : _.repeat(' ', options)),\n    padRight: (value, options) =>\n        padRight(value, typeof options === 'string' ? options : _.repeat(' ', options)),\n\n    toBase64: (value) => base64Encode(value),\n    fromBase64: (value) => base64Decode(value),\n\n    pascalCase: (value) => pascalCase(value),\n    camelCase: (value) => camelCase(value),\n    kebabCase: (value) => kebabCase(value),\n    snakeCase: (value) => snakeCase(value),\n\n    toLower: (value) => value.toLowerCase(),\n    toUpper: (value) => value.toUpperCase(),\n\n    type: (value, options, meta, context) => context.system.sanitize(value, options, context.i18n, context.path),\n};\n"],"names":["_quoteSet","trimLines","value","options","lineDelimiter","stripLines","deleteLines","Array","isArray","patterns","grepLines","quote","quoteChar","unquote","unescape","quoteSet","fromCsv","csvLineParse","padLeft","_","repeat","padRight","toBase64","base64Encode","fromBase64","base64Decode","pascalCase","camelCase","kebabCase","snakeCase","toLower","toLowerCase","toUpper","toUpperCase","type","meta","context","system","sanitize","i18n","path"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAoBA;;;eAAA;;;uBAJO;AAEP,MAAMA,YAAY;IAAC;IAAK;CAAI;MAE5B,WAAe;IACXC,WAAW,CAACC,OAAOC,UAAYF,IAAAA,gBAAS,EAACC,OAAOC,SAASC;IAEzDC,YAAY,CAACH,OAAOC,UAChBG,IAAAA,kBAAW,EAACJ,OAAOK,MAAMC,OAAO,CAACL,WAAWA,UAAUA,SAASM,UAAUN,SAASC;IACtFM,WAAW,CAACR,OAAOC,UACfO,IAAAA,gBAAS,EAACR,OAAOK,MAAMC,OAAO,CAACL,WAAWA,UAAUA,SAASM,UAAUN,SAASC;IAEpFO,OAAO,CAACT,OAAOC,UAAYQ,IAAAA,YAAK,EAACT,OAAOC,SAASS;IACjDC,SAAS,CAACX,OAAOC,UAAYU,IAAAA,cAAO,EAACX,OAAOC,SAASW,UAAUX,SAASY,YAAYf;IAEpFgB,SAAS,CAACd,OAAOC,UAAYc,IAAAA,mBAAY,EAACf,OAAOC;IAEjDe,SAAS,CAAChB,OAAOC,UACbe,IAAAA,cAAO,EAAChB,OAAO,OAAOC,YAAY,WAAWA,UAAUgB,QAAC,CAACC,MAAM,CAAC,KAAKjB;IACzEkB,UAAU,CAACnB,OAAOC,UACdkB,IAAAA,eAAQ,EAACnB,OAAO,OAAOC,YAAY,WAAWA,UAAUgB,QAAC,CAACC,MAAM,CAAC,KAAKjB;IAE1EmB,UAAU,CAACpB,QAAUqB,IAAAA,mBAAY,EAACrB;IAClCsB,YAAY,CAACtB,QAAUuB,IAAAA,mBAAY,EAACvB;IAEpCwB,YAAY,CAACxB,QAAUwB,IAAAA,iBAAU,EAACxB;IAClCyB,WAAW,CAACzB,QAAUyB,IAAAA,gBAAS,EAACzB;IAChC0B,WAAW,CAAC1B,QAAU0B,IAAAA,gBAAS,EAAC1B;IAChC2B,WAAW,CAAC3B,QAAU2B,IAAAA,gBAAS,EAAC3B;IAEhC4B,SAAS,CAAC5B,QAAUA,MAAM6B,WAAW;IACrCC,SAAS,CAAC9B,QAAUA,MAAM+B,WAAW;IAErCC,MAAM,CAAChC,OAAOC,SAASgC,MAAMC,UAAYA,QAAQC,MAAM,CAACC,QAAQ,CAACpC,OAAOC,SAASiC,QAAQG,IAAI,EAAEH,QAAQI,IAAI;AAC/G"}