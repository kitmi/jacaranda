{"version":3,"sources":["../../src/validators/text.js"],"sourcesContent":["import isAlpha from 'validator/lib/isAlpha';\nimport isAlphanumeric from 'validator/lib/isAlphanumeric';\nimport isAscii from 'validator/lib/isAscii';\nimport isBase64 from 'validator/lib/isBase64';\nimport isByteLength from 'validator/lib/isByteLength';\nimport isDataURI from 'validator/lib/isDataURI';\nimport isDate from 'validator/lib/isDate';\nimport isDecimal from 'validator/lib/isDecimal';\nimport isEmail from 'validator/lib/isEmail';\nimport isFQDN from 'validator/lib/isFQDN';\nimport isHexadecimal from 'validator/lib/isHexadecimal';\nimport isHexColor from 'validator/lib/isHexColor';\nimport isIP from 'validator/lib/isIP';\nimport isLength from 'validator/lib/isLength';\nimport isLowercase from 'validator/lib/isLowercase';\nimport isMACAddress from 'validator/lib/isMACAddress';\nimport isMimeType from 'validator/lib/isMimeType';\nimport isMobilePhone from 'validator/lib/isMobilePhone';\nimport isNumeric from 'validator/lib/isNumeric';\nimport isStrongPassword from 'validator/lib/isStrongPassword';\nimport isTime from 'validator/lib/isTime';\nimport isUpperCase from 'validator/lib/isUppercase';\nimport isURL from 'validator/lib/isURL';\n\nimport makeValidator from '../makeValidator';\n\nconst semanticText = {\n    alpha: makeValidator(isAlpha, 'The value is not a valid alpha string.'),\n    alphanumeric: makeValidator(isAlphanumeric, 'The value is not a valid alphanumeric string.'),\n    ascii: makeValidator(isAscii, 'The value is not a valid ascii string.'),\n    base64: makeValidator(isBase64, 'The value is not a valid base64 string.'),\n    bytesInRange: makeValidator(isByteLength, 'The byte length of the value does not falls in a valid range.'),\n    dataURI: makeValidator(isDataURI, 'The value is not a valid data URI.'),\n    date: makeValidator(isDate, 'The value is not a valid date string.'),\n    decimal: makeValidator(isDecimal, 'The value is not a valid decimal string.'),\n    email: makeValidator(isEmail, 'The value is not a valid email.'),\n    domain: makeValidator(isFQDN, 'The value is not a valid domain.'),\n    hex: makeValidator(isHexadecimal, 'The value is not a valid hex string.'),\n    hexColor: makeValidator(isHexColor, 'The value is not a valid hex color.'),\n    ip: makeValidator(isIP, 'The value is not a valid IP address.'),\n    inRange: makeValidator(isLength, 'The length of the value does not falls in a valid range.'),\n    lowercase: makeValidator(isLowercase, 'The value is not a lowercase string.'),\n    macAddress: makeValidator(isMACAddress, 'The value is not a valid MAC address.'),\n    mimeType: makeValidator(isMimeType, 'The value is not a valid MIME type.'),\n    mobilePhone: makeValidator(isMobilePhone, 'The value is not a valid mobile phone number.'),\n    numeric: makeValidator(isNumeric, 'The value is not a valid numeric string.'),\n    password: makeValidator(isStrongPassword, 'The value is not a strong password.'),\n    time: makeValidator(isTime, 'The value is not a valid time string.'),\n    uppercase: makeValidator(isUpperCase, 'The value is not an uppercase string.'),\n    url: makeValidator(isURL, 'The value is not a valid URL.'),\n};\n\nsemanticText['alphanum'] = semanticText['alphanumeric'];\nsemanticText['mobile'] = semanticText['mobilePhone'];\nsemanticText['num'] = semanticText['numeric'];\nsemanticText['mime'] = semanticText['mimeType'];\nsemanticText['number'] = semanticText['decimal'];\n\nexport default semanticText;\n"],"names":["semanticText","alpha","makeValidator","isAlpha","alphanumeric","isAlphanumeric","ascii","isAscii","base64","isBase64","bytesInRange","isByteLength","dataURI","isDataURI","date","isDate","decimal","isDecimal","email","isEmail","domain","isFQDN","hex","isHexadecimal","hexColor","isHexColor","ip","isIP","inRange","isLength","lowercase","isLowercase","macAddress","isMACAddress","mimeType","isMimeType","mobilePhone","isMobilePhone","numeric","isNumeric","password","isStrongPassword","time","isTime","uppercase","isUpperCase","url","isURL"],"mappings":";;;;+BA0DA;;;eAAA;;;gEA1DoB;uEACO;gEACP;iEACC;qEACI;kEACH;+DACH;kEACG;gEACF;+DACD;sEACO;mEACH;6DACN;iEACI;oEACG;qEACC;mEACF;sEACG;kEACJ;yEACO;+DACV;oEACK;8DACN;sEAEQ;;;;;;AAE1B,MAAMA,eAAe;IACjBC,OAAOC,IAAAA,sBAAa,EAACC,gBAAO,EAAE;IAC9BC,cAAcF,IAAAA,sBAAa,EAACG,uBAAc,EAAE;IAC5CC,OAAOJ,IAAAA,sBAAa,EAACK,gBAAO,EAAE;IAC9BC,QAAQN,IAAAA,sBAAa,EAACO,iBAAQ,EAAE;IAChCC,cAAcR,IAAAA,sBAAa,EAACS,qBAAY,EAAE;IAC1CC,SAASV,IAAAA,sBAAa,EAACW,kBAAS,EAAE;IAClCC,MAAMZ,IAAAA,sBAAa,EAACa,eAAM,EAAE;IAC5BC,SAASd,IAAAA,sBAAa,EAACe,kBAAS,EAAE;IAClCC,OAAOhB,IAAAA,sBAAa,EAACiB,gBAAO,EAAE;IAC9BC,QAAQlB,IAAAA,sBAAa,EAACmB,eAAM,EAAE;IAC9BC,KAAKpB,IAAAA,sBAAa,EAACqB,sBAAa,EAAE;IAClCC,UAAUtB,IAAAA,sBAAa,EAACuB,mBAAU,EAAE;IACpCC,IAAIxB,IAAAA,sBAAa,EAACyB,aAAI,EAAE;IACxBC,SAAS1B,IAAAA,sBAAa,EAAC2B,iBAAQ,EAAE;IACjCC,WAAW5B,IAAAA,sBAAa,EAAC6B,oBAAW,EAAE;IACtCC,YAAY9B,IAAAA,sBAAa,EAAC+B,qBAAY,EAAE;IACxCC,UAAUhC,IAAAA,sBAAa,EAACiC,mBAAU,EAAE;IACpCC,aAAalC,IAAAA,sBAAa,EAACmC,sBAAa,EAAE;IAC1CC,SAASpC,IAAAA,sBAAa,EAACqC,kBAAS,EAAE;IAClCC,UAAUtC,IAAAA,sBAAa,EAACuC,yBAAgB,EAAE;IAC1CC,MAAMxC,IAAAA,sBAAa,EAACyC,eAAM,EAAE;IAC5BC,WAAW1C,IAAAA,sBAAa,EAAC2C,oBAAW,EAAE;IACtCC,KAAK5C,IAAAA,sBAAa,EAAC6C,cAAK,EAAE;AAC9B;AAEA/C,YAAY,CAAC,WAAW,GAAGA,YAAY,CAAC,eAAe;AACvDA,YAAY,CAAC,SAAS,GAAGA,YAAY,CAAC,cAAc;AACpDA,YAAY,CAAC,MAAM,GAAGA,YAAY,CAAC,UAAU;AAC7CA,YAAY,CAAC,OAAO,GAAGA,YAAY,CAAC,WAAW;AAC/CA,YAAY,CAAC,SAAS,GAAGA,YAAY,CAAC,UAAU;MAEhD,WAAeA"}