{"version":3,"sources":["../src/modifier.js"],"sourcesContent":["import { InvalidArgument, ValidationError } from '@kitmi/types';\nimport { eachAsync_ } from '@kitmi/utils';\n\nfunction getHandler(modifier, handlers) {\n    let handlerType = null;\n    let handlerKey = modifier.substring(1);\n    let isValidator = false;\n    let isActivator = false;\n\n    if (modifier.startsWith('~')) {\n        handlerType = handlers.validator;\n        isValidator = true;\n    } else if (modifier.startsWith('|')) {\n        handlerType = handlers.processor;\n    } else if (modifier.startsWith('=')) {\n        handlerType = handlers.activator;\n        isActivator = true;\n    } else {\n        throw new InvalidArgument(`Unknown modifier: ${modifier}`);\n    }\n\n    const hanlder = handlerType[handlerKey];\n\n    if (!hanlder) {\n        throw new InvalidArgument(`Handler not found for modifier: ${modifier}`);\n    }\n\n    if (isValidator) {\n        return validatorWrapper(hanlder);\n    }\n\n    if (isActivator) {\n        return activatorWrapper(hanlder);\n    }\n\n    return processorWrapper(hanlder);\n}\n\nfunction validatorWrapper(validator) {\n    return (value, options, meta, context) => {\n        if (!validator.__metaCheckNull && value == null) return value;\n\n        const [validated, reason] = validator(value, options, meta, context);\n\n        if (!validated) {\n            throw new ValidationError(reason, { value, options });\n        }\n\n        return value;\n    };\n}\n\nfunction processorWrapper(processor) {\n    return (value, options, meta, context) => {\n        if (value == null) return value;\n\n        return processor(value, options, meta, context);\n    };\n}\n\nfunction activatorWrapper(activator) {\n    return (value, options, meta, context) => {\n        if (value == null) {\n            return activator(options, meta, context);\n        }\n\n        return value;\n    };\n}\n\nfunction createModifier(modifierItem, handlers) {\n    let modifier;\n    let options;\n    const type = typeof modifierItem;\n\n    if (type === 'string') {\n        modifier = modifierItem;\n    } else if (Array.isArray(modifierItem)) {\n        [modifier, options] = modifierItem;\n    } else if (type === 'object') {\n        modifier = modifierItem.name;\n        options = modifierItem.options;\n    } else if (type === 'function') {\n        \n    }\n\n    if (!modifier) {\n        throw new InvalidArgument(`Invalid modifier syntax: ${JSON.stringify(modifierItem)}`);\n    }\n\n    return [getHandler(modifier, handlers), options];\n}\n\n/**\n * Apply post modifiers one-by-one\n * @param {*} value\n * @param {Object} meta - The current type meta\n * @property {Array} meta.post - The list of post modifiers\n * @property {string} meta.type - The type name\n * @param {Object} context\n * @property {Object} context.system - The type system\n * @property {Object} context.system.types - All types meta in the type system\n * @property {Object} context.system.handlers - The modifier handlers for the type system\n * @property {Object} context.i18n - The i18n object\n * @property {Function} context.i18n.t - The i18n translate function\n * @property {string} context.path - The current field path\n * @property {*} context.rawValue - The raw value\n * @returns {*}\n */\nconst applyModifiers = (value, meta, context) =>\n    meta.post.reduce((_value, modifier) => {\n        const [handler, options] = createModifier(modifier, context.system.handlers);\n        return handler(_value, options, meta, context);\n    }, value);\n\nconst applyModifiers_ = async (value, meta, context) => {\n    await eachAsync_(meta.post, async (modifier) => {\n        const [handler, options] = createModifier(modifier, context.system.handlers);\n        value = await handler(value, options, meta, context);\n    });\n\n    return value;\n};\n\nexport const postProcess_ = async (value, meta, opts) => {\n    if (meta.post) {\n        value = await applyModifiers_(value, meta, opts);\n    }\n\n    return value;\n};\n\nexport const postProcess = (value, meta, opts) => {\n    if (meta.post) {\n        value = applyModifiers(value, meta, opts);\n    }\n\n    return value;\n};\n"],"names":["postProcess","postProcess_","getHandler","modifier","handlers","handlerType","handlerKey","substring","isValidator","isActivator","startsWith","validator","processor","activator","InvalidArgument","hanlder","validatorWrapper","activatorWrapper","processorWrapper","value","options","meta","context","__metaCheckNull","validated","reason","ValidationError","createModifier","modifierItem","type","Array","isArray","name","JSON","stringify","applyModifiers","post","reduce","_value","handler","system","applyModifiers_","eachAsync_","opts"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}