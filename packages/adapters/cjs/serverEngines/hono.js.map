{"version":3,"sources":["../../src/serverEngines/hono.js"],"sourcesContent":["import { _ } from '@kitmi/utils';\n\nlet HTTPException;\n\nclass HonoEngine {\n    constructor(server) {\n        this.server = server;\n    }\n\n    async init_(config) {\n        const Hono = await this.server.tryRequire_('hono');\n        if (!HTTPException) {\n            const { HTTPException: _HTTPException } = await this.server.tryRequire_('hono/http-exception');\n            HTTPException = _HTTPException;\n        }\n\n        this.engineType = Hono;\n        this.engine = new Hono();\n\n        this._initialize(config ?? {});\n    }\n\n    async _initialize_(options) {\n        const port = options.httpPort || 2331;\n\n        if (typeof Bun !== 'undefined') {\n            // this code will only run when the file is run with Bun\n            this.server.on('ready', () => {\n                const httpServer = Bun.serve({\n                    port,\n                    fetch: this.engine.fetch,\n                });\n\n                this._ready(httpServer);\n            });\n        } else {\n            const { serve } = await this.server.tryRequire_('@hono/node-server');\n\n            server.on('ready', () => {\n                const httpServer = serve({\n                    port,\n                    fetch: this.engine.fetch,\n                });\n\n                this._ready(httpServer);\n            });\n        }\n    }\n\n    _ready(httpServer) {\n        this.server.httpServer = httpServer;\n        this.server.host = httpServer.hostname;\n        this.server.port = httpServer.port;\n\n        this.server.log('info', `A hono http service is listening on port [${httpServer.port}] ...`);\n        /**\n         * Http server ready event\n         * @event WebServer#httpReady\n         */\n        this.server.emit_('httpReady', this.server);\n    }\n\n    use(middleware) {\n        this.engine.use(middleware);\n    }\n\n    attach(router) {\n        this.engine.use(router.routes());\n        this.engine.use(router.allowedMethods());\n    }\n\n    mount(route, childApp) {\n        this.engine.route(route, childApp.engine);\n    }\n}\n\nexport default HonoEngine;\n"],"names":["HTTPException","HonoEngine","init_","config","Hono","server","tryRequire_","_HTTPException","engineType","engine","_initialize","_initialize_","options","port","httpPort","Bun","on","httpServer","serve","fetch","_ready","host","hostname","log","emit_","use","middleware","attach","router","routes","allowedMethods","mount","route","childApp","constructor"],"mappings":";;;;+BA4EA;;;eAAA;;;uBA5EkB;AAElB,IAAIA;AAEJ,MAAMC;IAKF,MAAMC,MAAMC,MAAM,EAAE;QAChB,MAAMC,OAAO,MAAM,IAAI,CAACC,MAAM,CAACC,WAAW,CAAC;QAC3C,IAAI,CAACN,eAAe;YAChB,MAAM,EAAEA,eAAeO,cAAc,EAAE,GAAG,MAAM,IAAI,CAACF,MAAM,CAACC,WAAW,CAAC;YACxEN,gBAAgBO;QACpB;QAEA,IAAI,CAACC,UAAU,GAAGJ;QAClB,IAAI,CAACK,MAAM,GAAG,IAAIL;QAElB,IAAI,CAACM,WAAW,CAACP,UAAU,CAAC;IAChC;IAEA,MAAMQ,aAAaC,OAAO,EAAE;QACxB,MAAMC,OAAOD,QAAQE,QAAQ,IAAI;QAEjC,IAAI,OAAOC,QAAQ,aAAa;YAC5B,wDAAwD;YACxD,IAAI,CAACV,MAAM,CAACW,EAAE,CAAC,SAAS;gBACpB,MAAMC,aAAaF,IAAIG,KAAK,CAAC;oBACzBL;oBACAM,OAAO,IAAI,CAACV,MAAM,CAACU,KAAK;gBAC5B;gBAEA,IAAI,CAACC,MAAM,CAACH;YAChB;QACJ,OAAO;YACH,MAAM,EAAEC,KAAK,EAAE,GAAG,MAAM,IAAI,CAACb,MAAM,CAACC,WAAW,CAAC;YAEhDD,OAAOW,EAAE,CAAC,SAAS;gBACf,MAAMC,aAAaC,MAAM;oBACrBL;oBACAM,OAAO,IAAI,CAACV,MAAM,CAACU,KAAK;gBAC5B;gBAEA,IAAI,CAACC,MAAM,CAACH;YAChB;QACJ;IACJ;IAEAG,OAAOH,UAAU,EAAE;QACf,IAAI,CAACZ,MAAM,CAACY,UAAU,GAAGA;QACzB,IAAI,CAACZ,MAAM,CAACgB,IAAI,GAAGJ,WAAWK,QAAQ;QACtC,IAAI,CAACjB,MAAM,CAACQ,IAAI,GAAGI,WAAWJ,IAAI;QAElC,IAAI,CAACR,MAAM,CAACkB,GAAG,CAAC,QAAQ,CAAC,0CAA0C,EAAEN,WAAWJ,IAAI,CAAC,KAAK,CAAC;QAC3F;;;SAGC,GACD,IAAI,CAACR,MAAM,CAACmB,KAAK,CAAC,aAAa,IAAI,CAACnB,MAAM;IAC9C;IAEAoB,IAAIC,UAAU,EAAE;QACZ,IAAI,CAACjB,MAAM,CAACgB,GAAG,CAACC;IACpB;IAEAC,OAAOC,MAAM,EAAE;QACX,IAAI,CAACnB,MAAM,CAACgB,GAAG,CAACG,OAAOC,MAAM;QAC7B,IAAI,CAACpB,MAAM,CAACgB,GAAG,CAACG,OAAOE,cAAc;IACzC;IAEAC,MAAMC,KAAK,EAAEC,QAAQ,EAAE;QACnB,IAAI,CAACxB,MAAM,CAACuB,KAAK,CAACA,OAAOC,SAASxB,MAAM;IAC5C;IApEAyB,YAAY7B,OAAM,CAAE;QAChB,IAAI,CAACA,MAAM,GAAGA;IAClB;AAmEJ;MAEA,WAAeJ"}