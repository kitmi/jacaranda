{"version":3,"sources":["../src/cmd.js"],"sourcesContent":["import childProcess from 'node:child_process';\nimport { consoleLog, consoleError } from './functions';\n\n/**\n * Execute a shell command.\n * @function module:cmd.run_\n * @param {string} cmd - Command line to execute\n * @param {object} options\n * @returns {Promise.<Object>}\n */\nexport const run_ = (cmd, options) =>\n    new Promise((resolve, reject) =>\n        childProcess.exec(cmd, { windowsHide: true, ...options }, (error, stdout, stderr) => {\n            if (error) {\n                return reject(error);\n            }\n\n            return resolve({ stdout, stderr });\n        })\n    );\n\n/**\n * Execute a shell command and lively output\n * @function module:cmd.runLive_\n * @param {string} cmd - Command line to execute\n * @param {Array} [args] - Arguments list *\n * @param {*} onStdOut -\n * @param {*} onStdErr\n * @param {*} options\n * @returns {Promise.<Object>}\n */\nexport const runLive_ = (cmd, args, onStdOut, onStdErr, options) =>\n    new Promise((resolve, reject) => {\n        let ps = childProcess.spawn(cmd, args, {\n            windowsHide: true,\n            ...options,\n        });\n        let e;\n\n        onStdOut ??= consoleLog;\n        onStdErr ??= consoleError;\n\n        ps.stdout.on('data', onStdOut);\n        ps.stderr.on('data', onStdErr);\n\n        ps.on('close', (code) => (e ? reject(e) : resolve(code)));\n        ps.on('error', (error) => {\n            e = error;\n        });\n    });\n\n/**\n * Execute a shell command synchronously\n * @function module:cmd.runSync\n * @param {string} cmd - Command line to execute\n * @returns {string}\n */\nexport const runSync = (cmd, options) => childProcess.execSync(cmd, { windowsHide: true, ...options }).toString();\n"],"names":["runLive_","runSync","run_","cmd","options","Promise","resolve","reject","childProcess","exec","windowsHide","error","stdout","stderr","args","onStdOut","onStdErr","ps","spawn","e","consoleLog","consoleError","on","code","execSync","toString"],"mappings":";;;;;;;;;;;IA+BaA,QAAQ;eAARA;;IA0BAC,OAAO;eAAPA;;IA/CAC,IAAI;eAAJA;;;0EAVY;2BACgB;;;;;;AASlC,MAAMA,OAAO,CAACC,KAAKC,UACtB,IAAIC,QAAQ,CAACC,SAASC,SAClBC,0BAAY,CAACC,IAAI,CAACN,KAAK;YAAEO,aAAa;YAAM,GAAGN,OAAO;QAAC,GAAG,CAACO,OAAOC,QAAQC;YACtE,IAAIF,OAAO;gBACP,OAAOJ,OAAOI;YAClB;YAEA,OAAOL,QAAQ;gBAAEM;gBAAQC;YAAO;QACpC;AAaD,MAAMb,WAAW,CAACG,KAAKW,MAAMC,UAAUC,UAAUZ,UACpD,IAAIC,QAAQ,CAACC,SAASC;QAClB,IAAIU,KAAKT,0BAAY,CAACU,KAAK,CAACf,KAAKW,MAAM;YACnCJ,aAAa;YACb,GAAGN,OAAO;QACd;QACA,IAAIe;QAEJJ,aAAaK,qBAAU;QACvBJ,aAAaK,uBAAY;QAEzBJ,GAAGL,MAAM,CAACU,EAAE,CAAC,QAAQP;QACrBE,GAAGJ,MAAM,CAACS,EAAE,CAAC,QAAQN;QAErBC,GAAGK,EAAE,CAAC,SAAS,CAACC,OAAUJ,IAAIZ,OAAOY,KAAKb,QAAQiB;QAClDN,GAAGK,EAAE,CAAC,SAAS,CAACX;YACZQ,IAAIR;QACR;IACJ;AAQG,MAAMV,UAAU,CAACE,KAAKC,UAAYI,0BAAY,CAACgB,QAAQ,CAACrB,KAAK;QAAEO,aAAa;QAAM,GAAGN,OAAO;IAAC,GAAGqB,QAAQ"}