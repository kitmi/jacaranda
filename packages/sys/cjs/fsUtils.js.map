{"version":3,"sources":["../src/fsUtils.js"],"sourcesContent":["import fs from 'fs-extra';\nimport os from 'node:os'; \nimport path from 'node:path';\n\n/**\n * Is the path a directory?\n * @function module:fs.isDir\n * @param {String} path\n * @returns {boolean}\n */\nexport const isDir = (path) => fs.statSync(path).isDirectory();\n\n/**\n * Is the path a directory? (async)\n * @function module:fs.isDir_\n * @param {String} path\n * @returns {boolean}\n */\nexport const isDir_ = async (path) => (await fs.stat(path)).isDirectory();\n\n/**\n * Is the path an empty directory?\n * @function module:fs.isDirEmpty\n * @param {String} path\n * @returns {boolean}\n */\nexport const isDirEmpty = (path) => fs.readdirSync(path).length === 0;\n\n/**\n * Is the path an empty directory? (async)\n * @function module:fs.isDirEmpty_\n * @param {String} path\n * @returns {boolean}\n */\nexport const isDirEmpty_ = async (path) => {\n    const files = await fs.readdir(path);\n    return files.length === 0;\n};\n\n/**\n * Read a file list.\n * @param {string} basePath - Base path to resolve of files in the list\n * @param {string} listFile - List file path\n * @param {string} [eol = os.EOL] \n * @returns {array}\n */\nexport const readFileList_ = async (basePath, listFile, eol) => {\n    const fileList = await fs.readFile(listFile, 'utf-8');\n    const list = fileList\n        .split(eol ?? os.EOL);\n\n    return list.reduce((acc, file) => {\n        if (file.startsWith('#')) {\n            return acc;\n        }\n\n        file = file.trim();\n\n        if (file.length === 0) {\n            return acc;\n        }        \n\n        return [...acc, path.resolve(basePath, file)];\n    }, []);        \n};\n"],"names":["isDir","isDirEmpty","isDirEmpty_","isDir_","readFileList_","path","fs","statSync","isDirectory","stat","readdirSync","length","files","readdir","basePath","listFile","eol","fileList","readFile","list","split","os","EOL","reduce","acc","file","startsWith","trim","resolve"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;;IAUaA,KAAK;eAALA;;IAgBAC,UAAU;eAAVA;;IAQAC,WAAW;eAAXA;;IAhBAC,MAAM;eAANA;;IA4BAC,aAAa;eAAbA;;;gEA9CE;+DACA;iEACE;;;;;;AAQV,MAAMJ,QAAQ,CAACK,OAASC,gBAAE,CAACC,QAAQ,CAACF,MAAMG,WAAW;AAQrD,MAAML,SAAS,OAAOE,OAAS,AAAC,CAAA,MAAMC,gBAAE,CAACG,IAAI,CAACJ,KAAI,EAAGG,WAAW;AAQhE,MAAMP,aAAa,CAACI,OAASC,gBAAE,CAACI,WAAW,CAACL,MAAMM,MAAM,KAAK;AAQ7D,MAAMT,cAAc,OAAOG;IAC9B,MAAMO,QAAQ,MAAMN,gBAAE,CAACO,OAAO,CAACR;IAC/B,OAAOO,MAAMD,MAAM,KAAK;AAC5B;AASO,MAAMP,gBAAgB,OAAOU,UAAUC,UAAUC;IACpD,MAAMC,WAAW,MAAMX,gBAAE,CAACY,QAAQ,CAACH,UAAU;IAC7C,MAAMI,OAAOF,SACRG,KAAK,CAACJ,OAAOK,eAAE,CAACC,GAAG;IAExB,OAAOH,KAAKI,MAAM,CAAC,CAACC,KAAKC;QACrB,IAAIA,KAAKC,UAAU,CAAC,MAAM;YACtB,OAAOF;QACX;QAEAC,OAAOA,KAAKE,IAAI;QAEhB,IAAIF,KAAKd,MAAM,KAAK,GAAG;YACnB,OAAOa;QACX;QAEA,OAAO;eAAIA;YAAKnB,iBAAI,CAACuB,OAAO,CAACd,UAAUW;SAAM;IACjD,GAAG,EAAE;AACT"}