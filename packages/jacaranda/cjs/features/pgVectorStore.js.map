{"version":3,"sources":["../../src/features/pgVectorStore.js"],"sourcesContent":["import { Types, InvalidConfiguration } from '@kitmi/types';\nimport { csvLineParse } from '@kitmi/utils';\nimport Feature from '../Feature';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    load_: async function (app, options, name) {\n        const { postgresService, tableName } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    postgresService: { type: 'text', default: 'postgres' },\n                    tableName: { type: 'text', default: 'documents' },\n                },\n            },\n            name\n        );\n\n        const pg = app.getService(postgresService);\n        if (pg == null) {\n            throw new InvalidConfiguration(\n                `\"${postgresService}\" service should be enabled for \"${name}\" feature.`,\n                app,\n                name\n            );\n        }\n\n        const service = {\n            ensureStore_: async (_tableName, fnSimilarityCheck, uk) => {\n                _tableName || (_tableName = tableName);\n                fnSimilarityCheck || (fnSimilarityCheck = `${_tableName}_similarity_check`);\n\n                await pg.execute_(async (client) => {\n                    const result = [];\n\n                    result.push(await client.query('CREATE EXTENSION IF NOT EXISTS vector;'));\n\n                    const sql = `CREATE TABLE IF NOT EXISTS ${pg.identifier(_tableName)} (\n                        id bigserial PRIMARY KEY,\n                        content text, ${uk ? '\\n' + uk + ' varchar(60) UNIQUE,\\n' : ''}                        \n                        metadata jsonb,\n                        embedding vector(1536) \n                      );`;\n\n                    result.push(await client.query(sql));\n\n                    const sql2 = `CREATE OR REPLACE FUNCTION ${pg.identifier(fnSimilarityCheck)} (\n                        query_embedding vector(1536),\n                        match_threshold float,\n                        max_match_count int DEFAULT 1,\n                        filter jsonb DEFAULT '{}'\n                      ) RETURNS TABLE (\n                        id bigint, ${uk ? '\\n' + uk + ' varchar(60),\\n' : ''}                        \n                        similarity float\n                      )\n                      LANGUAGE SQL STABLE\n                      AS $$\n                        SELECT\n                          id,\n                          1- (embedding <=> query_embedding) AS similarity\n                        FROM ${pg.identifier(_tableName)}\n                        WHERE metadata @> filter AND (1- (embedding <=> query_embedding) > match_threshold)\n                        ORDER BY similarity DESC\n                        LIMIT max_match_count;\n                      $$;`;\n\n                    result.push(await client.query(sql2));\n\n                    return result;\n                });\n            },\n\n            addDocuments_: async (documents, _tableName) => {\n                const values = documents\n                    .map((document) => {\n                        const { content, metadata, embedding } = document;\n                        return (\n                            '(' +\n                            [\n                                pg.literal(content),\n                                pg.literal(JSON.stringify(metadata)),\n                                pg.literal(JSON.stringify(embedding)),\n                            ].join(',') +\n                            ')'\n                        );\n                    })\n                    .join(',');\n\n                const sql = `INSERT INTO ${pg.identifier(\n                    _tableName ?? tableName\n                )} (content, metadata, embedding) VALUES ${values}`;\n\n                return pg.query_(sql);\n            },\n\n            checkRelevancy_: async (vector, filter, match_threshold, _tableName, fnSimilarityCheck) => {\n                _tableName || (_tableName = tableName);\n                fnSimilarityCheck || (fnSimilarityCheck = `${_tableName}_similarity_check`);\n\n                filter = Types.OBJECT.sanitize(filter, { default: {} });\n                match_threshold = Types.NUMBER.sanitize(match_threshold);\n\n                const { rows, fields } = await pg.query_(`SELECT ${pg.identifier(fnSimilarityCheck)}($1, $2, $3, $4)`, [\n                    vector,\n                    match_threshold,\n                    1,\n                    filter,\n                ]);\n\n                return rows.length ? csvLineParse(rows[0][fields[0].name].slice(1, -1)) : undefined;\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","load_","app","options","name","postgresService","tableName","featureConfig","schema","type","default","pg","getService","InvalidConfiguration","service","ensureStore_","_tableName","fnSimilarityCheck","uk","execute_","client","result","push","query","sql","identifier","sql2","addDocuments_","documents","values","map","document","content","metadata","embedding","literal","JSON","stringify","join","query_","checkRelevancy_","vector","filter","match_threshold","Types","OBJECT","sanitize","NUMBER","rows","fields","length","csvLineParse","slice","undefined","registerService"],"mappings":";;;;+BAIA;;;eAAA;;;uBAJ4C;uBACf;gEACT;;;;;;MAEpB,WAAe;IACXA,OAAOC,gBAAO,CAACC,OAAO;IAEtBC,WAAW;IAEXC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI;QACrC,MAAM,EAAEC,eAAe,EAAEC,SAAS,EAAE,GAAGJ,IAAIK,aAAa,CACpDJ,SACA;YACIK,QAAQ;gBACJH,iBAAiB;oBAAEI,MAAM;oBAAQC,SAAS;gBAAW;gBACrDJ,WAAW;oBAAEG,MAAM;oBAAQC,SAAS;gBAAY;YACpD;QACJ,GACAN;QAGJ,MAAMO,KAAKT,IAAIU,UAAU,CAACP;QAC1B,IAAIM,MAAM,MAAM;YACZ,MAAM,IAAIE,2BAAoB,CAC1B,CAAC,CAAC,EAAER,gBAAgB,iCAAiC,EAAED,KAAK,UAAU,CAAC,EACvEF,KACAE;QAER;QAEA,MAAMU,UAAU;YACZC,cAAc,OAAOC,YAAYC,mBAAmBC;gBAChDF,cAAeA,CAAAA,aAAaV,SAAQ;gBACpCW,qBAAsBA,CAAAA,oBAAoB,CAAC,EAAED,WAAW,iBAAiB,CAAC,AAAD;gBAEzE,MAAML,GAAGQ,QAAQ,CAAC,OAAOC;oBACrB,MAAMC,SAAS,EAAE;oBAEjBA,OAAOC,IAAI,CAAC,MAAMF,OAAOG,KAAK,CAAC;oBAE/B,MAAMC,MAAM,CAAC,2BAA2B,EAAEb,GAAGc,UAAU,CAACT,YAAY;;sCAElD,EAAEE,KAAK,OAAOA,KAAK,2BAA2B,GAAG;;;wBAG/D,CAAC;oBAELG,OAAOC,IAAI,CAAC,MAAMF,OAAOG,KAAK,CAACC;oBAE/B,MAAME,OAAO,CAAC,2BAA2B,EAAEf,GAAGc,UAAU,CAACR,mBAAmB;;;;;;mCAM7D,EAAEC,KAAK,OAAOA,KAAK,oBAAoB,GAAG;;;;;;;;6BAQhD,EAAEP,GAAGc,UAAU,CAACT,YAAY;;;;yBAIhC,CAAC;oBAENK,OAAOC,IAAI,CAAC,MAAMF,OAAOG,KAAK,CAACG;oBAE/B,OAAOL;gBACX;YACJ;YAEAM,eAAe,OAAOC,WAAWZ;gBAC7B,MAAMa,SAASD,UACVE,GAAG,CAAC,CAACC;oBACF,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS,EAAE,GAAGH;oBACzC,OACI,MACA;wBACIpB,GAAGwB,OAAO,CAACH;wBACXrB,GAAGwB,OAAO,CAACC,KAAKC,SAAS,CAACJ;wBAC1BtB,GAAGwB,OAAO,CAACC,KAAKC,SAAS,CAACH;qBAC7B,CAACI,IAAI,CAAC,OACP;gBAER,GACCA,IAAI,CAAC;gBAEV,MAAMd,MAAM,CAAC,YAAY,EAAEb,GAAGc,UAAU,CACpCT,cAAcV,WAChB,uCAAuC,EAAEuB,OAAO,CAAC;gBAEnD,OAAOlB,GAAG4B,MAAM,CAACf;YACrB;YAEAgB,iBAAiB,OAAOC,QAAQC,QAAQC,iBAAiB3B,YAAYC;gBACjED,cAAeA,CAAAA,aAAaV,SAAQ;gBACpCW,qBAAsBA,CAAAA,oBAAoB,CAAC,EAAED,WAAW,iBAAiB,CAAC,AAAD;gBAEzE0B,SAASE,YAAK,CAACC,MAAM,CAACC,QAAQ,CAACJ,QAAQ;oBAAEhC,SAAS,CAAC;gBAAE;gBACrDiC,kBAAkBC,YAAK,CAACG,MAAM,CAACD,QAAQ,CAACH;gBAExC,MAAM,EAAEK,IAAI,EAAEC,MAAM,EAAE,GAAG,MAAMtC,GAAG4B,MAAM,CAAC,CAAC,OAAO,EAAE5B,GAAGc,UAAU,CAACR,mBAAmB,gBAAgB,CAAC,EAAE;oBACnGwB;oBACAE;oBACA;oBACAD;iBACH;gBAED,OAAOM,KAAKE,MAAM,GAAGC,IAAAA,mBAAY,EAACH,IAAI,CAAC,EAAE,CAACC,MAAM,CAAC,EAAE,CAAC7C,IAAI,CAAC,CAACgD,KAAK,CAAC,GAAG,CAAC,MAAMC;YAC9E;QACJ;QAEAnD,IAAIoD,eAAe,CAAClD,MAAMU;IAC9B;AACJ"}