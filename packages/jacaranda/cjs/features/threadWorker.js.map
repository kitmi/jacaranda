{"version":3,"sources":["../../src/features/threadWorker.js"],"sourcesContent":["import { parentPort } from 'node:worker_threads';\nimport Feature from '../Feature';\n\n/**\n * Hasher, get the hash of a buffer/string/stream/file.\n * @module Feature_Hasher\n */\n\nexport default {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} [options] - Options for the feature\n     * @returns {Promise.<void>}\n     */\n    load_: async function (app, options, name) {\n        const { logMessage, logLevel } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    logMessage: { type: 'boolean', default: false },\n                    logLevel: { type: 'text', enum: ['info', 'verbose'], default: 'info' },\n                },\n            },\n            name\n        );\n\n        const perfCounter = {\n            numTasks: 0,\n            numTasksCompleted: 0,\n            numTasksFailed: 0,         \n            totalTaskTime: 0,\n            averageTaskTime: 0,   \n            maxTaskTime: 0,\n        };\n\n        const service = {\n            get perfCounter() {\n                return perfCounter;\n            },\n            start(handlers) {\n                if (parentPort) {\n                    const callback = (task, payload) => {\n                        parentPort.postMessage({ id: '$CALLBACK', task, payload });\n                    };\n\n                    parentPort.on('close', async () => {\n                        app.log('info', 'Thread worker closed by main thread.');\n                        await app.stop_();\n                    });\n                    parentPort.on('message', async (message) => {\n                        perfCounter.numTasks++;\n                        const startTime = Date.now();\n\n                        try {\n                            if (logMessage) {\n                                app.log(logLevel, 'Received message from main thread.', message);\n                            }\n\n                            const { id, task, payload } = message;\n                            const handler = handlers[task];\n\n                            if (handler == null) {\n                                throw new Error(`Unknown task \"${task}\".`);\n                            }\n\n                            const result = await handler(payload, callback);\n                            const { value, transferList } = result || {};\n                            parentPort.postMessage({ id, value }, transferList);\n                            perfCounter.numTasksCompleted++;\n\n                            const endTime = Date.now();\n                            const taskTime = endTime - startTime;\n                            perfCounter.totalTaskTime += taskTime;\n                            perfCounter.averageTaskTime = perfCounter.totalTaskTime / perfCounter.numTasksCompleted;\n                            perfCounter.maxTaskTime = Math.max(perfCounter.maxTaskTime, taskTime);\n                        } catch (error) {\n                            perfCounter.numTasksFailed++;\n                            app.logError(error);\n\n                            const newError = { message: error.message, stack: error.stack };\n\n                            for (const [key, value] of Object.entries(error)) {\n                                if (typeof value !== 'object') {\n                                    newError[key] = value;\n                                }\n                            }\n\n                            parentPort.postMessage({ id: message.id, error: newError });\n                        }\n                    });\n                } else {\n                    throw new Error('This feature can only be used in a worker thread.');\n                }\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["stage","Feature","SERVICE","load_","app","options","name","logMessage","logLevel","featureConfig","schema","type","default","enum","perfCounter","numTasks","numTasksCompleted","numTasksFailed","totalTaskTime","averageTaskTime","maxTaskTime","service","start","handlers","parentPort","callback","task","payload","postMessage","id","on","log","stop_","message","startTime","Date","now","handler","Error","result","value","transferList","endTime","taskTime","Math","max","error","logError","newError","stack","key","Object","entries","registerService"],"mappings":";;;;+BAGA;;;CAGC,GAED;;;eAAA;;;oCAR2B;gEACP;;;;;;MAOpB,WAAe;IACX;;;KAGC,GACDA,OAAOC,gBAAO,CAACC,OAAO;IAEtB;;;;;KAKC,GACDC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI;QACrC,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAE,GAAGJ,IAAIK,aAAa,CAC9CJ,SACA;YACIK,QAAQ;gBACJH,YAAY;oBAAEI,MAAM;oBAAWC,SAAS;gBAAM;gBAC9CJ,UAAU;oBAAEG,MAAM;oBAAQE,MAAM;wBAAC;wBAAQ;qBAAU;oBAAED,SAAS;gBAAO;YACzE;QACJ,GACAN;QAGJ,MAAMQ,cAAc;YAChBC,UAAU;YACVC,mBAAmB;YACnBC,gBAAgB;YAChBC,eAAe;YACfC,iBAAiB;YACjBC,aAAa;QACjB;QAEA,MAAMC,UAAU;YACZ,IAAIP,eAAc;gBACd,OAAOA;YACX;YACAQ,OAAMC,QAAQ;gBACV,IAAIC,8BAAU,EAAE;oBACZ,MAAMC,WAAW,CAACC,MAAMC;wBACpBH,8BAAU,CAACI,WAAW,CAAC;4BAAEC,IAAI;4BAAaH;4BAAMC;wBAAQ;oBAC5D;oBAEAH,8BAAU,CAACM,EAAE,CAAC,SAAS;wBACnB1B,IAAI2B,GAAG,CAAC,QAAQ;wBAChB,MAAM3B,IAAI4B,KAAK;oBACnB;oBACAR,8BAAU,CAACM,EAAE,CAAC,WAAW,OAAOG;wBAC5BnB,YAAYC,QAAQ;wBACpB,MAAMmB,YAAYC,KAAKC,GAAG;wBAE1B,IAAI;4BACA,IAAI7B,YAAY;gCACZH,IAAI2B,GAAG,CAACvB,UAAU,sCAAsCyB;4BAC5D;4BAEA,MAAM,EAAEJ,EAAE,EAAEH,IAAI,EAAEC,OAAO,EAAE,GAAGM;4BAC9B,MAAMI,UAAUd,QAAQ,CAACG,KAAK;4BAE9B,IAAIW,WAAW,MAAM;gCACjB,MAAM,IAAIC,MAAM,CAAC,cAAc,EAAEZ,KAAK,EAAE,CAAC;4BAC7C;4BAEA,MAAMa,SAAS,MAAMF,QAAQV,SAASF;4BACtC,MAAM,EAAEe,KAAK,EAAEC,YAAY,EAAE,GAAGF,UAAU,CAAC;4BAC3Cf,8BAAU,CAACI,WAAW,CAAC;gCAAEC;gCAAIW;4BAAM,GAAGC;4BACtC3B,YAAYE,iBAAiB;4BAE7B,MAAM0B,UAAUP,KAAKC,GAAG;4BACxB,MAAMO,WAAWD,UAAUR;4BAC3BpB,YAAYI,aAAa,IAAIyB;4BAC7B7B,YAAYK,eAAe,GAAGL,YAAYI,aAAa,GAAGJ,YAAYE,iBAAiB;4BACvFF,YAAYM,WAAW,GAAGwB,KAAKC,GAAG,CAAC/B,YAAYM,WAAW,EAAEuB;wBAChE,EAAE,OAAOG,OAAO;4BACZhC,YAAYG,cAAc;4BAC1Bb,IAAI2C,QAAQ,CAACD;4BAEb,MAAME,WAAW;gCAAEf,SAASa,MAAMb,OAAO;gCAAEgB,OAAOH,MAAMG,KAAK;4BAAC;4BAE9D,KAAK,MAAM,CAACC,KAAKV,MAAM,IAAIW,OAAOC,OAAO,CAACN,OAAQ;gCAC9C,IAAI,OAAON,UAAU,UAAU;oCAC3BQ,QAAQ,CAACE,IAAI,GAAGV;gCACpB;4BACJ;4BAEAhB,8BAAU,CAACI,WAAW,CAAC;gCAAEC,IAAII,QAAQJ,EAAE;gCAAEiB,OAAOE;4BAAS;wBAC7D;oBACJ;gBACJ,OAAO;oBACH,MAAM,IAAIV,MAAM;gBACpB;YACJ;QACJ;QAEAlC,IAAIiD,eAAe,CAAC/C,MAAMe;IAC9B;AACJ"}