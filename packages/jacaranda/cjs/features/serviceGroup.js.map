{"version":3,"sources":["../../src/features/serviceGroup.js"],"sourcesContent":["import { _, eachAsync_, batchAsync_ } from '@kitmi/utils';\nimport { InvalidConfiguration } from '@kitmi/types';\nimport Feature from '../Feature';\n\n/**\n * Enable a service group\n * @module Feature_ServiceGroup\n */\n\nmodule.exports = {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} services - Map of services from service registration to service instance options\n     * @returns {Promise.<*>}\n     *\n     * @example\n     *\n     * serviceGroup: { 's3DigitalOcean': { '<instanceName>': {  } }   }\n     */\n    load_: async function (app, services) {\n        let features = [];\n        const instancesMap = {};\n\n        _.each(services, (instances, serviceName) => {\n            let feature = app._loadFeature(serviceName);\n            if (!feature.groupable) {\n                throw new InvalidConfiguration(\n                    `Feature [${serviceName}] is not groupable.`,\n                    app,\n                    `serviceGroup.${serviceName}`\n                );\n            }\n\n            features.push([feature]);\n            instancesMap[serviceName] = instances;\n        });\n\n        features = app._sortFeatures(features);\n\n        await eachAsync_(features, async ([feature]) => {\n            const instances = instancesMap[feature.name];\n            await batchAsync_(instances, (serviceOptions, instanceName) => {\n                const fullName = `${feature.name}-${instanceName}`;\n                const { load_, ...others } = feature;\n                load_(app, serviceOptions, `${feature.name}-${instanceName}`);\n                others.enabled = true;\n                app.features[fullName] = others;\n            });\n        });\n    },\n};\n"],"names":["module","exports","stage","Feature","SERVICE","load_","app","services","features","instancesMap","_","each","instances","serviceName","feature","_loadFeature","groupable","InvalidConfiguration","push","_sortFeatures","eachAsync_","name","batchAsync_","serviceOptions","instanceName","fullName","others","enabled"],"mappings":";;;;uBAA2C;uBACN;gEACjB;;;;;;AAEpB;;;CAGC,GAEDA,OAAOC,OAAO,GAAG;IACb;;;KAGC,GACDC,OAAOC,gBAAO,CAACC,OAAO;IAEtB;;;;;;;;;KASC,GACDC,OAAO,eAAgBC,GAAG,EAAEC,QAAQ;QAChC,IAAIC,WAAW,EAAE;QACjB,MAAMC,eAAe,CAAC;QAEtBC,QAAC,CAACC,IAAI,CAACJ,UAAU,CAACK,WAAWC;YACzB,IAAIC,UAAUR,IAAIS,YAAY,CAACF;YAC/B,IAAI,CAACC,QAAQE,SAAS,EAAE;gBACpB,MAAM,IAAIC,2BAAoB,CAC1B,CAAC,SAAS,EAAEJ,YAAY,mBAAmB,CAAC,EAC5CP,KACA,CAAC,aAAa,EAAEO,YAAY,CAAC;YAErC;YAEAL,SAASU,IAAI,CAAC;gBAACJ;aAAQ;YACvBL,YAAY,CAACI,YAAY,GAAGD;QAChC;QAEAJ,WAAWF,IAAIa,aAAa,CAACX;QAE7B,MAAMY,IAAAA,iBAAU,EAACZ,UAAU,OAAO,CAACM,QAAQ;YACvC,MAAMF,YAAYH,YAAY,CAACK,QAAQO,IAAI,CAAC;YAC5C,MAAMC,IAAAA,kBAAW,EAACV,WAAW,CAACW,gBAAgBC;gBAC1C,MAAMC,WAAW,CAAC,EAAEX,QAAQO,IAAI,CAAC,CAAC,EAAEG,aAAa,CAAC;gBAClD,MAAM,EAAEnB,KAAK,EAAE,GAAGqB,QAAQ,GAAGZ;gBAC7BT,MAAMC,KAAKiB,gBAAgB,CAAC,EAAET,QAAQO,IAAI,CAAC,CAAC,EAAEG,aAAa,CAAC;gBAC5DE,OAAOC,OAAO,GAAG;gBACjBrB,IAAIE,QAAQ,CAACiB,SAAS,GAAGC;YAC7B;QACJ;IACJ;AACJ"}