{"version":3,"sources":["../../src/features/serviceGroup.js"],"sourcesContent":["import { _, eachAsync_, batchAsync_ } from '@kitmi/utils';\nimport { InvalidConfiguration } from '@kitmi/types';\nimport Feature from '../Feature';\n\n/**\n * Enable a service group\n * @module Feature_ServiceGroup\n */\n\nmodule.exports = {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} services - Map of services from service registration to service instance options\n     * @returns {Promise.<*>}\n     *\n     * @example\n     *\n     * // serviceName: s3DigitalOcean.instance1\n     * serviceGroup: { 's3DigitalOcean': { 'instance1': {  } }   }\n     */\n    load_: async function (app, services) {\n        let features = [];\n        const instancesMap = {};\n\n        await eachAsync_(services, async (instances, serviceName) => {\n            let feature = await app._loadFeature_(serviceName);\n            if (!feature.groupable) {\n                throw new InvalidConfiguration(\n                    `Feature [${serviceName}] is not groupable.`,\n                    app,\n                    `serviceGroup.${serviceName}`\n                );\n            }\n\n            features.push([feature]);\n            instancesMap[serviceName] = instances;\n        });\n\n        features = app._sortFeatures(features);\n\n        await eachAsync_(features, async ([feature]) => {\n            const instances = instancesMap[feature.name];\n            await batchAsync_(instances, async (serviceOptions, instanceName) => {\n                const fullName = `${feature.name}.${instanceName}`;                \n                const { load_, ...others } = feature;\n                await load_(app, serviceOptions, fullName);\n                others.enabled = true;\n                app.features[fullName] = others;\n            });\n        });\n    },\n};\n"],"names":["module","exports","stage","Feature","SERVICE","load_","app","services","features","instancesMap","eachAsync_","instances","serviceName","feature","_loadFeature_","groupable","InvalidConfiguration","push","_sortFeatures","name","batchAsync_","serviceOptions","instanceName","fullName","others","enabled"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;uBAA2C;uBACN;gEACjB;;;;;;AAEpB;;;CAGC,GAEDA,OAAOC,OAAO,GAAG;IACb;;;KAGC,GACDC,OAAOC,gBAAO,CAACC,OAAO;IAEtB;;;;;;;;;;KAUC,GACDC,OAAO,eAAgBC,GAAG,EAAEC,QAAQ;QAChC,IAAIC,WAAW,EAAE;QACjB,MAAMC,eAAe,CAAC;QAEtB,MAAMC,IAAAA,iBAAU,EAACH,UAAU,OAAOI,WAAWC;YACzC,IAAIC,UAAU,MAAMP,IAAIQ,aAAa,CAACF;YACtC,IAAI,CAACC,QAAQE,SAAS,EAAE;gBACpB,MAAM,IAAIC,2BAAoB,CAC1B,CAAC,SAAS,EAAEJ,YAAY,mBAAmB,CAAC,EAC5CN,KACA,CAAC,aAAa,EAAEM,YAAY,CAAC;YAErC;YAEAJ,SAASS,IAAI,CAAC;gBAACJ;aAAQ;YACvBJ,YAAY,CAACG,YAAY,GAAGD;QAChC;QAEAH,WAAWF,IAAIY,aAAa,CAACV;QAE7B,MAAME,IAAAA,iBAAU,EAACF,UAAU,OAAO,CAACK,QAAQ;YACvC,MAAMF,YAAYF,YAAY,CAACI,QAAQM,IAAI,CAAC;YAC5C,MAAMC,IAAAA,kBAAW,EAACT,WAAW,OAAOU,gBAAgBC;gBAChD,MAAMC,WAAW,CAAC,EAAEV,QAAQM,IAAI,CAAC,CAAC,EAAEG,aAAa,CAAC;gBAClD,MAAM,EAAEjB,KAAK,EAAE,GAAGmB,QAAQ,GAAGX;gBAC7B,MAAMR,MAAMC,KAAKe,gBAAgBE;gBACjCC,OAAOC,OAAO,GAAG;gBACjBnB,IAAIE,QAAQ,CAACe,SAAS,GAAGC;YAC7B;QACJ;IACJ;AACJ"}