{"version":3,"sources":["../../src/features/configByGitUser.js"],"sourcesContent":["/**\n * Enable developer specific config identified by git user name.\n * @module Feature_ConfigByGitUser\n */\n\nimport path from 'node:path';\nimport { fs, run_ } from '@kitmi/sys';\nimport { JsonConfigProvider, YamlConfigProvider } from '@kitmi/config';\nimport Feature from '../Feature';\n\nexport default {\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    stage: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature\n     * @property {string} [options.fallbackName] - Fallback username for git user not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let devName;\n\n        try {\n            devName = (await run_('git config --global user.email')).trim();\n        } catch (e) {\n            app.log('warn', e.message || e);\n        }\n\n        if (!devName || devName === '') {\n            if (options.fallbackName) {\n                devName = options.fallbackName;\n            } else {\n                app.log('warn', 'Unable to read \"user.email\" of git config and no fallback option is configured.');\n                return;\n            }\n        }\n\n        devName = devName.substring(0, devName.indexOf('@'));\n\n        const devConfigFile = path.join(\n            app.configPath,\n            app.configName + '.' + devName + (app.options.configType === 'yaml' ? '.yaml' : '.json')\n        );\n        if (!fs.existsSync(devConfigFile)) {\n            app.log('warn', `Developer specific config file \"${devConfigFile}\" does not exist and will use defaults.`);\n            return;\n        }\n\n        app.configLoader.provider =\n            app.options.configType === 'yaml'\n                ? new YamlConfigProvider(devConfigFile)\n                : new JsonConfigProvider(devConfigFile);\n        return app.loadConfig_();\n    },\n};\n"],"names":["stage","Feature","CONF","load_","app","options","devName","run_","trim","e","log","message","fallbackName","substring","indexOf","devConfigFile","path","join","configPath","configName","configType","fs","existsSync","configLoader","provider","YamlConfigProvider","JsonConfigProvider","loadConfig_"],"mappings":"AAAA;;;CAGC;;;;+BAOD;;;eAAA;;;iEALiB;qBACQ;wBAC8B;gEACnC;;;;;;MAEpB,WAAe;IACX;;;KAGC,GACDA,OAAOC,gBAAO,CAACC,IAAI;IAEnB;;;;;;KAMC,GACDC,OAAO,OAAOC,KAAKC;QACf,IAAIC;QAEJ,IAAI;YACAA,UAAU,AAAC,CAAA,MAAMC,IAAAA,SAAI,EAAC,iCAAgC,EAAGC,IAAI;QACjE,EAAE,OAAOC,GAAG;YACRL,IAAIM,GAAG,CAAC,QAAQD,EAAEE,OAAO,IAAIF;QACjC;QAEA,IAAI,CAACH,WAAWA,YAAY,IAAI;YAC5B,IAAID,QAAQO,YAAY,EAAE;gBACtBN,UAAUD,QAAQO,YAAY;YAClC,OAAO;gBACHR,IAAIM,GAAG,CAAC,QAAQ;gBAChB;YACJ;QACJ;QAEAJ,UAAUA,QAAQO,SAAS,CAAC,GAAGP,QAAQQ,OAAO,CAAC;QAE/C,MAAMC,gBAAgBC,iBAAI,CAACC,IAAI,CAC3Bb,IAAIc,UAAU,EACdd,IAAIe,UAAU,GAAG,MAAMb,UAAWF,CAAAA,IAAIC,OAAO,CAACe,UAAU,KAAK,SAAS,UAAU,OAAM;QAE1F,IAAI,CAACC,OAAE,CAACC,UAAU,CAACP,gBAAgB;YAC/BX,IAAIM,GAAG,CAAC,QAAQ,CAAC,gCAAgC,EAAEK,cAAc,uCAAuC,CAAC;YACzG;QACJ;QAEAX,IAAImB,YAAY,CAACC,QAAQ,GACrBpB,IAAIC,OAAO,CAACe,UAAU,KAAK,SACrB,IAAIK,0BAAkB,CAACV,iBACvB,IAAIW,0BAAkB,CAACX;QACjC,OAAOX,IAAIuB,WAAW;IAC1B;AACJ"}