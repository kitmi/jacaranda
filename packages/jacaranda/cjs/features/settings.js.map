{"version":3,"sources":["../../src/features/settings.js"],"sourcesContent":["/**\n * Enable customized settings\n * @module Feature_Settings\n * @example\n * \"settings\": {\n *     \"key\": 1,\n *     \"env:development\": {\n *         \"key\": 2\n *     },\n *     \"stage:ppe\": {\n *         \"key\": 3\n *     }\n * }\n */\n\nimport { InvalidConfiguration } from '@kitmi/types';\nimport { _, isPlainObject } from '@kitmi/utils';\nimport Feature from '../Feature';\n\nconst KEY_ENV = 'env:';\nconst KEY_STAGE = 'stage:';\nconst Stage = process.env.STAGE_ENV;\n\nexport default {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} settings - Customized settings\n     * @returns {Promise.<*>}\n     */\n    load_: function (app, settings) {\n        let result = {};\n        let envSettings;\n        let stageSettings;\n\n        _.each(settings, (value, key) => {\n            if (key.startsWith(KEY_ENV)) {\n                let envKey = key.substring(KEY_ENV.length);\n                if (envKey === app.env) {\n                    envSettings = value;\n                    if (!isPlainObject(value)) {\n                        throw new InvalidConfiguration('Invalid env settings', app, `settings.${key}`);\n                    }\n                }\n            } else if (Stage && key.startsWith(KEY_STAGE)) {\n                let stageKey = key.substring(KEY_ENV.length);\n                if (stageKey === Stage) {\n                    stageSettings = value;\n                    if (!isPlainObject(value)) {\n                        throw new InvalidConfiguration('Invalid stage settings', app, `settings.${key}`);\n                    }\n                }\n            } else {\n                result[key] = value;\n            }\n        });\n\n        app.settings = Object.assign(result, envSettings, stageSettings);\n    },\n};\n"],"names":["KEY_ENV","KEY_STAGE","Stage","process","env","STAGE_ENV","stage","Feature","INIT","load_","app","settings","result","envSettings","stageSettings","_","each","value","key","startsWith","envKey","substring","length","isPlainObject","InvalidConfiguration","stageKey","Object","assign"],"mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;+BAUD;;;eAAA;;;uBARqC;uBACJ;gEACb;;;;;;AAEpB,MAAMA,UAAU;AAChB,MAAMC,YAAY;AAClB,MAAMC,QAAQC,QAAQC,GAAG,CAACC,SAAS;MAEnC,WAAe;IACX;;;KAGC,GACDC,OAAOC,gBAAO,CAACC,IAAI;IAEnB;;;;;KAKC,GACDC,OAAO,SAAUC,GAAG,EAAEC,QAAQ;QAC1B,IAAIC,SAAS,CAAC;QACd,IAAIC;QACJ,IAAIC;QAEJC,QAAC,CAACC,IAAI,CAACL,UAAU,CAACM,OAAOC;YACrB,IAAIA,IAAIC,UAAU,CAACnB,UAAU;gBACzB,IAAIoB,SAASF,IAAIG,SAAS,CAACrB,QAAQsB,MAAM;gBACzC,IAAIF,WAAWV,IAAIN,GAAG,EAAE;oBACpBS,cAAcI;oBACd,IAAI,CAACM,IAAAA,oBAAa,EAACN,QAAQ;wBACvB,MAAM,IAAIO,2BAAoB,CAAC,wBAAwBd,KAAK,CAAC,SAAS,EAAEQ,IAAI,CAAC;oBACjF;gBACJ;YACJ,OAAO,IAAIhB,SAASgB,IAAIC,UAAU,CAAClB,YAAY;gBAC3C,IAAIwB,WAAWP,IAAIG,SAAS,CAACrB,QAAQsB,MAAM;gBAC3C,IAAIG,aAAavB,OAAO;oBACpBY,gBAAgBG;oBAChB,IAAI,CAACM,IAAAA,oBAAa,EAACN,QAAQ;wBACvB,MAAM,IAAIO,2BAAoB,CAAC,0BAA0Bd,KAAK,CAAC,SAAS,EAAEQ,IAAI,CAAC;oBACnF;gBACJ;YACJ,OAAO;gBACHN,MAAM,CAACM,IAAI,GAAGD;YAClB;QACJ;QAEAP,IAAIC,QAAQ,GAAGe,OAAOC,MAAM,CAACf,QAAQC,aAAaC;IACtD;AACJ"}