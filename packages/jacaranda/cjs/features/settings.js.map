{"version":3,"sources":["../../src/features/settings.js"],"sourcesContent":["/**\n * Enable customized settings\n * @module Feature_Settings\n * @example\n * \"settings\": {\n *     \"key\": 1,\n *     \"env:development\": {\n *         \"key\": 2\n *     },\n *     \"stage:ppe\": {\n *         \"key\": 3\n *     }\n * }\n */\n\nimport { InvalidConfiguration } from '@kitmi/types';\nimport { _, isPlainObject } from '@kitmi/utils';\nimport Feature from '../Feature';\nimport runtime, { K_ENV } from '../runtime';\nimport { getNodeEnv } from '../ServiceContainer';;\n\nconst KEY_ENV = 'env:';\nconst KEY_STAGE = 'stage:';\n\nexport default {\n    /**\n     * This feature is loaded at init stage\n     * @member {string}\n     */\n    stage: Feature.INIT,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} settings - Customized settings\n     * @returns {Promise.<*>}\n     */\n    load_: function (app, settings) {\n        const Stage = runtime.get(K_ENV)?.STAGE;\n\n        let result = {};\n        let envSettings;\n        let stageSettings;\n\n        _.each(settings, (value, key) => {\n            if (key.startsWith(KEY_ENV)) {\n                let envKey = key.substring(KEY_ENV.length);\n                if (envKey === getNodeEnv()) {\n                    envSettings = value;\n                    if (!isPlainObject(value)) {\n                        throw new InvalidConfiguration('Invalid env settings', app, `settings.${key}`);\n                    }\n                }\n            } else if (Stage && key.startsWith(KEY_STAGE)) {\n                let stageKey = key.substring(KEY_ENV.length);\n                if (stageKey === Stage) {\n                    stageSettings = value;\n                    if (!isPlainObject(value)) {\n                        throw new InvalidConfiguration('Invalid stage settings', app, `settings.${key}`);\n                    }\n                }\n            } else {\n                result[key] = value;\n            }\n        });\n\n        app.settings = Object.assign(result, envSettings, stageSettings);\n    },\n};\n"],"names":["KEY_ENV","KEY_STAGE","stage","Feature","INIT","load_","app","settings","Stage","runtime","get","K_ENV","STAGE","result","envSettings","stageSettings","_","each","value","key","startsWith","envKey","substring","length","getNodeEnv","isPlainObject","InvalidConfiguration","stageKey","Object","assign"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA;;;;;;;;;;;;;CAaC;;;;+BAWD;;;eAAA;;;uBATqC;uBACJ;gEACb;iEACW;kCACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3B,MAAMA,UAAU;AAChB,MAAMC,YAAY;MAElB,WAAe;IACX;;;KAGC,GACDC,OAAOC,gBAAO,CAACC,IAAI;IAEnB;;;;;KAKC,GACDC,OAAO,SAAUC,GAAG,EAAEC,QAAQ;QAC1B,MAAMC,QAAQC,gBAAO,CAACC,GAAG,CAACC,cAAK,GAAGC;QAElC,IAAIC,SAAS,CAAC;QACd,IAAIC;QACJ,IAAIC;QAEJC,QAAC,CAACC,IAAI,CAACV,UAAU,CAACW,OAAOC;YACrB,IAAIA,IAAIC,UAAU,CAACpB,UAAU;gBACzB,IAAIqB,SAASF,IAAIG,SAAS,CAACtB,QAAQuB,MAAM;gBACzC,IAAIF,WAAWG,IAAAA,4BAAU,KAAI;oBACzBV,cAAcI;oBACd,IAAI,CAACO,IAAAA,oBAAa,EAACP,QAAQ;wBACvB,MAAM,IAAIQ,2BAAoB,CAAC,wBAAwBpB,KAAK,CAAC,SAAS,EAAEa,IAAI,CAAC;oBACjF;gBACJ;YACJ,OAAO,IAAIX,SAASW,IAAIC,UAAU,CAACnB,YAAY;gBAC3C,IAAI0B,WAAWR,IAAIG,SAAS,CAACtB,QAAQuB,MAAM;gBAC3C,IAAII,aAAanB,OAAO;oBACpBO,gBAAgBG;oBAChB,IAAI,CAACO,IAAAA,oBAAa,EAACP,QAAQ;wBACvB,MAAM,IAAIQ,2BAAoB,CAAC,0BAA0BpB,KAAK,CAAC,SAAS,EAAEa,IAAI,CAAC;oBACnF;gBACJ;YACJ,OAAO;gBACHN,MAAM,CAACM,IAAI,GAAGD;YAClB;QACJ;QAEAZ,IAAIC,QAAQ,GAAGqB,OAAOC,MAAM,CAAChB,QAAQC,aAAaC;IACtD;AACJ"}