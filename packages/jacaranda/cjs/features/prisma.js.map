{"version":3,"sources":["../../src/features/prisma.js"],"sourcesContent":["import path from 'node:path';\nimport { _, esmCheck, pascalCase, camelCase, unexistDelegate } from '@kitmi/utils';\nimport { InvalidArgument, ApplicationError } from '@kitmi/types';\nimport Feature from '../Feature';\n\nconst prismsHelper = {\n    $pushQuery: (where, query) => {\n        let { AND, ..._where } = where;\n\n        _.each(query, (value, key) => {\n            const existing = _where[key];\n            if (typeof existing !== 'undefined') {\n                if (!AND) {\n                    AND = [];\n                } else {\n                    AND = [...AND];\n                }\n\n                delete _where[key];\n                AND.push({ [key]: existing });\n                AND.push({\n                    [key]: value,\n                });\n            } else {\n                _where[key] = value;\n            }\n        });\n\n        if (AND) {\n            _where.AND = AND;\n        }\n\n        return _where;\n    },\n    $pushOrQuery: (where, query) => {\n        if (!where.OR) {\n            where = {\n                OR: [where],\n            };\n        } else {\n            where = {\n                OR: [...where.OR],\n            };\n        }\n\n        where.OR.push(query);\n        return where;\n    },\n};\n\nconst symCache = Symbol('cache');\n\nexport class DefaultModel {\n    constructor(prisma, app, pascalModelName) {\n        this.db = prisma;\n        this.model = prisma[camelCase(pascalModelName)];\n        this.app = app;\n    }\n}\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    packages: ['@prisma/client'],\n\n    load_: async function (app, options, name) {\n        const { modelPath, ttlCacheService, ...prismaOptions } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    modelPath: { type: 'string', default: 'models' },\n                    ttlCacheService: { type: 'string', optional: true },\n                    datasources: { type: 'object', optional: true },\n                    log: {\n                        type: 'array',\n                        element: { type: 'text' },\n                        optional: true,\n                    },\n                },\n            },\n            name\n        );\n\n        const { PrismaClient } = await app.tryRequire_('@prisma/client');\n\n        const _modelPath = path.join(app.sourcePath, modelPath);\n        const modelCache = new Map();\n\n        const prisma = new PrismaClient(prismaOptions);\n\n        await prisma.$connect();\n\n        app.on('stopping', async () => {\n            await prisma.$disconnect();\n        });\n\n        Object.assign(prisma, prismsHelper);\n\n        const modelDelegate = (target, prop) => {\n            return target.model[prop];\n        };\n\n        prisma.$model = (name) => {\n            const _name = name.toLowerCase();\n            let modelObject = modelCache.get(_name);\n            if (!modelObject) {\n                const pascalName = pascalCase(name);\n\n                let Model;\n\n                try {\n                    Model = esmCheck(require(path.join(_modelPath, pascalName)));\n                } catch (err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        Model = DefaultModel;\n                    } else {\n                        throw err;\n                    }\n                }\n                const modelInstance = new Model(prisma, app, pascalName);\n\n                modelInstance.retryCreate_ = async (createOptions, onDuplicate, maxRetry) => {\n                    maxRetry || (maxRetry = 99);\n                    let retry = 0;\n                    let error;\n\n                    while (retry++ < maxRetry) {\n                        try {\n                            return await modelInstance.model.create(createOptions);\n                        } catch (err) {\n                            //P2002: Unique constraint failed\n                            if (err.code !== 'P2002') {\n                                throw err;\n                            }\n\n                            createOptions = await onDuplicate(createOptions);\n                            error = err;\n                        }\n                    }\n\n                    throw error;\n                };\n\n                if (ttlCacheService) {\n                    modelInstance.ttlCacheUnique_ = async (key, findUnique, ttl) => {\n                        const cache = app.getService(ttlCacheService);\n                        const cacheKey = `prisma:${name}:${key}`;\n                        return await cache.get_(cacheKey, () => modelInstance.model.findUnique(findUnique), ttl);\n                    };\n\n                    modelInstance.ttlCacheMany_ = async (key, findMany, ttl) => {\n                        const cache = app.getService(ttlCacheService);\n                        const cacheKey = `prisma:${name}:${key}`;\n                        return await cache.get_(cacheKey, () => modelInstance.model.findMany(findMany), ttl);\n                    };\n                }\n\n                modelObject = unexistDelegate(modelInstance, modelDelegate, true);\n                modelCache.set(_name, modelObject);\n            }\n            return modelObject;\n        };\n\n        prisma.$setupCache = (modelBox, entries) => {\n            if (!modelBox.model) {\n                throw new ApplicationError(\n                    'prisma.$setupCache should be called in the constructor and after model is assigned.'\n                );\n            }\n\n            modelBox[symCache] = new Map();\n\n            modelBox.cache_ = async (key) => {\n                let cache = modelBox[symCache].get(key);\n                if (cache) {\n                    return cache;\n                }\n\n                const meta = entries[key];\n                if (!meta) {\n                    throw new InvalidArgument(`No cache setup for key: ${key}`);\n                }\n\n                const { where = {}, type = 'list', mapByKey, ...others } = meta;\n\n                let data = await modelBox.model.findMany({\n                    where,\n                    ...others,\n                });\n\n                if (type === 'map') {\n                    if (!mapByKey) {\n                        throw new InvalidArgument(`No \"mapByKey\" set for map type cache: ${key}`);\n                    }\n\n                    data = data.reduce((result, item) => {\n                        result[item[mapByKey]] = item;\n                        return result;\n                    }, {});\n                } // else type === 'list'\n\n                modelBox[symCache].set(key, data);\n                return data;\n            };\n\n            modelBox.resetCache = (key) => {\n                modelBox[symCache].delete(key);\n            };\n        };\n\n        app.registerService(name, prisma);\n    },\n};\n"],"names":["DefaultModel","prismsHelper","$pushQuery","where","query","AND","_where","_","each","value","key","existing","push","$pushOrQuery","OR","symCache","Symbol","constructor","prisma","app","pascalModelName","db","model","camelCase","stage","Feature","SERVICE","groupable","packages","load_","options","name","modelPath","ttlCacheService","prismaOptions","featureConfig","schema","type","default","optional","datasources","log","element","PrismaClient","tryRequire_","_modelPath","path","join","sourcePath","modelCache","Map","$connect","on","$disconnect","Object","assign","modelDelegate","target","prop","$model","_name","toLowerCase","modelObject","get","pascalName","pascalCase","Model","esmCheck","require","err","code","modelInstance","retryCreate_","createOptions","onDuplicate","maxRetry","retry","error","create","ttlCacheUnique_","findUnique","ttl","cache","getService","cacheKey","get_","ttlCacheMany_","findMany","unexistDelegate","set","$setupCache","modelBox","entries","ApplicationError","cache_","meta","InvalidArgument","mapByKey","others","data","reduce","result","item","resetCache","delete","registerService"],"mappings":"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"}