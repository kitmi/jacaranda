{"version":3,"sources":["../../src/features/webSocketClient.js"],"sourcesContent":["import Feature from '../Feature';\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    packages: ['ws'],\n\n    load_: async function (app, options, name) {\n        const {\n            endpoint,\n            autoReconnect,\n            reconnectInterval = 5000,\n            wsOptions,\n        } = app.featureConfig(\n            options,\n            {\n                schema: {\n                    endpoint: { type: 'text' },\n                    autoReconnect: { type: 'boolean', default: true },\n                    reconnectInterval: { type: 'integer', default: 5000 },\n                    wsOptions: { type: 'object', optional: true },\n                },\n            },\n            name\n        );\n\n        const WebSocket = app.tryRequire('ws');\n\n        let ws;\n        let wsConnected = false;\n        let shouldReconnect = autoReconnect;\n        const queue = [];\n\n        const wsClient = {\n            get isConnected() {\n                return wsConnected;\n            },\n\n            onMessage: null,\n            onReconnect: null,\n            onClose: null,\n            onError: null,\n\n            async connect_(reconnect = false) {\n                if (wsConnected) {\n                    return wsClient;\n                }\n\n                return new Promise((resolve, reject) => {\n                    ws = new WebSocket(endpoint, wsOptions);\n\n                    ws.on('open', () => {\n                        wsConnected = true;\n\n                        queue.forEach(({ data, resolve, reject }) => {\n                            ws.send(data, (error) => {\n                                if (error) {\n                                    reject(error);\n                                } else {\n                                    resolve();\n                                }\n                            });\n                        });\n\n                        queue.length = 0;\n\n                        app.log('info', `Successfully connected to web socket \"${endpoint}\".`);\n\n                        resolve(wsClient);\n\n                        if (reconnect) {\n                            wsClient.onReconnect?.();\n                        }\n                    });\n\n                    ws.on('message', (data) => {\n                        wsClient.onMessage?.(data);\n                    });\n\n                    ws.on('close', (code, reason) => {\n                        wsConnected = false;\n\n                        app.log('info', `Disconnected from web socket \"${endpoint}\".`);\n\n                        wsClient.onClose?.(code, reason);\n                        ws = null;\n\n                        if (shouldReconnect) {\n                            setTimeout(\n                                () => wsClient.connect_(true).catch(app.logError),\n                                reconnectInterval\n                            );\n                        }\n                    });\n\n                    ws.on('error', (error) => {\n                        if (!wsConnected) {\n                            reject(error);\n                        } else {\n                            app.logError(error);\n                        }\n                    });\n\n                    ws.on('unexpected-response', () => {\n                        app.log('warn', `Unexpected response from web socket \"${endpoint}\".`);\n                    });\n                });\n            },\n\n            async send_(data) {\n                return new Promise((resolve, reject) => {\n                    if (!wsConnected) {\n                        queue.push({ data, resolve, reject });\n                    } else {\n                        ws.send(data, (error) => {\n                            if (error) {\n                                reject(error);\n                            } else {\n                                resolve();\n                            }\n                        });\n                    }\n                });\n            },\n\n            close() {\n                shouldReconnect = false;\n                ws?.close();\n                ws = null;\n\n                queue.forEach((item) => {\n                    item.reject(new Error('WebSocket closed.'));\n                });\n                queue.length = 0;\n            },\n        };\n\n        app.once('ready', () => {\n            wsClient.connect_().catch(app.logError);\n        });\n\n        app.once('stopping', () => {\n            wsClient.close();\n        });\n\n        app.registerService(name, wsClient);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","packages","load_","app","options","name","endpoint","autoReconnect","reconnectInterval","wsOptions","featureConfig","schema","type","default","optional","WebSocket","tryRequire","ws","wsConnected","shouldReconnect","queue","wsClient","isConnected","onMessage","onReconnect","onClose","onError","connect_","reconnect","Promise","resolve","reject","on","forEach","data","send","error","length","log","code","reason","setTimeout","catch","logError","send_","push","close","item","Error","once","registerService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}