{"version":3,"sources":["../../src/features/configByHostname.js"],"sourcesContent":["/**\n * Enable server specific config identified by host name.\n * @module Feature_ConfigByHostname\n */\n\nimport path from 'node:path';\nimport { fs, run_ } from '@kitmi/sys';\nimport { JsonConfigProvider, YamlConfigProvider } from '@kitmi/config';\nimport Feature from '../Feature';\n\nexport default {\n    /**\n     * This feature is loaded at configuration stage\n     * @member {string}\n     */\n    stage: Feature.CONF,\n\n    /**\n     * Load the feature\n     * @param {App} app - The cli app module object\n     * @param {object} options - Options for the feature\n     * @property {string} [options.fallbackName] - Fallback name if hostname not available\n     * @returns {Promise.<*>}\n     */\n    load_: async (app, options) => {\n        let hostName;\n\n        try {\n            hostName = (await run_('hostname')).trim();\n        } catch (e) {\n            app.log('warn', e.message || e);\n        }\n\n        if (!hostName) {\n            throw new Error('Unable to read \"hostname\" from environment.');\n        }\n\n        let hostSpecConfigFile = path.join(\n            app.configPath,\n            app.configName + '.' + hostName + (app.options.configType === 'yaml' ? '.yaml' : '.json')\n        );\n        if (!fs.existsSync(hostSpecConfigFile)) {\n            if (options.fallbackName) {\n                hostName = options.fallbackName;\n                let hostSpecConfigFileFb = path.join(\n                    app.configPath,\n                    app.configName + '.' + hostName + (app.options.configType === 'yaml' ? '.yaml' : '.json')\n                );\n\n                if (!fs.existsSync(hostSpecConfigFileFb)) {\n                    throw new Error(\n                        `The specific config file for host [${hostName}] not found and the fallback config [${hostSpecConfigFileFb}] not found either.`\n                    );\n                }\n\n                hostSpecConfigFile = hostSpecConfigFileFb;\n            } else {\n                app.log(\n                    'warn',\n                    `The specific config file for host [${hostName}] not found and no fallback setting. Use defaults.`\n                );\n                return;\n            }\n        }\n\n        app.configLoader.provider =\n            app.options.configType === 'yaml'\n                ? new YamlConfigProvider(hostSpecConfigFile)\n                : new JsonConfigProvider(hostSpecConfigFile);\n        return app.loadConfig_();\n    },\n};\n"],"names":["stage","Feature","CONF","load_","app","options","hostName","run_","trim","e","log","message","Error","hostSpecConfigFile","path","join","configPath","configName","configType","fs","existsSync","fallbackName","hostSpecConfigFileFb","configLoader","provider","YamlConfigProvider","JsonConfigProvider","loadConfig_"],"mappings":"AAAA;;;CAGC;;;;+BAOD;;;eAAA;;;iEALiB;qBACQ;wBAC8B;gEACnC;;;;;;MAEpB,WAAe;IACX;;;KAGC,GACDA,OAAOC,gBAAO,CAACC,IAAI;IAEnB;;;;;;KAMC,GACDC,OAAO,OAAOC,KAAKC;QACf,IAAIC;QAEJ,IAAI;YACAA,WAAW,AAAC,CAAA,MAAMC,IAAAA,SAAI,EAAC,WAAU,EAAGC,IAAI;QAC5C,EAAE,OAAOC,GAAG;YACRL,IAAIM,GAAG,CAAC,QAAQD,EAAEE,OAAO,IAAIF;QACjC;QAEA,IAAI,CAACH,UAAU;YACX,MAAM,IAAIM,MAAM;QACpB;QAEA,IAAIC,qBAAqBC,iBAAI,CAACC,IAAI,CAC9BX,IAAIY,UAAU,EACdZ,IAAIa,UAAU,GAAG,MAAMX,WAAYF,CAAAA,IAAIC,OAAO,CAACa,UAAU,KAAK,SAAS,UAAU,OAAM;QAE3F,IAAI,CAACC,OAAE,CAACC,UAAU,CAACP,qBAAqB;YACpC,IAAIR,QAAQgB,YAAY,EAAE;gBACtBf,WAAWD,QAAQgB,YAAY;gBAC/B,IAAIC,uBAAuBR,iBAAI,CAACC,IAAI,CAChCX,IAAIY,UAAU,EACdZ,IAAIa,UAAU,GAAG,MAAMX,WAAYF,CAAAA,IAAIC,OAAO,CAACa,UAAU,KAAK,SAAS,UAAU,OAAM;gBAG3F,IAAI,CAACC,OAAE,CAACC,UAAU,CAACE,uBAAuB;oBACtC,MAAM,IAAIV,MACN,CAAC,mCAAmC,EAAEN,SAAS,qCAAqC,EAAEgB,qBAAqB,mBAAmB,CAAC;gBAEvI;gBAEAT,qBAAqBS;YACzB,OAAO;gBACHlB,IAAIM,GAAG,CACH,QACA,CAAC,mCAAmC,EAAEJ,SAAS,kDAAkD,CAAC;gBAEtG;YACJ;QACJ;QAEAF,IAAImB,YAAY,CAACC,QAAQ,GACrBpB,IAAIC,OAAO,CAACa,UAAU,KAAK,SACrB,IAAIO,0BAAkB,CAACZ,sBACvB,IAAIa,0BAAkB,CAACb;QACjC,OAAOT,IAAIuB,WAAW;IAC1B;AACJ"}