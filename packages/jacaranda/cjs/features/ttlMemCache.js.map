{"version":3,"sources":["../../src/features/ttlMemCache.js"],"sourcesContent":["import Feature from '../Feature';\n\n/**\n * Time-to-live (TTL) Memory Cache\n * @module Feature_TtlMemCache\n */\n\nexport default {\n    /**\n     * This feature is loaded at service stage\n     * @member {string}\n     */\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    packages: ['node-cache'],\n\n    /**\n     * Load the feature\n     * @param {App} app - The app module object\n     * @param {object} options - Options for the feature\n     * @property {number} [options.stdTTL=0] - The standard ttl as number in seconds for every generated cache element. 0 = unlimited\n     * @property {number} [options.checkperiod=600] - The period in seconds, as a number, used for the automatic delete check interval. 0 = no periodic check.\n     * @property {boolean} [options.useClones=false] - En/disable cloning of variables. If true you'll get a copy of the cached variable. If false you'll save and get just the reference.\n     * @returns {Promise.<*>}\n     *\n     * @see[methods]{@link https://github.com/node-cache/node-cache}\n     *\n     */\n    load_: async function (app, options, name) {\n        const NodeCache = app.tryRequire('node-cache');\n        const nodeCache = new NodeCache({\n            useClones: false,\n            ...options,\n        });\n\n        nodeCache.get_ = async (key, getter, ttl) => {\n            const value = nodeCache.get(key);\n\n            if (value !== undefined) {\n                return value;\n            }\n\n            const newValue = await getter();\n\n            nodeCache.set(key, newValue, ttl);\n\n            return newValue;\n        };\n\n        app.registerService(name, nodeCache);\n    },\n};\n"],"names":["stage","Feature","SERVICE","groupable","packages","load_","app","options","name","NodeCache","tryRequire","nodeCache","useClones","get_","key","getter","ttl","value","get","undefined","newValue","set","registerService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAEA;;;CAGC,GAED;;;eAAA;;;gEAPoB;;;;;;MAOpB,WAAe;IACX;;;KAGC,GACDA,OAAOC,gBAAO,CAACC,OAAO;IAEtBC,WAAW;IAEXC,UAAU;QAAC;KAAa;IAExB;;;;;;;;;;;KAWC,GACDC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI;QACrC,MAAMC,YAAYH,IAAII,UAAU,CAAC;QACjC,MAAMC,YAAY,IAAIF,UAAU;YAC5BG,WAAW;YACX,GAAGL,OAAO;QACd;QAEAI,UAAUE,IAAI,GAAG,OAAOC,KAAKC,QAAQC;YACjC,MAAMC,QAAQN,UAAUO,GAAG,CAACJ;YAE5B,IAAIG,UAAUE,WAAW;gBACrB,OAAOF;YACX;YAEA,MAAMG,WAAW,MAAML;YAEvBJ,UAAUU,GAAG,CAACP,KAAKM,UAAUJ;YAE7B,OAAOI;QACX;QAEAd,IAAIgB,eAAe,CAACd,MAAMG;IAC9B;AACJ"}