{"version":3,"sources":["../../src/middlewares/action.js"],"sourcesContent":["/**\n * Response action as middleware\n * @module Middleware_Action\n */\n\nimport path from 'node:path';\nimport { InvalidConfiguration } from '@kitmi/types';\nimport { esmCheck } from '@kitmi/utils';\n\n/**\n * Action middleware creator\n * @param {string} controllerAction\n * @param {Routable} app\n */\nconst action = (controllerAction, app) => {\n    if (typeof controllerAction !== 'string') {\n        throw new InvalidConfiguration('Invalid action syntax.', app);\n    }\n\n    let pos = controllerAction.lastIndexOf('.');\n    if (pos < 0) {\n        throw new InvalidConfiguration(`Unrecognized controller & action syntax: ${controllerAction}.`, app);\n    }\n\n    let controller = controllerAction.substring(0, pos);\n    let action = controllerAction.substring(pos + 1);\n\n    let controllerPath = path.resolve(app.controllersPath, controller);\n    let ctrl;\n\n    try {\n        ctrl = esmCheck(require(controllerPath));\n    } catch (err) {\n        if (err.code === 'MODULE_NOT_FOUND') {\n            throw new InvalidConfiguration(`Failed to load [${controller}] at ${controllerPath}. ${err.message}`, app, {\n                app: app.name,\n                controller,\n            });\n        }\n    }\n\n    let actioner = ctrl[action];\n\n    if (Array.isArray(actioner)) {\n        let actionFunction = actioner.concat().pop();\n        if (typeof actionFunction !== 'function') {\n            throw new InvalidConfiguration(\n                `${controllerAction} does not contain a valid action in returned middleware chain.`,\n                app\n            );\n        }\n\n        return actioner.concat(actionFunction);\n    }\n\n    if (typeof actioner !== 'function') {\n        throw new InvalidConfiguration(`${controllerAction} is not a valid action.`, app);\n    }\n\n    return actioner;\n};\n\nexport default action;\n"],"names":["action","controllerAction","app","InvalidConfiguration","pos","lastIndexOf","controller","substring","controllerPath","path","resolve","controllersPath","ctrl","esmCheck","require","err","code","message","name","actioner","Array","isArray","actionFunction","concat","pop"],"mappings":"AAAA;;;CAGC;;;;+BA2DD;;;eAAA;;;iEAzDiB;uBACoB;uBACZ;;;;;;AAEzB;;;;CAIC,GACD,MAAMA,SAAS,CAACC,kBAAkBC;IAC9B,IAAI,OAAOD,qBAAqB,UAAU;QACtC,MAAM,IAAIE,2BAAoB,CAAC,0BAA0BD;IAC7D;IAEA,IAAIE,MAAMH,iBAAiBI,WAAW,CAAC;IACvC,IAAID,MAAM,GAAG;QACT,MAAM,IAAID,2BAAoB,CAAC,CAAC,yCAAyC,EAAEF,iBAAiB,CAAC,CAAC,EAAEC;IACpG;IAEA,IAAII,aAAaL,iBAAiBM,SAAS,CAAC,GAAGH;IAC/C,IAAIJ,SAASC,iBAAiBM,SAAS,CAACH,MAAM;IAE9C,IAAII,iBAAiBC,iBAAI,CAACC,OAAO,CAACR,IAAIS,eAAe,EAAEL;IACvD,IAAIM;IAEJ,IAAI;QACAA,OAAOC,IAAAA,eAAQ,EAACC,QAAQN;IAC5B,EAAE,OAAOO,KAAK;QACV,IAAIA,IAAIC,IAAI,KAAK,oBAAoB;YACjC,MAAM,IAAIb,2BAAoB,CAAC,CAAC,gBAAgB,EAAEG,WAAW,KAAK,EAAEE,eAAe,EAAE,EAAEO,IAAIE,OAAO,CAAC,CAAC,EAAEf,KAAK;gBACvGA,KAAKA,IAAIgB,IAAI;gBACbZ;YACJ;QACJ;IACJ;IAEA,IAAIa,WAAWP,IAAI,CAACZ,OAAO;IAE3B,IAAIoB,MAAMC,OAAO,CAACF,WAAW;QACzB,IAAIG,iBAAiBH,SAASI,MAAM,GAAGC,GAAG;QAC1C,IAAI,OAAOF,mBAAmB,YAAY;YACtC,MAAM,IAAInB,2BAAoB,CAC1B,CAAC,EAAEF,iBAAiB,8DAA8D,CAAC,EACnFC;QAER;QAEA,OAAOiB,SAASI,MAAM,CAACD;IAC3B;IAEA,IAAI,OAAOH,aAAa,YAAY;QAChC,MAAM,IAAIhB,2BAAoB,CAAC,CAAC,EAAEF,iBAAiB,uBAAuB,CAAC,EAAEC;IACjF;IAEA,OAAOiB;AACX;MAEA,WAAenB"}