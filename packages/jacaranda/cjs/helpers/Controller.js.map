{"version":3,"sources":["../../src/helpers/Controller.js"],"sourcesContent":["import { ApplicationError } from '@kitmi/types';\n\nclass BasicController {\n    constructor(app) {\n        this.app = app;\n        this.apiWrapper = this.app.getService(this.app.settings?.apiWrapperService || 'apiWrapper');\n\n        if (!this.apiWrapper) {\n            throw new ApplicationError('\"apiWrapper\" service is required when using the built-in Controller.');\n        }\n    }\n\n    $(serviceName) {\n        const service = this.app.getService(serviceName);\n        if (!service) {\n            throw new ApplicationError(`Service \"${serviceName}\" is enabled.`);\n        }\n\n        return service;\n    }\n\n    /**\n     * Try to send back data from time-to-live cache\n     * @param {*} ctx\n     * @param {*} key\n     * @returns {boolean}\n     */\n    trySendCache(ctx, key) {\n        if (ctx.query['no-cache']) {\n            return false;\n        }\n\n        const ttlCache = this.app.getService('ttlMemCache');\n        if (!ttlCache) {\n            throw new ApplicationError(\n                '\"ttlMemCache\" service is required. Please check npm module \"@kitmi/feat-utils/ttlMemCache\".'\n            );\n        }\n\n        const _cache = ttlCache.get(key);\n        if (_cache) {\n            this.send(ctx, ..._cache);\n            return true;\n        }\n        return false;\n    }\n\n    deleteCache(key) {\n        const ttlCache = this.app.getService('ttlMemCache');\n        ttlCache.del(key);\n    }\n\n    send(ctx, result, payload, ttlCacheInfo) {\n        ctx.body = this.apiWrapper.wrapResult(ctx, result, payload);\n        if (ttlCacheInfo) {\n            const ttlCache = this.app.getService('ttlMemCache');\n            const value = [result];\n            if (payload) {\n                value.push(payload);\n            }\n\n            if (!ttlCacheInfo.key)  {\n                throw new ApplicationError('\"key\" of TTL cache is required.');\n            }\n\n            ttlCache.set(ttlCacheInfo.key, value, ttlCacheInfo.ttl);\n        }\n    }\n}\n\nexport default BasicController;\n"],"names":["BasicController","$","serviceName","service","app","getService","ApplicationError","trySendCache","ctx","key","query","ttlCache","_cache","get","send","deleteCache","del","result","payload","ttlCacheInfo","body","apiWrapper","wrapResult","value","push","set","ttl","constructor","settings","apiWrapperService"],"mappings":";;;;+BAsEA;;;eAAA;;;uBAtEiC;AAEjC,MAAMA;IAUFC,EAAEC,WAAW,EAAE;QACX,MAAMC,UAAU,IAAI,CAACC,GAAG,CAACC,UAAU,CAACH;QACpC,IAAI,CAACC,SAAS;YACV,MAAM,IAAIG,uBAAgB,CAAC,CAAC,SAAS,EAAEJ,YAAY,aAAa,CAAC;QACrE;QAEA,OAAOC;IACX;IAEA;;;;;KAKC,GACDI,aAAaC,GAAG,EAAEC,GAAG,EAAE;QACnB,IAAID,IAAIE,KAAK,CAAC,WAAW,EAAE;YACvB,OAAO;QACX;QAEA,MAAMC,WAAW,IAAI,CAACP,GAAG,CAACC,UAAU,CAAC;QACrC,IAAI,CAACM,UAAU;YACX,MAAM,IAAIL,uBAAgB,CACtB;QAER;QAEA,MAAMM,SAASD,SAASE,GAAG,CAACJ;QAC5B,IAAIG,QAAQ;YACR,IAAI,CAACE,IAAI,CAACN,QAAQI;YAClB,OAAO;QACX;QACA,OAAO;IACX;IAEAG,YAAYN,GAAG,EAAE;QACb,MAAME,WAAW,IAAI,CAACP,GAAG,CAACC,UAAU,CAAC;QACrCM,SAASK,GAAG,CAACP;IACjB;IAEAK,KAAKN,GAAG,EAAES,MAAM,EAAEC,OAAO,EAAEC,YAAY,EAAE;QACrCX,IAAIY,IAAI,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAACd,KAAKS,QAAQC;QACnD,IAAIC,cAAc;YACd,MAAMR,WAAW,IAAI,CAACP,GAAG,CAACC,UAAU,CAAC;YACrC,MAAMkB,QAAQ;gBAACN;aAAO;YACtB,IAAIC,SAAS;gBACTK,MAAMC,IAAI,CAACN;YACf;YAEA,IAAI,CAACC,aAAaV,GAAG,EAAG;gBACpB,MAAM,IAAIH,uBAAgB,CAAC;YAC/B;YAEAK,SAASc,GAAG,CAACN,aAAaV,GAAG,EAAEc,OAAOJ,aAAaO,GAAG;QAC1D;IACJ;IAhEAC,YAAYvB,GAAG,CAAE;QACb,IAAI,CAACA,GAAG,GAAGA;QACX,IAAI,CAACiB,UAAU,GAAG,IAAI,CAACjB,GAAG,CAACC,UAAU,CAAC,IAAI,CAACD,GAAG,CAACwB,QAAQ,EAAEC,qBAAqB;QAE9E,IAAI,CAAC,IAAI,CAACR,UAAU,EAAE;YAClB,MAAM,IAAIf,uBAAgB,CAAC;QAC/B;IACJ;AA0DJ;MAEA,WAAeN"}