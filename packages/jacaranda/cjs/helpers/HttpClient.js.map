{"version":3,"sources":["../../src/helpers/HttpClient.js"],"sourcesContent":["import { _, url as urlUtil } from '@kitmi/utils';\n\n/**\n * Enable a http client as service\n * @module Feature_HttpClient\n */\n\nconst DefaultMethods = {\n    get: 'get',\n    post: 'post',\n    put: 'put',\n    del: 'del',\n    delete: 'del',\n    upload: 'post',\n    download: 'get',\n};\n\nfunction resToPath(parts) {\n    return parts ? (Array.isArray(parts) ? parts.map((res) => encodeURIComponent(res)).join('/') : parts) : '';\n}\n\n/**\n * HTTP client.\n * @class\n */\nclass HttpClient {\n    /**\n     *\n     * @param {*} endpoint\n     */\n    constructor(adapter, endpointOrOptions) {\n        this.adapter = adapter;\n        this.options = typeof endpointOrOptions === 'string' ? { endpoint: endpointOrOptions } : endpointOrOptions;\n    }\n\n    /**\n     *\n     * @param {string} method\n     * @param {string} path\n     * @param {object} query\n     * @param {object} body\n     * @param {object} options - Request options\n     * @property {string} [options.httpMethod] - Specified the http method to override the method argument\n     * @property {string} [options.endpoint] - Specified the base endpoint for this request only\n     * @property {function} [options.onSend] - Specified the onSend hook for this request only\n     * @property {integer} [options.timeout] - Specified the timeout setting for this request only\n     * @property {object} [options.headers] - Specified the headers for this request only\n     * @property {boolean} [options.withCredentials] - Specified the withCredentials header for CORS\n     * @property {object} [options.formData] - Specified the form fields\n     * @property {object} [options.fileField='file'] - Specified the file field name\n     * @property {object} [options.fileName] - Specified the file name to override the file to upload\n     * @property {function} [options.onProgress] - Specified the on progress callback\n     * @returns {*}\n     */\n    async do(method, path, query, body, options) {\n        method = method.toLowerCase();\n        const _options = { ...this.options, ...options, _method: method };\n\n        let httpMethod = _options.httpMethod ?? DefaultMethods[method];\n        if (!httpMethod) {\n            throw new Error('Invalid method: ' + method);\n        }\n\n        let url = path.startsWith('http:') || path.startsWith('https:') ? path : urlUtil.join(_options.endpoint, path);\n\n        let req = this.adapter.createRequest(httpMethod, url, _options);\n\n        if (this.onSending) {\n            this.onSending(req);\n        }\n\n        if (_options.onSending) {\n            _options.onSending(req);\n        }\n\n        if (_options.timeout) {\n            req.timeout(_options.timeout);\n        }\n\n        if (_options.headers) {\n            _.each(_options.headers, (v, k) => {\n                req.set(k, v);\n            });\n        }\n\n        if (_options.withCredentials) {\n            req.withCredentials();\n        }\n\n        if (query) {\n            req.query(query);\n        }\n\n        if (method === 'download') {\n            if (httpMethod !== 'get') {\n                req.send(body);\n            }\n        } else if (method === 'upload') {\n            if (_options.formData) {\n                _.each(_options.formData, (v, k) => {\n                    req.field(k, v);\n                });\n            }\n            req.attach(_options.fileField ?? 'file', body, _options.fileName);\n        } else if (httpMethod !== 'get') {\n            req.send(body ?? _options.body);\n        }\n\n        if (_options.onProgress) {\n            req.on('progress', _options.onProgress);\n        }\n\n        try {\n            const res = await req;\n            const result = res.type.startsWith('text/') ? res.text : res.body;\n\n            if (this.onResponse) {\n                this.onResponse(result, req, res);\n            }\n\n            if (_options.onResponse) {\n                _options.onResponse(result, req, res);\n            }\n\n            return result;\n        } catch (error) {\n            const onOtherError = _options.onOtherError ?? this.onOtherError;\n            const onReponseError = _options.onReponseError ?? this.onReponseError;\n\n            if (error.response) {\n                if (onReponseError) {\n                    let body = error.response.body;\n                    if (!body && error.response.type === 'application/json') {\n                        try {\n                            body = JSON.parse(error.response.text);\n                        } catch (e) {}\n                    }\n\n                    return onReponseError(body, error);\n                }\n\n                throw error;\n            }\n\n            if (onOtherError) {\n                return onOtherError(error);\n            }\n\n            throw error;\n        }\n    }\n\n    async get(resource, query, options) {\n        return this.do('get', resToPath(resource), query, null, options);\n    }\n\n    async post(resource, data, query, options) {\n        return this.do('post', resToPath(resource), query, data, options);\n    }\n\n    async put(resource, data, query, options) {\n        return this.do('put', resToPath(resource), query, data, options);\n    }\n\n    async del(resource, query, options) {\n        return this.do('del', resToPath(resource), query, null, options);\n    }\n\n    async delete(...args) {\n        return this.del(...args);\n    }\n\n    async upload(resource, file, query, options) {\n        return this.do('upload', resToPath(resource), query, file, options);\n    }\n\n    async download(resource, query, options) {        \n        return this.do('download', resToPath(resource), query, null, options);\n    }\n}\n\nexport default HttpClient;\n"],"names":["DefaultMethods","get","post","put","del","delete","upload","download","resToPath","parts","Array","isArray","map","res","encodeURIComponent","join","HttpClient","do","method","path","query","body","options","toLowerCase","_options","_method","httpMethod","Error","url","startsWith","urlUtil","endpoint","req","adapter","createRequest","onSending","timeout","headers","_","each","v","k","set","withCredentials","send","formData","field","attach","fileField","fileName","onProgress","on","result","type","text","onResponse","error","onOtherError","onReponseError","response","JSON","parse","e","resource","data","args","file","constructor","endpointOrOptions"],"mappings":"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"}