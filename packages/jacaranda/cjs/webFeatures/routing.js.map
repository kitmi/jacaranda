{"version":3,"sources":["../../src/webFeatures/routing.js"],"sourcesContent":["/**\n * Enable web request routing.\n * @module Feature_Routing\n */\n\nimport { _, batchAsync_, isPlainObject, esmCheck } from '@kitmi/utils';\nimport Feature from '../Feature';\n\nexport default {\n    /**\n     * This feature is loaded at ready (final) stage.\n     * @member {string}\n     */\n    stage: Feature.PLUGIN,\n\n    /**\n     * Load the feature.\n     * @param {Routable} app - The app module object\n     * @param {object} routes - Routes and configuration\n     * @returns {Promise.<*>}\n     */\n    load_: (app, routes) => {\n        app.on('after:' + Feature.PLUGIN, () =>\n            batchAsync_(routes, async (routersConfig, route) => {\n                if (isPlainObject(routersConfig)) {\n                    return batchAsync_(routersConfig, async (options, type) => {\n                        let loader_ = esmCheck(require('../routers/' + type));\n\n                        app.log('verbose', `A \"${type}\" router is created at \"${route}\" in app [${app.name}].`);\n\n                        return loader_(app, route, options);\n                    });\n                } else {\n                    // 'route': 'method:/path'\n                    let mainRoute = '/',\n                        baseRoute = route;\n                    let pos = route.indexOf(':/');\n\n                    if (pos !== -1) {\n                        mainRoute = route.substring(0, pos + 2);\n                        baseRoute = route.substring(pos + 1);\n                    } else if (Array.isArray(routersConfig)) {\n                        //all handled by middleware chains\n                        mainRoute = 'all:/';\n                    }\n\n                    let rules = {\n                        [mainRoute]: routersConfig,\n                    };\n\n                    const loader_ = esmCheck(require('../routers/rule'));\n                    app.log('verbose', `A \"rule\" router is created at \"${baseRoute}\" in app [${app.name}].`);\n\n                    return loader_(app, baseRoute, { rules: rules });\n                }\n            })\n        );\n    },\n};\n"],"names":["stage","Feature","PLUGIN","load_","app","routes","on","batchAsync_","routersConfig","route","isPlainObject","options","type","loader_","esmCheck","require","log","name","mainRoute","baseRoute","pos","indexOf","substring","Array","isArray","rules"],"mappings":"AAAA;;;CAGC;;;;+BAKD;;;eAAA;;;uBAHwD;gEACpC;;;;;;MAEpB,WAAe;IACX;;;KAGC,GACDA,OAAOC,gBAAO,CAACC,MAAM;IAErB;;;;;KAKC,GACDC,OAAO,CAACC,KAAKC;QACTD,IAAIE,EAAE,CAAC,WAAWL,gBAAO,CAACC,MAAM,EAAE,IAC9BK,IAAAA,kBAAW,EAACF,QAAQ,OAAOG,eAAeC;gBACtC,IAAIC,IAAAA,oBAAa,EAACF,gBAAgB;oBAC9B,OAAOD,IAAAA,kBAAW,EAACC,eAAe,OAAOG,SAASC;wBAC9C,IAAIC,UAAUC,IAAAA,eAAQ,EAACC,QAAQ,gBAAgBH;wBAE/CR,IAAIY,GAAG,CAAC,WAAW,CAAC,GAAG,EAAEJ,KAAK,wBAAwB,EAAEH,MAAM,UAAU,EAAEL,IAAIa,IAAI,CAAC,EAAE,CAAC;wBAEtF,OAAOJ,QAAQT,KAAKK,OAAOE;oBAC/B;gBACJ,OAAO;oBACH,0BAA0B;oBAC1B,IAAIO,YAAY,KACZC,YAAYV;oBAChB,IAAIW,MAAMX,MAAMY,OAAO,CAAC;oBAExB,IAAID,QAAQ,CAAC,GAAG;wBACZF,YAAYT,MAAMa,SAAS,CAAC,GAAGF,MAAM;wBACrCD,YAAYV,MAAMa,SAAS,CAACF,MAAM;oBACtC,OAAO,IAAIG,MAAMC,OAAO,CAAChB,gBAAgB;wBACrC,kCAAkC;wBAClCU,YAAY;oBAChB;oBAEA,IAAIO,QAAQ;wBACR,CAACP,UAAU,EAAEV;oBACjB;oBAEA,MAAMK,UAAUC,IAAAA,eAAQ,EAACC,QAAQ;oBACjCX,IAAIY,GAAG,CAAC,WAAW,CAAC,+BAA+B,EAAEG,UAAU,UAAU,EAAEf,IAAIa,IAAI,CAAC,EAAE,CAAC;oBAEvF,OAAOJ,QAAQT,KAAKe,WAAW;wBAAEM,OAAOA;oBAAM;gBAClD;YACJ;IAER;AACJ"}