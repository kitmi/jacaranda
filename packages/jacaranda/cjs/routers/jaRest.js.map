{"version":3,"sources":["../../src/routers/jaRest.js"],"sourcesContent":["import path from 'node:path';\nimport { globSync } from 'glob';\nimport { _, naming, text, hasMethod, esmCheck, batchAsync_ } from '@kitmi/utils';\n\n/**\n * Jacaranda Restful API Spec (jaREST) router.\n * @module Router_JaREST\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a jaREST router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {object} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      jaREST: {\n *          $controllerPath:\n *          $middlewares:\n *          $errorOptions\n *          'controller To remap': '/special/:abc/url'\n *          ...\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            find\n *  /:resource                     post           create\n *  /:resource/:id                 get            findOne\n *  /:resource/:id                 patch          updateOne\n *  /:resource/:id                 put            replaceOne\n *  /:resource/:id                 delete         deleteOne \n *  /:resource                     put            replaceMany\n *  /:resource                     patch          updateMany\n *  /:resource                     delete         deleteMany\n */\nconst jaRestRouter = async (app, baseRoute, options) => {\n    let router = app.engine.createRouter(baseRoute);\n\n    let resourcePath = path.resolve(app.sourcePath, options.$controllerPath || 'resources');\n\n    app.useMiddleware(router, await app.getMiddlewareFactory('jsonError')(options.$errorOptions, app), 'jsonError');\n\n    if (options.$middlewares) {\n        await app.useMiddlewares_(router, options.$middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, '**/*.js');\n    let files = globSync(resourcesPath);\n\n    await batchAsync_(files, async filepath => {\n        let controller = esmCheck(require(filepath));\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        const relativePath = path.relative(resourcePath, filepath);\n        const dirPath = path.dirname(relativePath);\n        const entityName = path.basename(relativePath, '.js');\n        const entithNameWithPath = path.join(dirPath, entityName);\n\n        let baseEndpoint;\n        if (entithNameWithPath in options) {\n            baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options[entithNameWithPath], '/'), '/');\n        } else {\n            const urlPath = entithNameWithPath\n                .split('/')\n                .map((p) => naming.kebabCase(p))\n                .join('/');\n            baseEndpoint = text.ensureStartsWith(urlPath, '/');\n        }\n\n        let idName = naming.camelCase(entityName) + 'Id';\n        let endpointWithId = appendId(baseEndpoint, idName);\n\n        async function addRoute_(methodName, httpMethod) {\n            if (hasMethod(controller, methodName)) {\n                const _action = controller[methodName].bind(controller);\n                const _middlewares = controller[methodName].__metaMiddlewares;\n                await app.addRoute_(router, httpMethod, baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n            }\n        }\n\n        async function addRouteWithId_(methodName, httpMethod) {\n            if (hasMethod(controller, methodName)) {\n                const _action = (ctx) => controller[methodName](ctx, ctx.params[idName]);\n                const _middlewares = controller[methodName].__metaMiddlewares;\n                await app.addRoute_(router, httpMethod, endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n            }\n        }\n\n        await addRoute_('find', 'get');\n        await addRoute_('create', 'post');\n        await addRoute_('replaceMany', 'put');\n        await addRoute_('updateMany', 'patch');\n        await addRoute_('deleteMany', 'delete');\n\n        await addRouteWithId_('findOne', 'get');\n        await addRouteWithId_('replaceOne', 'put');\n        await addRouteWithId_('updateOne', 'patch');\n        await addRouteWithId_('deleteOne', 'delete');        \n    });\n\n    app.addRouter(router);\n};\n\nexport default jaRestRouter;\n"],"names":["appendId","baseEndpoint","idName","jaRestRouter","app","baseRoute","options","router","engine","createRouter","resourcePath","path","resolve","sourcePath","$controllerPath","useMiddleware","getMiddlewareFactory","$errorOptions","$middlewares","useMiddlewares_","resourcesPath","join","files","globSync","batchAsync_","filepath","controller","esmCheck","require","relativePath","relative","dirPath","dirname","entityName","basename","entithNameWithPath","text","ensureStartsWith","dropIfEndsWith","urlPath","split","map","p","naming","kebabCase","camelCase","endpointWithId","addRoute_","methodName","httpMethod","hasMethod","_action","bind","_middlewares","__metaMiddlewares","addRouteWithId_","ctx","params","addRouter"],"mappings":"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"}