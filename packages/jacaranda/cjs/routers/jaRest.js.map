{"version":3,"sources":["../../src/routers/jaRest.js"],"sourcesContent":["import path from 'node:path';\nimport { globSync } from 'glob';\nimport { _, naming, text, hasMethod, esmCheck, batchAsync_ } from '@kitmi/utils';\n\n/**\n * Jacaranda Restful API Spec (jaREST) router.\n * @module Router_JaREST\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a jaREST router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {object} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      jaREST: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            find\n *  /:resource                     post           create\n *  /:resource/:id                 get            findOne\n *  /:resource/:id                 patch          updateOne\n *  /:resource/:id                 put            replaceOne\n *  /:resource/:id                 del            deleteOne \n *  /:resource                     post           replaceMany\n *  /:resource                     patch          updateMany\n *  /:resource                     del            deleteMany\n */\nconst jaRestRouter = async (app, baseRoute, options) => {\n    let router = app.engine.createRouter(baseRoute);\n\n    let resourcePath = path.resolve(app.sourcePath, options.resourcesPath || 'resources');\n\n    app.useMiddleware(router, await app.getMiddlewareFactory('jsonError')(options.errorOptions, app), 'jsonError');\n\n    if (options.middlewares) {\n        await app.useMiddlewares_(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, '**/*.js');\n    let files = globSync(resourcesPath);\n\n    await batchAsync_(files, async filepath => {\n        let controller = esmCheck(require(filepath));\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        const relativePath = path.relative(resourcePath, filepath);\n        const dirPath = path.dirname(relativePath);\n        const entityName = path.basename(relativePath, '.js');\n        const entithNameWithPath = path.join(dirPath, entityName);\n\n        let baseEndpoint;\n        if (options.remaps && entithNameWithPath in options.remaps) {\n            baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options.remaps[entithNameWithPath], '/'), '/');\n        } else {\n            const urlPath = entithNameWithPath\n                .split('/')\n                .map((p) => naming.kebabCase(p))\n                .join('/');\n            baseEndpoint = text.ensureStartsWith(urlPath, '/');\n        }\n\n        let idName = naming.camelCase(entityName) + 'Id';\n        let endpointWithId = appendId(baseEndpoint, idName);\n\n        if (hasMethod(controller, 'find')) {\n            const _action = controller.find.bind(controller);\n            const _middlewares = controller.find.__metaMiddlewares;\n            await app.addRoute_(router, 'get', baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'post')) {\n            const _action = controller.post.bind(controller);\n            const _middlewares = controller.post.__metaMiddlewares;\n            await app.addRoute_(router, 'post', baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'findById')) {\n            const _action = (ctx) => controller.findById(ctx, ctx.params[idName]);\n            const _middlewares = controller.findById.__metaMiddlewares;\n            await app.addRoute_(router, 'get', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'updateById')) {\n            const _action = (ctx) => controller.updateById(ctx, ctx.params[idName]);\n            const _middlewares = controller.updateById.__metaMiddlewares;\n            await app.addRoute_(router, 'put', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n\n        if (hasMethod(controller, 'deleteById')) {\n            const _action = (ctx) => controller.deleteById(ctx, ctx.params[idName]);\n            const _middlewares = controller.deleteById.__metaMiddlewares;\n            await app.addRoute_(router, 'del', endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n        }\n    });\n\n    app.addRouter(router);\n};\n\nexport default jaRestRouter;\n"],"names":["appendId","baseEndpoint","idName","jaRestRouter","app","baseRoute","options","router","engine","createRouter","resourcePath","path","resolve","sourcePath","resourcesPath","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares_","join","files","globSync","batchAsync_","filepath","controller","esmCheck","require","relativePath","relative","dirPath","dirname","entityName","basename","entithNameWithPath","remaps","text","ensureStartsWith","dropIfEndsWith","urlPath","split","map","p","naming","kebabCase","camelCase","endpointWithId","hasMethod","_action","find","bind","_middlewares","__metaMiddlewares","addRoute_","post","ctx","findById","params","updateById","deleteById","addRouter"],"mappings":"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"}