{"version":3,"sources":["../../src/routers/rest.js"],"sourcesContent":["import { naming, text, hasMethod, batchAsync_ } from '@kitmi/utils';\n\n/**\n * Simple RESTful router.\n * @module Router_REST\n */\n\n/**\n * Create a RESTful router.\n * @param {Routable} app\n * @param {string} baseRoute\n * @param {object} options\n * @property {string} [options.$controllerPath]\n * @property {object} [options.$errorOptions]\n * @property {object|array} [options.$middlewares]\n * @example\n *  '<base path>': {\n *      REST: {\n *          $controllerPath:\n *          $errorOptions:\n *          $middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            list\n *  /:resource                     post           create\n *  /:resource/:id                 get            detail\n *  /:resource/:id                 put            update\n *  /:resource/:id                 delete         remove\n */\nconst restRouter = async (app, baseRoute, options) => {\n    let router = app.router.createRouter(baseRoute);\n\n    let resourcesPath = options.$controllerPath ?? 'resources';\n    const kebabify = options.$urlDasherize;\n\n    app.useMiddleware(router, await app.getMiddlewareFactory('jsonError')(options.$errorOptions, app), 'jsonError');\n\n    if (options.$middlewares) {\n        await app.useMiddlewares_(router, options.$middlewares);\n    }\n\n    const controllers = app.registry.controllers?.[resourcesPath] ?? [];\n\n    await batchAsync_(controllers, async (controller, relPath) => {\n        let batchUrl = text.ensureStartsWith(\n            relPath\n                .split('/')\n                .map((p) => (kebabify ? naming.kebabCase(p) : p))\n                .join('/'),\n            '/'\n        );\n        let singleUrl = batchUrl + '/:id';\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        if (hasMethod(controller, 'list')) {\n            await app.addRoute_(router, 'get', batchUrl, (ctx) => controller.list(ctx));\n        }\n\n        if (hasMethod(controller, 'create')) {\n            await app.addRoute_(router, 'post', batchUrl, (ctx) => controller.create(ctx));\n        }\n\n        if (hasMethod(controller, 'detail')) {\n            await app.addRoute_(router, 'get', singleUrl, (ctx) => controller.detail(ctx));\n        }\n\n        if (hasMethod(controller, 'update')) {\n            await app.addRoute_(router, 'put', singleUrl, (ctx) => controller.update(ctx));\n        }\n\n        if (hasMethod(controller, 'remove')) {\n            await app.addRoute_(router, 'delete', singleUrl, (ctx) => controller.remove(ctx));\n        }\n    });\n\n    app.addRouter(router);\n};\n\nexport default restRouter;\n"],"names":["restRouter","app","baseRoute","options","router","createRouter","resourcesPath","$controllerPath","kebabify","$urlDasherize","useMiddleware","getMiddlewareFactory","$errorOptions","$middlewares","useMiddlewares_","controllers","registry","batchAsync_","controller","relPath","batchUrl","text","ensureStartsWith","split","map","p","naming","kebabCase","join","singleUrl","hasMethod","addRoute_","ctx","list","create","detail","update","remove","addRouter"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAmFA;;;eAAA;;;uBAnFqD;AAErD;;;CAGC,GAED;;;;;;;;;;;;;;;;;;;;;;;CAuBC,GACD,MAAMA,aAAa,OAAOC,KAAKC,WAAWC;IACtC,IAAIC,SAASH,IAAIG,MAAM,CAACC,YAAY,CAACH;IAErC,IAAII,gBAAgBH,QAAQI,eAAe,IAAI;IAC/C,MAAMC,WAAWL,QAAQM,aAAa;IAEtCR,IAAIS,aAAa,CAACN,QAAQ,MAAMH,IAAIU,oBAAoB,CAAC,aAAaR,QAAQS,aAAa,EAAEX,MAAM;IAEnG,IAAIE,QAAQU,YAAY,EAAE;QACtB,MAAMZ,IAAIa,eAAe,CAACV,QAAQD,QAAQU,YAAY;IAC1D;IAEA,MAAME,cAAcd,IAAIe,QAAQ,CAACD,WAAW,EAAE,CAACT,cAAc,IAAI,EAAE;IAEnE,MAAMW,IAAAA,kBAAW,EAACF,aAAa,OAAOG,YAAYC;QAC9C,IAAIC,WAAWC,WAAI,CAACC,gBAAgB,CAChCH,QACKI,KAAK,CAAC,KACNC,GAAG,CAAC,CAACC,IAAOjB,WAAWkB,aAAM,CAACC,SAAS,CAACF,KAAKA,GAC7CG,IAAI,CAAC,MACV;QAEJ,IAAIC,YAAYT,WAAW;QAE3B,IAAI,OAAOF,eAAe,YAAY;YAClCA,aAAa,IAAIA,WAAWjB;QAChC;QAEA,IAAI6B,IAAAA,gBAAS,EAACZ,YAAY,SAAS;YAC/B,MAAMjB,IAAI8B,SAAS,CAAC3B,QAAQ,OAAOgB,UAAU,CAACY,MAAQd,WAAWe,IAAI,CAACD;QAC1E;QAEA,IAAIF,IAAAA,gBAAS,EAACZ,YAAY,WAAW;YACjC,MAAMjB,IAAI8B,SAAS,CAAC3B,QAAQ,QAAQgB,UAAU,CAACY,MAAQd,WAAWgB,MAAM,CAACF;QAC7E;QAEA,IAAIF,IAAAA,gBAAS,EAACZ,YAAY,WAAW;YACjC,MAAMjB,IAAI8B,SAAS,CAAC3B,QAAQ,OAAOyB,WAAW,CAACG,MAAQd,WAAWiB,MAAM,CAACH;QAC7E;QAEA,IAAIF,IAAAA,gBAAS,EAACZ,YAAY,WAAW;YACjC,MAAMjB,IAAI8B,SAAS,CAAC3B,QAAQ,OAAOyB,WAAW,CAACG,MAAQd,WAAWkB,MAAM,CAACJ;QAC7E;QAEA,IAAIF,IAAAA,gBAAS,EAACZ,YAAY,WAAW;YACjC,MAAMjB,IAAI8B,SAAS,CAAC3B,QAAQ,UAAUyB,WAAW,CAACG,MAAQd,WAAWmB,MAAM,CAACL;QAChF;IACJ;IAEA/B,IAAIqC,SAAS,CAAClC;AAClB;MAEA,WAAeJ"}