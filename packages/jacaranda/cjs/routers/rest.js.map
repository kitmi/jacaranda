{"version":3,"sources":["../../src/routers/rest.js"],"sourcesContent":["import path from 'node:path';\nimport { _, text, hasMethod, esmCheck, batchAsync_ } from '@kitmi/utils';\nimport { globSync } from 'glob';\n\n/**\n * Simple RESTful router.\n * @module Router_REST\n */\n\n/**\n * Create a RESTful router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {objects} options\n * @property {string} [options.resourcesPath]\n * @property {object|array} [options.middlewares]\n * @example\n *  '<base path>': {\n *      REST: {\n *          resourcesPath:\n *          middlewares:\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            list\n *  /:resource                     post           create\n *  /:resource/:id                 get            detail\n *  /:resource/:id                 put            update\n *  /:resource/:id                 delete         remove\n */\nconst restRouter = async (app, baseRoute, options) => {\n    let router = app.engine.createRouter(baseRoute);\n\n    let resourcePath = path.resolve(app.sourcePath, options.resourcesPath ?? 'resources');\n\n    app.useMiddleware(router, await app.getMiddlewareFactory('jsonError')(options.errorOptions, app), 'jsonError');\n\n    if (options.middlewares) {\n        await app.useMiddlewares_(router, options.middlewares);\n    }\n\n    let resourcesPath = path.join(resourcePath, '**', '*.js');\n    let files = globSync(resourcesPath, { nodir: true });\n\n    await batchAsync_(files, async (file) => {\n        let relPath = path.relative(resourcePath, file);\n        let batchUrl = text.ensureStartsWith(\n            relPath\n                .substring(0, relPath.length - 3)\n                .split(path.sep)\n                .map((p) => _.kebabCase(p))\n                .join('/'),\n            '/'\n        );\n        let singleUrl = batchUrl + '/:id';\n\n        let controller = esmCheck(require(file));\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        if (hasMethod(controller, 'list')) {\n            await app.addRoute_(router, 'get', batchUrl, (ctx) => controller.list(ctx));\n        }\n\n        if (hasMethod(controller, 'create')) {\n            await app.addRoute_(router, 'post', batchUrl, (ctx) => controller.create(ctx));\n        }\n\n        if (hasMethod(controller, 'detail')) {\n            await app.addRoute_(router, 'get', singleUrl, (ctx) => controller.detail(ctx));\n        }\n\n        if (hasMethod(controller, 'update')) {\n            await app.addRoute_(router, 'put', singleUrl, (ctx) => controller.update(ctx));\n        }\n\n        if (hasMethod(controller, 'remove')) {\n            await app.addRoute_(router, 'del', singleUrl, (ctx) => controller.remove(ctx));\n        }\n    });\n\n    app.addRouter(router);\n};\n\nexport default restRouter;\n"],"names":["restRouter","app","baseRoute","options","router","engine","createRouter","resourcePath","path","resolve","sourcePath","resourcesPath","useMiddleware","getMiddlewareFactory","errorOptions","middlewares","useMiddlewares_","join","files","globSync","nodir","batchAsync_","file","relPath","relative","batchUrl","text","ensureStartsWith","substring","length","split","sep","map","p","_","kebabCase","singleUrl","controller","esmCheck","require","hasMethod","addRoute_","ctx","list","create","detail","update","remove","addRouter"],"mappings":";;;;+BAuFA;;;eAAA;;;iEAvFiB;uBACyC;sBACjC;;;;;;AAEzB;;;CAGC,GAED;;;;;;;;;;;;;;;;;;;;;CAqBC,GACD,MAAMA,aAAa,OAAOC,KAAKC,WAAWC;IACtC,IAAIC,SAASH,IAAII,MAAM,CAACC,YAAY,CAACJ;IAErC,IAAIK,eAAeC,iBAAI,CAACC,OAAO,CAACR,IAAIS,UAAU,EAAEP,QAAQQ,aAAa,IAAI;IAEzEV,IAAIW,aAAa,CAACR,QAAQ,MAAMH,IAAIY,oBAAoB,CAAC,aAAaV,QAAQW,YAAY,EAAEb,MAAM;IAElG,IAAIE,QAAQY,WAAW,EAAE;QACrB,MAAMd,IAAIe,eAAe,CAACZ,QAAQD,QAAQY,WAAW;IACzD;IAEA,IAAIJ,gBAAgBH,iBAAI,CAACS,IAAI,CAACV,cAAc,MAAM;IAClD,IAAIW,QAAQC,IAAAA,cAAQ,EAACR,eAAe;QAAES,OAAO;IAAK;IAElD,MAAMC,IAAAA,kBAAW,EAACH,OAAO,OAAOI;QAC5B,IAAIC,UAAUf,iBAAI,CAACgB,QAAQ,CAACjB,cAAce;QAC1C,IAAIG,WAAWC,WAAI,CAACC,gBAAgB,CAChCJ,QACKK,SAAS,CAAC,GAAGL,QAAQM,MAAM,GAAG,GAC9BC,KAAK,CAACtB,iBAAI,CAACuB,GAAG,EACdC,GAAG,CAAC,CAACC,IAAMC,QAAC,CAACC,SAAS,CAACF,IACvBhB,IAAI,CAAC,MACV;QAEJ,IAAImB,YAAYX,WAAW;QAE3B,IAAIY,aAAaC,IAAAA,eAAQ,EAACC,QAAQjB;QAElC,IAAI,OAAOe,eAAe,YAAY;YAClCA,aAAa,IAAIA,WAAWpC;QAChC;QAEA,IAAIuC,IAAAA,gBAAS,EAACH,YAAY,SAAS;YAC/B,MAAMpC,IAAIwC,SAAS,CAACrC,QAAQ,OAAOqB,UAAU,CAACiB,MAAQL,WAAWM,IAAI,CAACD;QAC1E;QAEA,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjC,MAAMpC,IAAIwC,SAAS,CAACrC,QAAQ,QAAQqB,UAAU,CAACiB,MAAQL,WAAWO,MAAM,CAACF;QAC7E;QAEA,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjC,MAAMpC,IAAIwC,SAAS,CAACrC,QAAQ,OAAOgC,WAAW,CAACM,MAAQL,WAAWQ,MAAM,CAACH;QAC7E;QAEA,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjC,MAAMpC,IAAIwC,SAAS,CAACrC,QAAQ,OAAOgC,WAAW,CAACM,MAAQL,WAAWS,MAAM,CAACJ;QAC7E;QAEA,IAAIF,IAAAA,gBAAS,EAACH,YAAY,WAAW;YACjC,MAAMpC,IAAIwC,SAAS,CAACrC,QAAQ,OAAOgC,WAAW,CAACM,MAAQL,WAAWU,MAAM,CAACL;QAC7E;IACJ;IAEAzC,IAAI+C,SAAS,CAAC5C;AAClB;MAEA,WAAeJ"}