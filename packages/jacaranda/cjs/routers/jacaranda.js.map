{"version":3,"sources":["../../src/routers/jacaranda.js"],"sourcesContent":["import { naming, text, hasMethod, batchAsync_ } from '@kitmi/utils';\n\n/**\n * Jacaranda Restful API Spec (jacaranda) router.\n * @module Router_JaREST\n */\n\nconst appendId = (baseEndpoint, idName) => (idName ? `${baseEndpoint}/:${idName}` : baseEndpoint);\n\n/**\n * Create a jaREST router.\n * @param {*} app\n * @param {string} baseRoute\n * @param {object} options\n * @property {string} [options.$controllerPath]\n * @property {object|array} [options.$middlewares]\n * @property {boolean} [options.$urlDasherize]\n * @example\n *  '<base path>': {\n *      jacaranda: {\n *          $controllerPath:\n *          $middlewares:\n *          $errorOptions\n *          $urlDasherize: false\n *          'controller To remap': '/special/:abc/url'\n *          ...\n *      }\n *  }\n *\n *  route                          http method    function of ctrl\n *  /:resource                     get            query_\n *  /:resource                     post           post_\n *  /:resource/:id                 get            get_\n *  /:resource/:id                 put            put_\n *  /:resource/:id                 patch          patch_\n *  /:resource/:id                 delete         delete_\n *  /:resource                     put            putMany_\n *  /:resource                     patch          patchMany_\n *  /:resource                     delete         deleteMany_\n */\nconst jaRestRouter = async (app, baseRoute, options) => {\n    let router = app.router.createRouter(baseRoute);\n\n    let resourcesPath = options.$controllerPath || 'resources';\n    const kebabify = options.$urlDasherize;\n\n    app.useMiddleware(router, await app.getMiddlewareFactory('jsonError')(options.$errorOptions, app), 'jsonError');\n\n    if (options.$middlewares) {\n        await app.useMiddlewares_(router, options.$middlewares);\n    }\n\n    const controllers = app.registry.controllers?.[resourcesPath] ?? {};\n\n    await batchAsync_(controllers, async (controller, entithNameWithPath) => {\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n        }\n\n        const pathNodes = entithNameWithPath.split('/');\n        const entityName = pathNodes[pathNodes.length - 1];\n\n        let baseEndpoint;\n        if (entithNameWithPath in options) {\n            baseEndpoint = text.ensureStartsWith(text.dropIfEndsWith(options[entithNameWithPath], '/'), '/');\n        } else {\n            const urlPath = pathNodes\n                .map((p) => kebabify ? naming.kebabCase(p) : p)\n                .join('/');\n            baseEndpoint = text.ensureStartsWith(urlPath, '/');\n        }\n\n        let idName = naming.camelCase(entityName) + 'Id';\n        let endpointWithId = appendId(baseEndpoint, idName);\n\n        //todo: add options\n\n        async function addRoute_(methodName, httpMethod) {\n            if (hasMethod(controller, methodName)) {\n                const _action = controller[methodName].bind(controller);\n                const _middlewares = controller[methodName].__metaMiddlewares;\n                await app.addRoute_(router, httpMethod, baseEndpoint, _middlewares ? [..._middlewares, _action] : _action);\n            }\n        }\n\n        async function addRouteWithId_(methodName, httpMethod) {\n            if (hasMethod(controller, methodName)) {\n                const _action = (ctx) => controller[methodName](ctx, ctx.params[idName]);\n                const _middlewares = controller[methodName].__metaMiddlewares;\n                await app.addRoute_(router, httpMethod, endpointWithId, _middlewares ? [..._middlewares, _action] : _action);\n            }\n        }\n\n        await addRoute_('query_', 'get');\n        await addRouteWithId_('get_', 'get');\n        await addRoute_('post_', 'post');\n        await addRouteWithId_('put_', 'put');\n        await addRouteWithId_('patch_', 'patch');\n        await addRouteWithId_('delete_', 'delete');        \n        \n        await addRoute_('putMany_', 'put');\n        await addRoute_('patchMany_', 'patch');\n        await addRoute_('deleteMany_', 'delete');        \n    });\n\n    app.addRouter(router);\n};\n\nexport default jaRestRouter;\n"],"names":["appendId","baseEndpoint","idName","jaRestRouter","app","baseRoute","options","router","createRouter","resourcesPath","$controllerPath","kebabify","$urlDasherize","useMiddleware","getMiddlewareFactory","$errorOptions","$middlewares","useMiddlewares_","controllers","registry","batchAsync_","controller","entithNameWithPath","pathNodes","split","entityName","length","text","ensureStartsWith","dropIfEndsWith","urlPath","map","p","naming","kebabCase","join","camelCase","endpointWithId","addRoute_","methodName","httpMethod","hasMethod","_action","bind","_middlewares","__metaMiddlewares","addRouteWithId_","ctx","params","addRouter"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA4GA;;;eAAA;;;uBA5GqD;AAErD;;;CAGC,GAED,MAAMA,WAAW,CAACC,cAAcC,SAAYA,SAAS,CAAC,EAAED,aAAa,EAAE,EAAEC,OAAO,CAAC,GAAGD;AAEpF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BC,GACD,MAAME,eAAe,OAAOC,KAAKC,WAAWC;IACxC,IAAIC,SAASH,IAAIG,MAAM,CAACC,YAAY,CAACH;IAErC,IAAII,gBAAgBH,QAAQI,eAAe,IAAI;IAC/C,MAAMC,WAAWL,QAAQM,aAAa;IAEtCR,IAAIS,aAAa,CAACN,QAAQ,MAAMH,IAAIU,oBAAoB,CAAC,aAAaR,QAAQS,aAAa,EAAEX,MAAM;IAEnG,IAAIE,QAAQU,YAAY,EAAE;QACtB,MAAMZ,IAAIa,eAAe,CAACV,QAAQD,QAAQU,YAAY;IAC1D;IAEA,MAAME,cAAcd,IAAIe,QAAQ,CAACD,WAAW,EAAE,CAACT,cAAc,IAAI,CAAC;IAElE,MAAMW,IAAAA,kBAAW,EAACF,aAAa,OAAOG,YAAYC;QAC9C,IAAI,OAAOD,eAAe,YAAY;YAClCA,aAAa,IAAIA,WAAWjB;QAChC;QAEA,MAAMmB,YAAYD,mBAAmBE,KAAK,CAAC;QAC3C,MAAMC,aAAaF,SAAS,CAACA,UAAUG,MAAM,GAAG,EAAE;QAElD,IAAIzB;QACJ,IAAIqB,sBAAsBhB,SAAS;YAC/BL,eAAe0B,WAAI,CAACC,gBAAgB,CAACD,WAAI,CAACE,cAAc,CAACvB,OAAO,CAACgB,mBAAmB,EAAE,MAAM;QAChG,OAAO;YACH,MAAMQ,UAAUP,UACXQ,GAAG,CAAC,CAACC,IAAMrB,WAAWsB,aAAM,CAACC,SAAS,CAACF,KAAKA,GAC5CG,IAAI,CAAC;YACVlC,eAAe0B,WAAI,CAACC,gBAAgB,CAACE,SAAS;QAClD;QAEA,IAAI5B,SAAS+B,aAAM,CAACG,SAAS,CAACX,cAAc;QAC5C,IAAIY,iBAAiBrC,SAASC,cAAcC;QAE5C,mBAAmB;QAEnB,eAAeoC,UAAUC,UAAU,EAAEC,UAAU;YAC3C,IAAIC,IAAAA,gBAAS,EAACpB,YAAYkB,aAAa;gBACnC,MAAMG,UAAUrB,UAAU,CAACkB,WAAW,CAACI,IAAI,CAACtB;gBAC5C,MAAMuB,eAAevB,UAAU,CAACkB,WAAW,CAACM,iBAAiB;gBAC7D,MAAMzC,IAAIkC,SAAS,CAAC/B,QAAQiC,YAAYvC,cAAc2C,eAAe;uBAAIA;oBAAcF;iBAAQ,GAAGA;YACtG;QACJ;QAEA,eAAeI,gBAAgBP,UAAU,EAAEC,UAAU;YACjD,IAAIC,IAAAA,gBAAS,EAACpB,YAAYkB,aAAa;gBACnC,MAAMG,UAAU,CAACK,MAAQ1B,UAAU,CAACkB,WAAW,CAACQ,KAAKA,IAAIC,MAAM,CAAC9C,OAAO;gBACvE,MAAM0C,eAAevB,UAAU,CAACkB,WAAW,CAACM,iBAAiB;gBAC7D,MAAMzC,IAAIkC,SAAS,CAAC/B,QAAQiC,YAAYH,gBAAgBO,eAAe;uBAAIA;oBAAcF;iBAAQ,GAAGA;YACxG;QACJ;QAEA,MAAMJ,UAAU,UAAU;QAC1B,MAAMQ,gBAAgB,QAAQ;QAC9B,MAAMR,UAAU,SAAS;QACzB,MAAMQ,gBAAgB,QAAQ;QAC9B,MAAMA,gBAAgB,UAAU;QAChC,MAAMA,gBAAgB,WAAW;QAEjC,MAAMR,UAAU,YAAY;QAC5B,MAAMA,UAAU,cAAc;QAC9B,MAAMA,UAAU,eAAe;IACnC;IAEAlC,IAAI6C,SAAS,CAAC1C;AAClB;MAEA,WAAeJ"}