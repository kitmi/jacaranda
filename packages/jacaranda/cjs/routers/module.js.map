{"version":3,"sources":["../../src/routers/module.js"],"sourcesContent":["import path from 'node:path';\nimport { _, url as urlUtil, text, esmCheck, batchAsync_ } from '@kitmi/utils';\nimport { InvalidConfiguration } from '@kitmi/types';\nimport { supportedMethods } from '../helpers';\n\n/**\n * Module router for mounting a specific controller.\n * @module Router_Module\n */\n\n/**\n * Create a module-based router.\n * @param {Routable} app\n * @param {string} baseRoute\n * @param {*} moduleItem\n * @example\n *   '<base path>': {\n *       module: {\n *           middlewares:\n *           controller:\n *       }\n *   }\n *\n *   '<base path>': {\n *       module: \"controller\"\n *   }\n */\nasync function moduleRouter(app, baseRoute, moduleItem) {\n    let controllerPath = app.controllersPath;\n\n    if (typeof moduleItem === 'string') {\n        // [ 'controllerName' ]\n        moduleItem = {\n            controller: moduleItem,\n        };\n    }\n\n    let currentPrefix = urlUtil.join(baseRoute, moduleItem.route || '/');\n    let router = app.engine.createRouter(currentPrefix);\n\n    if (moduleItem.middlewares) {\n        //module-wide middlewares\n        await app.useMiddlewares_(router, moduleItem.middlewares);\n    }\n\n    let controllers;\n\n    if (moduleItem.controllers) {\n        controllers = moduleItem.controllers;\n        if (!Array.isArray(controllers)) {\n            throw new InvalidConfiguration(\n                'Invalid module router configuration: controllers must be an array.',\n                app,\n                `routing.${baseRoute}.module.controllers`\n            );\n        }\n    } else {\n        if (typeof moduleItem.controller !== 'string') {\n            throw new InvalidConfiguration(\n                'Invalid module router configuration: controller must be a string.',\n                app,\n                `routing.${baseRoute}.module.controller`\n            );\n        }\n\n        controllers = [moduleItem.controller];\n    }\n\n    await batchAsync_(controllers, async (moduleController) => {\n        let controllerFile = path.join(controllerPath, moduleController);\n        let controller;\n\n        try {\n            controller = esmCheck(require(controllerFile));\n        } catch (e) {\n            if (e.code === 'MODULE_NOT_FOUND') {\n                throw new InvalidConfiguration(\n                    `Failed to load controller '${moduleController}'. ${e.message}`,\n                    app,\n                    `routing.${baseRoute}.module`\n                );\n            }\n\n            throw e;\n        }\n\n        let isController = false;\n\n        if (typeof controller === 'function') {\n            controller = new controller(app);\n            isController = true;\n        }\n\n        for (let actionName in controller) {\n            let action = controller[actionName];\n            if (typeof action !== 'function' || !action.__metaHttpMethod) continue; // only marked httpMethod should be mounted\n\n            const method = action.__metaHttpMethod;\n            let subRoute = text.ensureStartsWith(action.__metaRoute || _.kebabCase(actionName), '/');\n\n            let bindAction;\n\n            if (isController) {\n                bindAction = action.bind(controller);\n            } else {\n                bindAction = action;\n            }\n\n            if (!supportedMethods.has(method)) {\n                throw new InvalidConfiguration(\n                    'Unsupported http method: ' + method,\n                    app,\n                    `routing.${baseRoute}.module ${moduleItem.controller}.${actionName}`\n                );\n            }\n\n            await app.addRoute_(\n                router,\n                method,\n                subRoute,\n                action.__metaMiddlewares ? action.__metaMiddlewares.concat([bindAction]) : bindAction\n            );\n        }\n    });\n\n    app.addRouter(router);\n}\n\nexport default moduleRouter;\n"],"names":["moduleRouter","app","baseRoute","moduleItem","controllerPath","controllersPath","controller","currentPrefix","urlUtil","join","route","router","engine","createRouter","middlewares","useMiddlewares_","controllers","Array","isArray","InvalidConfiguration","batchAsync_","moduleController","controllerFile","path","esmCheck","require","e","code","message","isController","actionName","action","__metaHttpMethod","method","subRoute","text","ensureStartsWith","__metaRoute","_","kebabCase","bindAction","bind","supportedMethods","has","addRoute_","__metaMiddlewares","concat","addRouter"],"mappings":";;;;+BAgIA;;;eAAA;;;iEAhIiB;uBAC8C;uBAC1B;yBACJ;;;;;;AAEjC;;;CAGC,GAED;;;;;;;;;;;;;;;;CAgBC,GACD,eAAeA,aAAaC,GAAG,EAAEC,SAAS,EAAEC,UAAU;IAClD,IAAIC,iBAAiBH,IAAII,eAAe;IAExC,IAAI,OAAOF,eAAe,UAAU;QAChC,uBAAuB;QACvBA,aAAa;YACTG,YAAYH;QAChB;IACJ;IAEA,IAAII,gBAAgBC,UAAO,CAACC,IAAI,CAACP,WAAWC,WAAWO,KAAK,IAAI;IAChE,IAAIC,SAASV,IAAIW,MAAM,CAACC,YAAY,CAACN;IAErC,IAAIJ,WAAWW,WAAW,EAAE;QACxB,yBAAyB;QACzB,MAAMb,IAAIc,eAAe,CAACJ,QAAQR,WAAWW,WAAW;IAC5D;IAEA,IAAIE;IAEJ,IAAIb,WAAWa,WAAW,EAAE;QACxBA,cAAcb,WAAWa,WAAW;QACpC,IAAI,CAACC,MAAMC,OAAO,CAACF,cAAc;YAC7B,MAAM,IAAIG,2BAAoB,CAC1B,sEACAlB,KACA,CAAC,QAAQ,EAAEC,UAAU,mBAAmB,CAAC;QAEjD;IACJ,OAAO;QACH,IAAI,OAAOC,WAAWG,UAAU,KAAK,UAAU;YAC3C,MAAM,IAAIa,2BAAoB,CAC1B,qEACAlB,KACA,CAAC,QAAQ,EAAEC,UAAU,kBAAkB,CAAC;QAEhD;QAEAc,cAAc;YAACb,WAAWG,UAAU;SAAC;IACzC;IAEA,MAAMc,IAAAA,kBAAW,EAACJ,aAAa,OAAOK;QAClC,IAAIC,iBAAiBC,iBAAI,CAACd,IAAI,CAACL,gBAAgBiB;QAC/C,IAAIf;QAEJ,IAAI;YACAA,aAAakB,IAAAA,eAAQ,EAACC,QAAQH;QAClC,EAAE,OAAOI,GAAG;YACR,IAAIA,EAAEC,IAAI,KAAK,oBAAoB;gBAC/B,MAAM,IAAIR,2BAAoB,CAC1B,CAAC,2BAA2B,EAAEE,iBAAiB,GAAG,EAAEK,EAAEE,OAAO,CAAC,CAAC,EAC/D3B,KACA,CAAC,QAAQ,EAAEC,UAAU,OAAO,CAAC;YAErC;YAEA,MAAMwB;QACV;QAEA,IAAIG,eAAe;QAEnB,IAAI,OAAOvB,eAAe,YAAY;YAClCA,aAAa,IAAIA,WAAWL;YAC5B4B,eAAe;QACnB;QAEA,IAAK,IAAIC,cAAcxB,WAAY;YAC/B,IAAIyB,SAASzB,UAAU,CAACwB,WAAW;YACnC,IAAI,OAAOC,WAAW,cAAc,CAACA,OAAOC,gBAAgB,EAAE,UAAU,2CAA2C;YAEnH,MAAMC,SAASF,OAAOC,gBAAgB;YACtC,IAAIE,WAAWC,WAAI,CAACC,gBAAgB,CAACL,OAAOM,WAAW,IAAIC,QAAC,CAACC,SAAS,CAACT,aAAa;YAEpF,IAAIU;YAEJ,IAAIX,cAAc;gBACdW,aAAaT,OAAOU,IAAI,CAACnC;YAC7B,OAAO;gBACHkC,aAAaT;YACjB;YAEA,IAAI,CAACW,yBAAgB,CAACC,GAAG,CAACV,SAAS;gBAC/B,MAAM,IAAId,2BAAoB,CAC1B,8BAA8Bc,QAC9BhC,KACA,CAAC,QAAQ,EAAEC,UAAU,QAAQ,EAAEC,WAAWG,UAAU,CAAC,CAAC,EAAEwB,WAAW,CAAC;YAE5E;YAEA,MAAM7B,IAAI2C,SAAS,CACfjC,QACAsB,QACAC,UACAH,OAAOc,iBAAiB,GAAGd,OAAOc,iBAAiB,CAACC,MAAM,CAAC;gBAACN;aAAW,IAAIA;QAEnF;IACJ;IAEAvC,IAAI8C,SAAS,CAACpC;AAClB;MAEA,WAAeX"}