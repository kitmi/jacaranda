{"version":3,"sources":["../../src/routers/rule.js"],"sourcesContent":["import { _, text, eachAsync_ } from '@kitmi/utils';\nimport { InvalidConfiguration } from '@kitmi/types';\nimport { supportedMethods } from '../helpers';\n\n/**\n * Rule based router.\n * @module Router_Rule\n */\n\n/**\n * Create a rule-based router.\n * @param {Routable} app\n * @param {string} baseRoute\n * @param {object} options\n * @example\n * '<base path>': {\n *     rule: {\n *         $middlewares: {} | [],\n*          // type 1, default is \"get\", methods mapped to one action\n*          '<sub route>': '<controller with relative path>.<action>',\n*\n*          // type 2, different methods mapped to different method\n*          '<sub route>': {\n*             '<method>': '<controller with relative path>.<action>'\n*          },\n*\n*          // type 3, with middleware\n*          '<sub route>': {\n*              '<method>': {\n*                 '<middleware name>': { //middleware options }\n*              }\n*          },\n*\n*          // type 4, all methods mapped to one action\n*          '<method>:/<sub route>': '<controller with relative path>.<action>'\n*\n*          // type 5, all methods mapped to one action\n*          '<method>:/<sub route>': {\n*              '<middleware name>': { //middleware options }\n*          }\n *     }\n * }\n */\nasync function load_(app, baseRoute, options) {\n    let router = app.router.createRouter(baseRoute);\n\n    if (options.$middlewares) {\n        await app.useMiddlewares_(router, options.$middlewares);\n    }\n\n    await eachAsync_(options, async (methods, subRoute) => {\n        if (subRoute[0] === '$') {\n            return;\n        }\n\n        let pos = subRoute.indexOf(':/');\n\n        if (pos !== -1) {\n            if (pos === 0) {\n                throw new InvalidConfiguration(\n                    'Invalid route rule syntax: ' + subRoute,\n                    app,\n                    `routing[${baseRoute}].rule.rules`\n                );\n            }\n\n            // like get:/, or post:/\n\n            let embeddedMethod = subRoute.substr(0, pos).toLocaleLowerCase();\n            subRoute = subRoute.substr(pos + 2);\n\n            methods = { [embeddedMethod]: methods };\n        }\n\n        subRoute = text.ensureStartsWith(subRoute, '/');\n\n        if (typeof methods === 'string' || Array.isArray(methods)) {\n            methods = { get: methods };\n        }\n\n        await eachAsync_(methods, async (middlewares, method) => {\n            if (!supportedMethods.has(method) && method !== 'all') {\n                throw new InvalidConfiguration(\n                    'Unsupported http method: ' + method,\n                    app,\n                    `routing[${baseRoute}].rule.rules[${subRoute}]`\n                );\n            }\n\n            await app.addRoute_(router, method, subRoute, middlewares);\n        });\n    });\n\n    app.addRouter(router);\n}\n\nexport default load_;\n"],"names":["load_","app","baseRoute","options","router","createRouter","$middlewares","useMiddlewares_","eachAsync_","methods","subRoute","pos","indexOf","InvalidConfiguration","embeddedMethod","substr","toLocaleLowerCase","text","ensureStartsWith","Array","isArray","get","middlewares","method","supportedMethods","has","addRoute_","addRouter"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgGA;;;eAAA;;;uBAhGoC;uBACC;yBACJ;AAEjC;;;CAGC,GAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCC,GACD,eAAeA,MAAMC,GAAG,EAAEC,SAAS,EAAEC,OAAO;IACxC,IAAIC,SAASH,IAAIG,MAAM,CAACC,YAAY,CAACH;IAErC,IAAIC,QAAQG,YAAY,EAAE;QACtB,MAAML,IAAIM,eAAe,CAACH,QAAQD,QAAQG,YAAY;IAC1D;IAEA,MAAME,IAAAA,iBAAU,EAACL,SAAS,OAAOM,SAASC;QACtC,IAAIA,QAAQ,CAAC,EAAE,KAAK,KAAK;YACrB;QACJ;QAEA,IAAIC,MAAMD,SAASE,OAAO,CAAC;QAE3B,IAAID,QAAQ,CAAC,GAAG;YACZ,IAAIA,QAAQ,GAAG;gBACX,MAAM,IAAIE,2BAAoB,CAC1B,gCAAgCH,UAChCT,KACA,CAAC,QAAQ,EAAEC,UAAU,YAAY,CAAC;YAE1C;YAEA,wBAAwB;YAExB,IAAIY,iBAAiBJ,SAASK,MAAM,CAAC,GAAGJ,KAAKK,iBAAiB;YAC9DN,WAAWA,SAASK,MAAM,CAACJ,MAAM;YAEjCF,UAAU;gBAAE,CAACK,eAAe,EAAEL;YAAQ;QAC1C;QAEAC,WAAWO,WAAI,CAACC,gBAAgB,CAACR,UAAU;QAE3C,IAAI,OAAOD,YAAY,YAAYU,MAAMC,OAAO,CAACX,UAAU;YACvDA,UAAU;gBAAEY,KAAKZ;YAAQ;QAC7B;QAEA,MAAMD,IAAAA,iBAAU,EAACC,SAAS,OAAOa,aAAaC;YAC1C,IAAI,CAACC,yBAAgB,CAACC,GAAG,CAACF,WAAWA,WAAW,OAAO;gBACnD,MAAM,IAAIV,2BAAoB,CAC1B,8BAA8BU,QAC9BtB,KACA,CAAC,QAAQ,EAAEC,UAAU,aAAa,EAAEQ,SAAS,CAAC,CAAC;YAEvD;YAEA,MAAMT,IAAIyB,SAAS,CAACtB,QAAQmB,QAAQb,UAAUY;QAClD;IACJ;IAEArB,IAAI0B,SAAS,CAACvB;AAClB;MAEA,WAAeJ"}