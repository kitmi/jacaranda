{"version":3,"sources":["../src/ServiceContainer.js"],"sourcesContent":["import ConfigLoader, { JsonConfigProvider, YamlConfigProvider } from '@kitmi/config';\nimport { _, pushIntoBucket, eachAsync_, batchAsync_, arrayToObject, esmCheck } from '@kitmi/utils';\nimport { fs, tryRequire as _tryRequire } from '@kitmi/sys';\nimport { InvalidConfiguration, ValidationError, ApplicationError } from '@kitmi/types';\nimport { Types } from '@kitmi/validators/allSync';\nimport { TopoSort } from '@kitmi/algo';\n\nimport path from 'node:path';\n\nimport Feature from './Feature';\nimport defaultOpts from './defaultOpts';\nimport AsyncEmitter from './helpers/AsyncEmitter';\nimport { consoleLogger, makeLogger } from './helpers/logger';\n\nimport runtime, { K_ENV, NS_MODULE } from './runtime';\n\nconst FILE_EXT = ['.js', '.mjs', '.cjs', '.ts'];\n\nexport function getNodeEnv() {\n    return process.env.NODE_ENV || 'development';\n}\n\nconst configOverrider = (defConf, envConf) => {\n    const { serviceGroup: defServiceGroup, ..._def } = defConf ?? {};\n    const { serviceGroup: envServiceGroup, ..._env } = envConf ?? {};\n\n    const serviceGroup = {};\n\n    if (defServiceGroup || envServiceGroup) {\n        defServiceGroup &&\n            _.each(defServiceGroup, (servicesMap, serviceName) => {\n                serviceGroup[serviceName] = servicesMap;\n            });\n\n        envServiceGroup &&\n            _.each(envServiceGroup, (servicesMap, serviceName) => {\n                serviceGroup[serviceName] = {\n                    ...serviceGroup[serviceName],\n                    ...servicesMap,\n                };\n            });\n    }\n\n    const ret = {\n        ..._def,\n        ..._env,\n    };\n\n    if (!_.isEmpty(serviceGroup)) {\n        ret.serviceGroup = serviceGroup;\n    }\n\n    return ret;\n};\n\n/**\n * Service container class.\n * @class\n */\nclass ServiceContainer extends AsyncEmitter {\n    _loggerLog = (...args) => {\n        this.logger.log(...args);\n        return this;\n    };\n\n    logError = (error, message) => {\n        return this.logException('error', error, message);\n    };\n\n    logErrorAsWarning = (error, message) => {\n        return this.logException('warn', error, message);\n    };\n\n    /**\n     * @param {string} name - The name of the container instance.\n     * @param {object} [options] - Container options\n     * @property {string} [options.workingPath] - App's working path, default to process.cwd()\n     * @property {string} [options.configPath=\"conf\"] - App's config path, default to \"conf\" under workingPath\n     * @property {string} [options.configName=\"app\"] - App's config basename, default to \"app\"\n     * @property {string} [options.configType=\"json\"] - App's config type, default to \"json\"\n     * @property {string} [options.disableEnvAwareConfig=false] - Don't use environment-aware config\n     * @property {array} [options.allowedFeatures] - A list of enabled feature names\n     * @property {boolean} [options.loadConfigFromOptions=false] - Whether to load config from passed-in options\n     * @property {object} [options.config] - Config in options, used only when loadConfigFromOptions\n     * @property {object} [options.registry] - Preloaded modules\n     */\n    constructor(name, options) {\n        super();\n\n        /**\n         * Name of the app\n         * @member {object}\n         **/\n        this.name = name;\n\n        /**\n         * App options\n         * @member {object}\n         */\n        this.options = {\n            ...defaultOpts,\n            ...options,\n        };\n\n        /**\n         * Working directory of this cli app\n         * @member {string}\n         */\n        this.workingPath = this.options.workingPath ? path.resolve(this.options.workingPath) : process.cwd();\n\n        /**\n         * Config path\n         * @member {string}\n         */\n        this.configPath = this.toAbsolutePath(this.options.configPath);\n\n        /**\n         * Source files path.\n         * @member {string}\n         **/\n        this.sourcePath = this.toAbsolutePath(this.options.sourcePath);\n\n        /**\n         * Feature path\n         */\n        this.featuresPath = path.resolve(this.sourcePath, this.options.featuresPath);\n\n        // preloaded modules\n        // { apps, libs, models }\n        this.registry = { ...this.options.registry };\n\n        this._logCache = [];\n\n        // dummy\n        this.log = (...args) => {\n            this._logCache.push(args);\n            return this;\n        };\n    }\n\n    /**\n     * Start the container.\n     * @fires ServiceContainer#configLoaded\n     * @fires ServiceContainer#ready\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async start_() {\n        this.log('verbose', `Starting app [${this.name}] ...`);\n\n        await this.emit_('starting', this);\n\n        this._featureRegistry = {\n            //firstly look up \"features\" under current working path, and then try the builtin features path\n            '*': this._getFeatureFallbackPath(),\n        };\n\n        /**\n         * Loaded features, name => feature object\n         * @member {object}\n         */\n        this.features = {};\n\n        /**\n         * Loaded services\n         * @member {object}\n         */\n        this.services = {};\n\n        if (this.options.loadConfigFromOptions) {\n            this.config = this.options.config;\n        } else {\n            let configLoader;\n\n            if (this.options.configType === 'yaml') {\n                configLoader = this.options.disableEnvAwareConfig\n                    ? new ConfigLoader(\n                          new YamlConfigProvider(path.join(this.configPath, this.options.configName + '.yaml')),\n                          this\n                      )\n                    : ConfigLoader.createEnvAwareYamlLoader(\n                          this.configPath,\n                          this.options.configName,\n                          getNodeEnv(),\n                          this,\n                          configOverrider\n                      );\n            } else {\n                configLoader = this.options.disableEnvAwareConfig\n                    ? new ConfigLoader(\n                          new JsonConfigProvider(path.join(this.configPath, this.options.configName + '.json')),\n                          this\n                      )\n                    : ConfigLoader.createEnvAwareJsonLoader(\n                          this.configPath,\n                          this.options.configName,\n                          getNodeEnv(),\n                          this,\n                          configOverrider\n                      );\n            }\n\n            /**\n             * Configuration loader instance\n             * @member {ConfigLoader}\n             */\n            this.configLoader = configLoader;\n\n            await this.loadConfig_();\n        }\n\n        /**\n         * Config loaded event.\n         * @event ServiceContainer#configLoaded\n         */\n        await this.emit_('configLoaded', this.config);\n\n        if (!_.isEmpty(this.config)) {\n            await this._loadFeatures_();\n        } else {\n            this.log('verbose', `Empty configuration! Config path: ${this.configPath}`);\n            this.flushLogCache();\n        }\n\n        /**\n         * App ready\n         * @event ServiceContainer#ready\n         */\n        await this.emit_('ready', this);\n\n        /**\n         * Flag showing the app is started or not.\n         * @member {bool}\n         */\n        this.started = true;\n\n        return this;\n    }\n\n    /**\n     * Stop the container\n     * @fires ServiceContainer#stopping\n     * @returns {Promise.<ServiceContainer>}\n     */\n    async stop_() {\n        /**\n         * App stopping\n         * @event ServiceContainer#stopping\n         */\n        await this.emit_('stopping', this);\n\n        this.log('verbose', `Stopping app [${this.name}] ...`);\n\n        this.started = false;\n\n        delete this.services;\n        delete this.features;\n        delete this._featureRegistry;\n\n        delete this.config;\n        delete this.configLoader;\n\n        await this.emit_('stopped', this);\n\n        this.allOff();\n    }\n\n    /**\n     * @returns {ServiceContainer}\n     */\n    async loadConfig_() {\n        let configVariables = this.getRuntimeVariables();\n\n        /**\n         * App configuration\n         * @member {object}\n         */\n        this.config = await this.configLoader.load_(configVariables);\n\n        return this;\n    }\n\n    /**\n     * Translate a relative path of this app module to an absolute path\n     * @param {array} args - Array of path parts\n     * @returns {string}\n     */\n    toAbsolutePath(...args) {\n        args = args.filter((arg) => arg != null);\n        if (args.length === 0) {\n            return this.workingPath;\n        }\n\n        return path.resolve(this.workingPath, ...args);\n    }\n\n    /**\n     * Require a module from the runtime registry\n     * @param {*} moduleName \n     * @returns {*}\n     */\n    requireModule(moduleName) {\n        const m = runtime.get(NS_MODULE, moduleName);\n        if (m == null) {\n            throw new ApplicationError(`Module \"${moduleName}\" not found in runtime registry.`);\n        }\n        return m;\n    }\n\n    tryRequire(pkgName, local) {\n        return esmCheck(local ? require(pkgName) : _tryRequire(pkgName, this.workingPath));\n    }\n\n    /**\n     * Try to require a package, if it's an esm module, import it.\n     * @param {*} pkgName\n     * @param {*} useDefault\n     * @returns {*}\n     */\n    async tryRequire_(pkgName, useDefault) {\n        try {\n            return this.tryRequire(pkgName);\n        } catch (error) {\n            if (error.code === 'ERR_REQUIRE_ESM') {\n                console.log('ERR_REQUIRE_ESM', pkgName);\n                try {\n                    const esmModule = await import(pkgName);\n                    console.log('feiojfiaojfoejfaoj');\n                    if (useDefault) {\n                        return esmModule.default;\n                    }\n                    return esmModule;\n                } catch (error) {\n                    console.log(error);\n                    throw error;\n                }\n            }\n            throw error;\n        }\n    }\n\n    /**\n     * Register a service\n     * @param {string} name\n     * @param {object} serviceObject\n     * @param {boolean} override\n     * @returns {ServiceContainer}\n     */\n    registerService(name, serviceObject, override) {\n        if (name in this.services && !override) {\n            throw new Error('Service \"' + name + '\" already registered!');\n        }\n\n        this.services[name] = serviceObject;\n        this.log('verbose', `Service \"${name}\" registered.`);\n        return this;\n    }\n\n    /**\n     * Check whether a service exists\n     * @param {*} name\n     * @returns {boolean}\n     */\n    hasService(name) {\n        return name in this.services;\n    }\n\n    /**\n     * Get a service from module hierarchy\n     * @param name\n     * @returns {object}\n     */\n    getService(name) {\n        return this.services[name];\n    }\n\n    /**\n     * Check whether a feature is enabled in the app.\n     * @param {string} feature\n     * @returns {bool}\n     */\n    enabled(feature) {\n        return this.features[feature]?.enabled || this.host?.enabled(feature) || false;\n    }\n\n    /**\n     * Add more or overide current feature registry\n     * @param {object} registry\n     */\n    addFeatureRegistry(registry) {\n        // * is used as the fallback location to find a feature\n        if (registry.hasOwnProperty('*')) {\n            pushIntoBucket(this._featureRegistry, '*', registry['*']);\n        }\n\n        Object.assign(this._featureRegistry, _.omit(registry, ['*']));\n    }\n\n    /**\n     * Helper method to log an exception\n     * @param {*} level\n     * @param {*} error\n     * @param {*} summary\n     * @returns {ServiceContainer}\n     */\n    logException(level, error, summary) {\n        this.log(\n            level,\n            (summary ? summary + '\\n' : '') + error.message,\n            _.pick(error, ['name', 'status', 'code', 'info', 'stack', 'request'])\n        );\n        return this;\n    }\n\n    trace(...args) {\n        return this.log('trace', ...args);\n    }\n\n    debug(...args) {\n        return this.log('debug', ...args);\n    }\n\n    verbose(...args) {\n        return this.log('verbose', ...args);\n    }\n\n    info(...args) {\n        return this.log('info', ...args);\n    }\n\n    warn(...args) {\n        return this.log('warn', ...args);\n    }\n\n    error(...args) {\n        return this.log('error', ...args);\n    }\n\n    featureConfig(config, typeInfo, name) {\n        return this.sanitize(config, typeInfo, name);\n    }\n\n    sanitize(config, typeInfo, name, category) {\n        try {\n            return Types.OBJECT.sanitize(config, { type: 'object', ...typeInfo }, this.i18n, name);\n        } catch (err) {\n            let message;\n\n            if (err instanceof ValidationError) {\n                message = ValidationError.formatError(err);\n            } else {\n                message = err.message;\n            }\n            throw new InvalidConfiguration(message, this, category ? `${category}::${name}` : name);\n        }\n    }\n\n    requireServices(services) {\n        const notRegisterred = _.find(_.castArray(services), (service) => !this.hasService(service));\n\n        if (notRegisterred) {\n            throw new ApplicationError(`Service \"${notRegisterred}\" is required.`);\n        }\n    }\n\n    getRuntime(...args) {\n        if (args.length === 0) {\n            return runtime;\n        }\n\n        return runtime.get(...args);        \n    }\n\n    getRuntimeVariables() {\n        const processInfo = {\n            arch: process.arch, // The operating system CPU architecture， 'arm', 'arm64','x64', ...\n            cwd: process.cwd(),\n            pid: process.pid,\n            platform: process.platform,\n        };\n\n        return {\n            app: {\n                name: this.name,\n                workingPath: this.workingPath,\n                configPath: this.configPath,\n                sourcePath: this.sourcePath,\n                featuresPath: this.featuresPath,\n                options: this.options,\n            },\n            env: runtime.get(K_ENV) ?? {},\n            process: processInfo,\n        };\n    }\n\n    _getFeatureFallbackPath() {\n        return [path.resolve(__dirname, 'features'), this.featuresPath];\n    }\n\n    _sortFeatures(features) {\n        if (features.length === 0) {\n            return features;\n        }\n\n        const topoSort = new TopoSort();\n        features.forEach(([feature]) => {\n            topoSort.depends(feature.name, feature.depends);\n        });\n\n        const groups = arrayToObject(features, ([feature]) => feature.name);\n        const keys = topoSort.sort();\n\n        const sorted = [];\n        keys.forEach((key) => {\n            const feature = groups[key];\n            if (feature) {\n                sorted.push(feature);\n            } else {\n                if (!this.enabled(key)) {\n                    throw new InvalidConfiguration(`A prerequisite feature \"${key}\" is not enabled.`, this);\n                }\n            }\n        });\n\n        return sorted;\n    }\n\n    flushLogCache() {\n        if (this.runnable && !('logger' in this.config)) {\n            const _makeLogger = (logLevel, channel) => ({\n                log: makeLogger(consoleLogger, logLevel, channel),\n                child: (arg1, arg2) => _makeLogger(arg2?.level || logLevel, arg1?.module),\n            });\n            this.logger = _makeLogger(this.options.logLevel);\n            this.log = this._loggerLog;\n            this._logCache.forEach((log) => this.logger.log(...log));\n            this._logCache.length = 0;\n        }\n    }\n\n    /**\n     * Load features\n     * @private\n     * @returns {bool}\n     */\n    async _loadFeatures_() {\n        try {\n            // run config stage separately first\n            let configStageFeatures = [];\n\n            // load features\n            await batchAsync_(this.config, async (featureOptions, name) => {\n                if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                    //skip disabled features\n                    return;\n                }\n\n                if (this.options.ignoreFeatures && this.options.ignoreFeatures.indexOf(name) !== -1) {\n                    //ignore features, useful for worker to use the same config with server\n                    return;\n                }\n\n                let feature;\n                try {\n                    feature = await this._loadFeature_(name);\n                } catch (err) {\n                    //ignore the first trial\n                    //this.log('warn', err.message, { err });\n                }\n\n                if (feature && feature.stage === Feature.CONF) {\n                    configStageFeatures.push([feature, featureOptions]);\n                    delete this.config[name];\n                }\n            });\n\n            if (configStageFeatures.length > 0) {\n                await this._loadFeatureGroup_(configStageFeatures, Feature.CONF);\n\n                //reload all features if any type of configuration feature exists\n                return this._loadFeatures_();\n            }\n        } finally {\n            // if no logger in config, use console logger\n            this.flushLogCache();\n        }\n\n        await this.emit_('configFinalized', this.config);\n\n        if (this.options.logConfig && (this.options.logLevel === 'debug' || this.options.logLevel === 'verbose')) {\n            this.log('verbose', 'Finalized config:', this.config);\n        }\n\n        let featureGroups = {\n            [Feature.INIT]: [],\n            [Feature.SERVICE]: [],\n            [Feature.PLUGIN]: [],\n            [Feature.FINAL]: [],\n        };\n\n        // load features\n        await batchAsync_(this.config, async (featureOptions, name) => {\n            if (this.options.allowedFeatures && this.options.allowedFeatures.indexOf(name) === -1) {\n                //skip disabled features\n                return;\n            }\n\n            let feature = await this._loadFeature_(name);\n\n            if (!(feature.stage in featureGroups)) {\n                throw new Error(`Invalid feature stage. Feature: ${name}, type: ${feature.stage}`);\n            }\n\n            featureGroups[feature.stage].push([feature, featureOptions]);\n        });\n\n        return eachAsync_(featureGroups, (group, stage) => this._loadFeatureGroup_(group, stage));\n    }\n\n    async _loadFeatureGroup_(featureGroup, groupStage) {\n        featureGroup = this._sortFeatures(featureGroup);\n\n        await this.emit_('before:' + groupStage);\n        this.log('verbose', `Loading \"${groupStage}\" feature group ...`);\n\n        await eachAsync_(featureGroup, async ([feature, options]) => {\n            const { name, depends } = feature;\n            await this.emit_('before:load:' + name);\n            this.log('verbose', `Loading feature \"${name}\" ...`);\n\n            depends && this._dependsOn(depends, name);\n\n            await feature.load_(this, options, name);\n            this.features[name].enabled = true;\n            this.log('verbose', `Feature \"${name}\" loaded. [OK]`);\n\n            await this.emit_('after:load:' + name);\n        });\n        this.log('verbose', `Finished loading \"${groupStage}\" feature group. [OK]`);\n\n        await this.emit_('after:' + groupStage);\n    }\n\n    _dependsOn(features, fromFeature) {\n        let hasNotEnabled = _.find(_.castArray(features), (feature) => !this.enabled(feature));\n\n        if (hasNotEnabled) {\n            throw new Error(`The \"${hasNotEnabled}\" feature depended by \"${fromFeature}\" feature is not enabled.`);\n        }\n    }\n\n    /**\n     * Load a feature object by name.\n     * @private\n     * @param {string} feature\n     * @returns {object}\n     */\n    async _loadFeature_(feature) {\n        let featureObject = this.features[feature];\n        if (featureObject) return featureObject;\n\n        let featurePath;\n\n        featureObject = this.registry?.features?.[feature];\n        if (featureObject == null) {\n            if (this._featureRegistry.hasOwnProperty(feature)) {\n                //load by registry entry\n                let loadOption = this._featureRegistry[feature];\n\n                if (Array.isArray(loadOption)) {\n                    if (loadOption.length === 0) {\n                        throw new Error(`Invalid registry value for feature \"${feature}\".`);\n                    }\n\n                    featurePath = loadOption[0];\n                    featureObject = await this.tryRequire_(featurePath);\n\n                    if (loadOption.length > 1) {\n                        //one module may contains more than one feature\n                        featureObject = _.get(featureObject, loadOption[1]);\n                    }\n                } else {\n                    featurePath = loadOption;\n                    featureObject = await this.tryRequire_(featurePath);\n                }\n            } else {\n                //load by fallback paths\n                let searchingPath = this._featureRegistry['*'];\n\n                //reverse fallback stack\n                let found = _.findLast(searchingPath, (p) =>\n                    FILE_EXT.find((ext) => {\n                        featurePath = path.join(p, feature + ext);\n                        return fs.existsSync(featurePath);\n                    })\n                );\n\n                if (!found) {\n                    throw new InvalidConfiguration(`Don't know where to load feature \"${feature}\".`, this, {\n                        feature,\n                        searchingPath: searchingPath.join('\\n'),\n                    });\n                }\n\n                featureObject = this.tryRequire(featurePath);\n            }\n        }\n\n        if (!Feature.validate(featureObject)) {\n            throw new Error(`Invalid feature object loaded from \"${featurePath}\".`);\n        }\n\n        if (!featureObject.stage) {\n            featureObject.stage = Feature.SERVICE;\n        }\n\n        featureObject.name = feature;\n        this.features[feature] = featureObject;\n        return featureObject;\n    }\n}\n\nexport default ServiceContainer;\n"],"names":["getNodeEnv","FILE_EXT","process","env","NODE_ENV","configOverrider","defConf","envConf","serviceGroup","defServiceGroup","_def","envServiceGroup","_env","_","each","servicesMap","serviceName","ret","isEmpty","ServiceContainer","AsyncEmitter","start_","log","name","emit_","_featureRegistry","_getFeatureFallbackPath","features","services","options","loadConfigFromOptions","config","configLoader","configType","disableEnvAwareConfig","ConfigLoader","YamlConfigProvider","path","join","configPath","configName","createEnvAwareYamlLoader","JsonConfigProvider","createEnvAwareJsonLoader","loadConfig_","_loadFeatures_","flushLogCache","started","stop_","allOff","configVariables","getRuntimeVariables","load_","toAbsolutePath","args","filter","arg","length","workingPath","resolve","requireModule","moduleName","m","runtime","get","NS_MODULE","ApplicationError","tryRequire","pkgName","local","esmCheck","require","_tryRequire","tryRequire_","useDefault","error","code","console","esmModule","default","registerService","serviceObject","override","Error","hasService","getService","enabled","feature","host","addFeatureRegistry","registry","hasOwnProperty","pushIntoBucket","Object","assign","omit","logException","level","summary","message","pick","trace","debug","verbose","info","warn","featureConfig","typeInfo","sanitize","category","Types","OBJECT","type","i18n","err","ValidationError","formatError","InvalidConfiguration","requireServices","notRegisterred","find","castArray","service","getRuntime","processInfo","arch","cwd","pid","platform","app","sourcePath","featuresPath","K_ENV","__dirname","_sortFeatures","topoSort","TopoSort","forEach","depends","groups","arrayToObject","keys","sort","sorted","key","push","runnable","_makeLogger","logLevel","channel","makeLogger","consoleLogger","child","arg1","arg2","module","logger","_loggerLog","_logCache","configStageFeatures","batchAsync_","featureOptions","allowedFeatures","indexOf","ignoreFeatures","_loadFeature_","stage","Feature","CONF","_loadFeatureGroup_","logConfig","featureGroups","INIT","SERVICE","PLUGIN","FINAL","eachAsync_","group","featureGroup","groupStage","_dependsOn","fromFeature","hasNotEnabled","featureObject","featurePath","loadOption","Array","isArray","searchingPath","found","findLast","p","ext","fs","existsSync","validate","constructor","logError","logErrorAsWarning","defaultOpts"],"rangeMappingsmappings":"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"}