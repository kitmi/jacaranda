{"version":3,"sources":["../../src/starters/loopWorker.js"],"sourcesContent":["import { sleep_ } from '@kitmi/utils';\nimport startWorker from './worker';\n\n/**\n *\n * @param {Function} worker\n * @param {object} options\n * @property {integer} [options.interval=1000]\n */\nasync function startLoopWorker(worker, options) {\n    let { interval, ...workerOptions } = { interval: 1000, throwOnError: true, ...options };\n\n    return startWorker(async (app) => {\n        process.once('SIGINT', () => {\n            app.stop_()\n                .then(() => {})\n                .catch((error) => console.error(error.message || error));\n        });\n\n        let lastResult;\n\n        while (app.started) {\n            lastResult = await worker(app, lastResult);\n            if (app.started) {\n                await sleep_(interval);\n            }\n        }\n\n        return lastResult;\n    }, workerOptions);\n}\n\nexport default startLoopWorker;\n"],"names":["startLoopWorker","worker","options","interval","workerOptions","throwOnError","startWorker","app","process","once","stop_","then","catch","error","console","message","lastResult","started","sleep_"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAgCA;;;eAAA;;;uBAhCuB;+DACC;;;;;;AAExB;;;;;CAKC,GACD,eAAeA,gBAAgBC,MAAM,EAAEC,OAAO;IAC1C,IAAI,EAAEC,QAAQ,EAAE,GAAGC,eAAe,GAAG;QAAED,UAAU;QAAME,cAAc;QAAM,GAAGH,OAAO;IAAC;IAEtF,OAAOI,IAAAA,eAAW,EAAC,OAAOC;QACtBC,QAAQC,IAAI,CAAC,UAAU;YACnBF,IAAIG,KAAK,GACJC,IAAI,CAAC,KAAO,GACZC,KAAK,CAAC,CAACC,QAAUC,QAAQD,KAAK,CAACA,MAAME,OAAO,IAAIF;QACzD;QAEA,IAAIG;QAEJ,MAAOT,IAAIU,OAAO,CAAE;YAChBD,aAAa,MAAMf,OAAOM,KAAKS;YAC/B,IAAIT,IAAIU,OAAO,EAAE;gBACb,MAAMC,IAAAA,aAAM,EAACf;YACjB;QACJ;QAEA,OAAOa;IACX,GAAGZ;AACP;MAEA,WAAeJ"}