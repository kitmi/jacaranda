{"version":3,"sources":["../src/Routable.js"],"sourcesContent":["import path from 'node:path';\nimport { fs, isDir } from '@kitmi/sys';\nimport { globSync } from 'glob';\nimport { _, url as urlUtil, text, isPlainObject, eachAsync_ } from '@kitmi/utils';\nimport { ApplicationError, InvalidConfiguration, InvalidArgument } from '@kitmi/types';\nimport { defaultRoutableOpts } from './defaultServerOpts';\n\nconst Routable = (T) =>\n    class extends T {\n        /**\n         * @param {string} name - The name of the routable instance.\n         * @param {object} [options] - Routable options\n         * @property {string} [options.backendPath='server'] - Relative path of back-end server source files\n         * @property {string} [options.clientPath='client'] - Relative path of front-end client source files\n         * @property {string} [options.publicPath='public'] - Relative path of front-end static files\n         */\n        constructor(name, options) {\n            super(name, { ...defaultRoutableOpts, ...options });\n\n            /**\n             * Frontend static files path.\n             * @member {string}\n             **/\n            this.publicPath = this.toAbsolutePath(this.options.publicPath);\n\n            this.controllersPath = path.resolve(this.sourcePath, this.options.controllersPath);\n\n            this.middlewaresPath = path.resolve(this.sourcePath, this.options.middlewaresPath);\n\n            this.routable = true;\n\n            this._middlewareRegistry = {};\n\n            this.on('configLoaded', () => {\n                //load middlewares if exists in server or app path\n                if (fs.pathExistsSync(this.middlewaresPath) && isDir(this.middlewaresPath)) {\n                    this.addMiddlewaresRegistryFrom(this.middlewaresPath);\n                }\n            });            \n        }\n\n        async start_() {\n            /**\n             * Middleware factory registry.\n             * @member {object}\n             */\n            this._middlewareFactories = {};\n\n            await super.start_();\n\n            if (\n                this.options.logMiddlewareRegistry &&\n                (this.options.logLevel === 'verbose' || this.options.logLevel === 'debug')\n            ) {\n                this.log('verbose', 'Registered middlewares:', this._middlewareRegistry);\n            }\n\n            return this;\n        }\n\n        async stop_() {\n            delete this._middlewareFactories;\n\n            return super.stop_();\n        }\n\n        /**\n         * Load and regsiter middleware files from a specified path.\n         * @param dir\n         */\n        addMiddlewaresRegistryFrom(dir) {\n            let files = globSync(path.join(dir, '**/*.{js,ts,mjs,cjs}'), { nodir: true });\n            files.forEach((file) => this._middlewareRegistry[text.baseName(file)] = file);\n        }\n\n        /**\n         * Register middleware files from a registry.\n         * @param {object} registry \n         */\n        addMiddlewaresRegistry(registry) {\n            Object.assign(this._middlewareRegistry, registry);\n        }\n\n        /**\n         * Register the factory method of a named middleware.\n         * @param {string} name - The name of the middleware\n         * @param {function} factoryMethod - The factory method of a middleware\n         */\n        registerMiddlewareFactory(name, factoryMethod) {\n            if (typeof factoryMethod !== 'function') {\n                if (factoryMethod.__esModule && typeof factoryMethod.default === 'function') {\n                    factoryMethod = factoryMethod.default;\n                } else {\n                    throw new InvalidArgument('Invalid middleware factory: ' + name);\n                }\n            }\n\n            if (name in this._middlewareFactories) {\n                throw new ApplicationError('Middleware \"' + name + '\" already registered!');\n            }\n\n            this._middlewareFactories[name] = factoryMethod;\n            this.log('verbose', `Registered named middleware [${name}].`);\n        }\n\n        /**\n         * Get the factory method of a middleware from module hierarchy.\n         * @param name\n         * @returns {function}\n         */\n        getMiddlewareFactory(name) {\n            const factory = this._middlewareFactories[name];\n            if (factory != null) {\n                return factory;\n            }\n\n            const registryEntry = this._middlewareRegistry[name];\n            if (registryEntry != null) {\n                let file = registryEntry;\n                let exportName;\n\n                if (Array.isArray(registryEntry)) {\n                    file = registryEntry[0];\n                    exportName = registryEntry[1];\n                }\n\n                let middlewareFactory = this.tryRequire(file);\n                if (exportName) {\n                    middlewareFactory = _.get(middlewareFactory, exportName);\n                }\n\n                this._middlewareFactories[name] = middlewareFactory;\n                return middlewareFactory;\n            }\n\n            if (this.server && !this.isServer) {\n                return this.server.getMiddlewareFactory(name);\n            }\n\n            throw new ApplicationError(`Middleware \"${name}\" not found in middleware registry.`);\n        }\n\n        /**\n         * Use middlewares by creating middleware instances (asynchronously) from factory methods and attach them to a router.\n         * @param {Router} router\n         * @param {*} middlewares - Can be an array of middleware entries or a key-value list of registerred middlewares\n         * @returns {Routable}\n         */\n        async useMiddlewares_(router, middlewares) {\n            let middlewareFactory, middleware;\n            let middlewareFunctions = [];\n\n            if (isPlainObject(middlewares)) {\n                await eachAsync_(middlewares, async (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    middleware = await middlewareFactory(options, this);\n                    middlewareFunctions.push({ name, middleware });\n                });\n            } else {\n                middlewares = _.castArray(middlewares);\n\n                await eachAsync_(middlewares, async (middlewareEntry) => {\n                    let type = typeof middlewareEntry;\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry);\n                        middleware = await middlewareFactory(undefined, this);\n                        middlewareFunctions.push({ name: middlewareEntry, middleware });\n                    } else if (type === 'function') {\n                        middlewareFunctions.push({\n                            name: middlewareEntry.name || 'unamed middleware',\n                            middleware: middlewareEntry,\n                        });\n                    } else if (Array.isArray(middlewareEntry)) {\n                        // [ [ 'namedMiddleware', config ] ]\n                        if (middlewareEntry.length === 0) {\n                            throw new InvalidConfiguration(\n                                'Empty array found as middleware entry!',\n                                this,\n                                'middlewares'\n                            );\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);\n                        middleware = await middlewareFactory(\n                            middlewareEntry.length > 1 ? middlewareEntry[1] : null,\n                            this\n                        );\n                        middlewareFunctions.push({ name: middlewareEntry[0], middleware });\n                    } else {\n                        if (!isPlainObject(middlewareEntry) || !('name' in middlewareEntry)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);\n                        middleware = await middlewareFactory(middlewareEntry.options, this);\n                        middlewareFunctions.push({ name: middlewareEntry.name, middleware });\n                    }\n                });\n            }\n\n            middlewareFunctions.forEach(({ name, middleware }) => {\n                if (Array.isArray(middleware)) {\n                    middleware.forEach((m) => this.useMiddleware(router, m, name));\n                } else {\n                    this.useMiddleware(router, middleware, name);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Add a route to a router, skipped while the server running in deaf mode.\n         * @param router\n         * @param method\n         * @param route\n         * @param actions\n         */\n        async addRoute_(router, method, route, actions) {\n            let handlers = [],\n                middlewareFactory;\n\n            if (isPlainObject(actions)) {\n                await eachAsync_(actions, async (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    handlers.push(this._wrapMiddlewareTracer(await middlewareFactory(options, this), name));\n                });\n            } else {\n                actions = _.castArray(actions);\n                let lastIndex = actions.length - 1;\n\n                await eachAsync_(actions, async (action, i) => {\n                    let type = typeof action;\n\n                    if (i === lastIndex) {\n                        // last middleware may be an action\n                        if (type === 'string' && action.lastIndexOf('.') > 0) {\n                            action = {\n                                name: 'action',\n                                options: action,\n                            };\n\n                            type = 'object';\n                        }\n                    }\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(action);\n\n                        let middleware = await middlewareFactory(null, this);\n\n                        //in case it's register by the middlewareFactory feature\n                        if (Array.isArray(middleware)) {\n                            middleware.forEach((middlewareItem, i) =>\n                                handlers.push(\n                                    this._wrapMiddlewareTracer(\n                                        middlewareItem,\n                                        `${action}-${i}` + (middleware.name ? '-' + middleware.name : '')\n                                    )\n                                )\n                            );\n                        } else {\n                            handlers.push(this._wrapMiddlewareTracer(middleware, action));\n                        }\n                    } else if (type === 'function') {\n                        handlers.push(this._wrapMiddlewareTracer(action));\n                    } else if (Array.isArray(action)) {\n                        if (action.length === 0 || action.length > 2) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action[0]);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(\n                                await middlewareFactory(action.length > 1 ? action[1] : undefined, this)\n                            )\n                        );\n                    } else {\n                        if (typeof action !== 'object' || !('name' in action)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action.name);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(await middlewareFactory(action.options, this), action.name)\n                        );\n                    }\n                });\n            }\n\n            router[method](route, ...handlers);\n\n            let endpoint = router.opts.prefix\n                ? urlUtil.join(this.route, router.opts.prefix, route)\n                : urlUtil.join(this.route, route);\n\n            this.log('verbose', `Route \"${method}:${endpoint}\" is added from module [${this.name}].`);\n\n            return this;\n        }\n\n        requireFeatures(features, middleware) {\n            const hasNotEnabled = _.find(_.castArray(features), (feature) => !this.enabled(feature));\n\n            if (hasNotEnabled) {\n                throw new InvalidConfiguration(\n                    `Middleware \"${middleware}\" requires \"${hasNotEnabled}\" feature to be enabled.`,\n                    this,\n                    `middlewares.${middleware}`\n                );\n            }\n        }\n\n        requireServices(services, middleware) {\n            const notRegisterred = _.find(_.castArray(services), (service) => !this.hasService(service));\n\n            if (notRegisterred) {\n                throw new InvalidConfiguration(\n                    `Middleware \"${middleware}\" requires \"${notRegisterred}\" service to be registerred.`,\n                    this,\n                    `middlewares.${middleware}`\n                );\n            }\n        }\n\n        /**\n         * Attach a router to this app module, skipped while the server running in deaf mode\n         * @param {Router} nestedRouter\n         */\n        addRouter(nestedRouter, baseRoute) {\n            if (this.router == null) {\n                // if mount to server level\n                this.router = this.engine.createModuleRouter(this);\n                this.engine.mount('/', this.router);\n            }\n\n            this.router.attach(nestedRouter, baseRoute);\n            return this;\n        }\n\n        /**\n         * Translate a relative path and query parameters if any to a url path\n         * @param {string} relativePath - Relative path\n         * @param {...*} [pathOrQuery] - Queries\n         * @returns {string}\n         */\n        toWebPath(relativePath, ...pathOrQuery) {\n            let url, query;\n\n            if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {\n                if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {\n                    query = pathOrQuery.pop();\n                }\n                pathOrQuery.unshift(relativePath);\n                url = urlUtil.join(this.route, ...pathOrQuery);\n            } else {\n                url = urlUtil.join(this.route, relativePath);\n            }\n\n            url = text.ensureStartsWith(url, '/');\n\n            if (query) {\n                url = urlUtil.appendQuery(url, query);\n                url = url.replace('/?', '?');\n            }\n\n            return url;\n        }\n\n        /**\n         * Attach a middleware to a router.\n         * @param {Router} router - The router to attach the middleware\n         * @param {function} middleware - (ctx, next) => ()\n         * @param {String} name - The name of the middleware\n         */\n        useMiddleware(router, middleware, name) {\n            if (typeof middleware !== 'function') {\n                throw new InvalidArgument('Invalid middleware.', { name, middleware });\n            }\n\n            router.use(this._wrapMiddlewareTracer(middleware, name));\n            this.log('verbose', `Attached middleware [${name}].`);\n        }\n\n        middlewareConfig(config, typeInfo, name) {\n            return this.sanitize(config, typeInfo, name, 'middlewares');\n        }\n\n        _wrapMiddlewareTracer(middleware, name) {\n            if (this.options.traceMiddlewares) {\n                return async (ctx, next) => {\n                    this.log('debug', `Step in middleware \"${name || middleware.name}\" ...`);\n                    let ret = await middleware(ctx, next);\n                    this.log('debug', `Step out from middleware \"${name || middleware.name}\".`);\n                    return ret;\n                };\n            }\n\n            return middleware;\n        }\n\n        _getFeatureFallbackPath() {\n            let pathArray = super._getFeatureFallbackPath();\n            pathArray.splice(1, 0, path.resolve(__dirname, 'webFeatures'));\n\n            return pathArray;\n        }\n    };\n\nexport default Routable;\n"],"names":["Routable","T","start_","_middlewareFactories","options","logMiddlewareRegistry","logLevel","log","_middlewareRegistry","stop_","addMiddlewaresRegistryFrom","dir","files","globSync","path","join","nodir","forEach","file","text","baseName","addMiddlewaresRegistry","registry","Object","assign","registerMiddlewareFactory","name","factoryMethod","__esModule","default","InvalidArgument","ApplicationError","getMiddlewareFactory","factory","registryEntry","exportName","Array","isArray","middlewareFactory","tryRequire","_","get","server","isServer","useMiddlewares_","router","middlewares","middleware","middlewareFunctions","isPlainObject","eachAsync_","push","castArray","middlewareEntry","type","undefined","length","InvalidConfiguration","m","useMiddleware","addRoute_","method","route","actions","handlers","_wrapMiddlewareTracer","lastIndex","action","i","lastIndexOf","middlewareItem","endpoint","opts","prefix","urlUtil","requireFeatures","features","hasNotEnabled","find","feature","enabled","requireServices","services","notRegisterred","service","hasService","addRouter","nestedRouter","baseRoute","engine","createModuleRouter","mount","attach","toWebPath","relativePath","pathOrQuery","url","query","isObject","pop","unshift","ensureStartsWith","appendQuery","replace","use","middlewareConfig","config","typeInfo","sanitize","traceMiddlewares","ctx","next","ret","_getFeatureFallbackPath","pathArray","splice","resolve","__dirname","constructor","defaultRoutableOpts","publicPath","toAbsolutePath","controllersPath","sourcePath","middlewaresPath","routable","on","fs","pathExistsSync","isDir"],"mappings":"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"}