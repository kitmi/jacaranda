{"version":3,"sources":["../src/Routable.js"],"sourcesContent":["import path from 'node:path';\nimport { _, url as urlUtil, text, isPlainObject, eachAsync_ } from '@kitmi/utils';\nimport { ApplicationError, InvalidConfiguration, InvalidArgument } from '@kitmi/types';\nimport { defaultRoutableOpts } from './defaultServerOpts';\n\nconst Routable = (T) =>\n    class extends T {\n        /**\n         * @param {string} name - The name of the routable instance.\n         * @param {object} [options] - Routable options\n         * @property {string} [options.controllersPath='actions'] - Relative path of controller source files\n         * @property {string} [options.publicPath='public'] - Relative path of front-end static files\n         */\n        constructor(name, options) {\n            super(name, { ...defaultRoutableOpts, ...options });\n\n            /**\n             * Frontend static files path.\n             * @member {string}\n             **/\n            this.publicPath = this.toAbsolutePath(this.options.publicPath);\n\n            this.controllersPath = path.resolve(this.sourcePath, this.options.controllersPath);\n\n            this.routable = true;\n        }\n\n        async start_() {\n            /**\n             * Middleware factory registry.\n             * @member {object}\n             */\n            this._middlewareFactories = {};\n\n            await super.start_();\n\n            if (\n                this.options.logMiddlewareRegistry &&\n                (this.options.logLevel === 'verbose' || this.options.logLevel === 'debug')\n            ) {\n                this.log(\n                    'verbose',\n                    'Registered middlewares:',\n                    { middlewares: this.registry.middlewares ? Object.keys(this.registry.middlewares) : [] }\n                );\n            }\n\n            return this;\n        }\n\n        async stop_() {\n            delete this._middlewareFactories;\n\n            return super.stop_();\n        }\n\n        /**\n         * Register the factory method of a named middleware.\n         * @param {string} name - The name of the middleware\n         * @param {function} factoryMethod - The factory method of a middleware\n         */\n        registerMiddlewareFactory(name, factoryMethod) {\n            if (typeof factoryMethod !== 'function') {\n                if (factoryMethod.__esModule && typeof factoryMethod.default === 'function') {\n                    factoryMethod = factoryMethod.default;\n                } else {\n                    throw new InvalidArgument('Invalid middleware factory: ' + name);\n                }\n            }\n\n            if (name in this._middlewareFactories) {\n                throw new ApplicationError('Middleware \"' + name + '\" already registered!');\n            }\n\n            this._middlewareFactories[name] = factoryMethod;\n            this.log('verbose', `Registered named middleware [${name}].`);\n        }\n\n        /**\n         * Get the factory method of a middleware from module hierarchy.\n         * @param name\n         * @returns {function}\n         */\n        getMiddlewareFactory(name) {\n            const factory = this._middlewareFactories[name];\n            if (factory != null) {\n                return factory;\n            }\n\n            const registryEntry = this.registry.middlewares?.[name];\n            if (registryEntry != null) {\n                this._middlewareFactories[name] = registryEntry;\n                return registryEntry;\n            }\n\n            if (this.server && !this.isServer) {\n                return this.server.getMiddlewareFactory(name);\n            }\n\n            throw new ApplicationError(`Middleware \"${name}\" not found in middleware registry.`);\n        }\n\n        /**\n         * Use middlewares by creating middleware instances (asynchronously) from factory methods and attach them to a router.\n         * @param {Router} router\n         * @param {*} middlewares - Can be an array of middleware entries or a key-value list of registerred middlewares\n         * @returns {Routable}\n         */\n        async useMiddlewares_(router, middlewares) {\n            let middlewareFactory, middleware;\n            let middlewareFunctions = [];\n\n            if (isPlainObject(middlewares)) {\n                await eachAsync_(middlewares, async (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    middleware = await middlewareFactory(options, this);\n                    middlewareFunctions.push({ name, middleware });\n                });\n            } else {\n                middlewares = _.castArray(middlewares);\n\n                await eachAsync_(middlewares, async (middlewareEntry) => {\n                    let type = typeof middlewareEntry;\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry);\n                        middleware = await middlewareFactory(undefined, this);\n                        middlewareFunctions.push({ name: middlewareEntry, middleware });\n                    } else if (type === 'function') {\n                        middlewareFunctions.push({\n                            name: middlewareEntry.name || 'unamed middleware',\n                            middleware: middlewareEntry,\n                        });\n                    } else if (Array.isArray(middlewareEntry)) {\n                        // [ [ 'namedMiddleware', config ] ]\n                        if (middlewareEntry.length === 0) {\n                            throw new InvalidConfiguration(\n                                'Empty array found as middleware entry!',\n                                this,\n                                'middlewares'\n                            );\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry[0]);\n                        middleware = await middlewareFactory(\n                            middlewareEntry.length > 1 ? middlewareEntry[1] : null,\n                            this\n                        );\n                        middlewareFunctions.push({ name: middlewareEntry[0], middleware });\n                    } else {\n                        if (!isPlainObject(middlewareEntry) || !('name' in middlewareEntry)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(middlewareEntry.name);\n                        middleware = await middlewareFactory(middlewareEntry.options, this);\n                        middlewareFunctions.push({ name: middlewareEntry.name, middleware });\n                    }\n                });\n            }\n\n            middlewareFunctions.forEach(({ name, middleware }) => {\n                if (Array.isArray(middleware)) {\n                    middleware.forEach((m) => this.useMiddleware(router, m, name));\n                } else {\n                    this.useMiddleware(router, middleware, name);\n                }\n            });\n\n            return this;\n        }\n\n        /**\n         * Add a route to a router, skipped while the server running in deaf mode.\n         * @param router\n         * @param method\n         * @param route\n         * @param actions\n         */\n        async addRoute_(router, method, route, actions) {\n            let handlers = [],\n                middlewareFactory;\n\n            if (isPlainObject(actions)) {\n                await eachAsync_(actions, async (options, name) => {\n                    middlewareFactory = this.getMiddlewareFactory(name);\n                    handlers.push(this._wrapMiddlewareTracer(await middlewareFactory(options, this), name));\n                });\n            } else {\n                actions = _.castArray(actions);\n                let lastIndex = actions.length - 1;\n\n                await eachAsync_(actions, async (action, i) => {\n                    let type = typeof action;\n\n                    if (i === lastIndex) {\n                        // last middleware may be an action\n                        if (type === 'string' && action.lastIndexOf('.') > 0) {\n                            action = {\n                                name: 'action',\n                                options: action,\n                            };\n\n                            type = 'object';\n                        }\n                    }\n\n                    if (type === 'string') {\n                        // [ 'namedMiddleware' ]\n                        middlewareFactory = this.getMiddlewareFactory(action);\n\n                        let middleware = await middlewareFactory(null, this);\n\n                        //in case it's register by the middlewareFactory feature\n                        if (Array.isArray(middleware)) {\n                            middleware.forEach((middlewareItem, i) =>\n                                handlers.push(\n                                    this._wrapMiddlewareTracer(\n                                        middlewareItem,\n                                        `${action}-${i}` + (middleware.name ? '-' + middleware.name : '')\n                                    )\n                                )\n                            );\n                        } else {\n                            handlers.push(this._wrapMiddlewareTracer(middleware, action));\n                        }\n                    } else if (type === 'function') {\n                        handlers.push(this._wrapMiddlewareTracer(action));\n                    } else if (Array.isArray(action)) {\n                        if (action.length === 0 || action.length > 2) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action[0]);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(\n                                await middlewareFactory(action.length > 1 ? action[1] : undefined, this)\n                            )\n                        );\n                    } else {\n                        if (typeof action !== 'object' || !('name' in action)) {\n                            throw new InvalidConfiguration('Invalid middleware entry!', this, 'middlewares');\n                        }\n\n                        middlewareFactory = this.getMiddlewareFactory(action.name);\n                        handlers.push(\n                            this._wrapMiddlewareTracer(await middlewareFactory(action.options, this), action.name)\n                        );\n                    }\n                });\n            }\n\n            router[method](route, ...handlers);\n\n            let endpoint = router.opts.prefix\n                ? urlUtil.join(this.route, router.opts.prefix, route)\n                : urlUtil.join(this.route, route);\n\n            this.log('verbose', `Route \"${method}:${endpoint}\" is added from app [${this.name}].`);\n\n            return this;\n        }\n\n        requireFeatures(features, middleware) {\n            const hasNotEnabled = _.find(_.castArray(features), (feature) => !this.enabled(feature));\n\n            if (hasNotEnabled) {\n                throw new InvalidConfiguration(\n                    `Middleware \"${middleware}\" requires \"${hasNotEnabled}\" feature to be enabled.`,\n                    this,\n                    `middlewares.${middleware}`\n                );\n            }\n        }\n\n        /**\n         * Attach a router to this app module, skipped while the server running in deaf mode\n         * @param {Router} nestedRouter\n         */\n        addRouter(nestedRouter, baseRoute) {\n            if (this.router == null) {\n                // if mount to server level\n                this.createServerModuleRouter();\n            }\n\n            this.router.attach(nestedRouter, baseRoute);\n            return this;\n        }\n\n        createServerModuleRouter() {\n            if (!this.isServer) {\n                throw new ApplicationError('Only the server instance can create a server module router.');\n            }\n\n            this.router = this.engine.createModuleRouter(this);\n            this.engine.mount('/', this.router);\n        }\n\n        /**\n         * Translate a relative path and query parameters if any to a url path\n         * @param {string} relativePath - Relative path\n         * @param {...*} [pathOrQuery] - Queries\n         * @returns {string}\n         */\n        toWebPath(relativePath, ...pathOrQuery) {\n            let url, query;\n\n            if (pathOrQuery && pathOrQuery.length > 0 && (pathOrQuery.length > 1 || pathOrQuery[0] !== undefined)) {\n                if (_.isObject(pathOrQuery[pathOrQuery.length - 1])) {\n                    query = pathOrQuery.pop();\n                }\n                pathOrQuery.unshift(relativePath);\n                url = urlUtil.join(this.route, ...pathOrQuery);\n            } else {\n                url = urlUtil.join(this.route, relativePath);\n            }\n\n            url = text.ensureStartsWith(url, '/');\n\n            if (query) {\n                url = urlUtil.appendQuery(url, query);\n                url = url.replace('/?', '?');\n            }\n\n            return url;\n        }\n\n        /**\n         * Attach a middleware to a router.\n         * @param {Router} router - The router to attach the middleware\n         * @param {function} middleware - (ctx, next) => ()\n         * @param {String} name - The name of the middleware\n         */\n        useMiddleware(router, middleware, name) {\n            if (typeof middleware !== 'function') {\n                throw new InvalidArgument('Invalid middleware.', { name, middleware });\n            }\n\n            router.use(this._wrapMiddlewareTracer(middleware, name));\n            this.log('verbose', `Attached middleware [${name}].`);\n        }\n\n        middlewareConfig(config, typeInfo, name) {\n            return this.sanitize(config, typeInfo, name, 'middlewares');\n        }\n\n        _wrapMiddlewareTracer(middleware, name) {\n            if (this.options.traceMiddlewares) {\n                return async (ctx, next) => {\n                    this.log('debug', `Step in middleware \"${name || middleware.name}\" ...`);\n                    let ret = await middleware(ctx, next);\n                    this.log('debug', `Step out from middleware \"${name || middleware.name}\".`);\n                    return ret;\n                };\n            }\n\n            return middleware;\n        }\n\n        _getFeatureFallbackPath() {\n            let pathArray = super._getFeatureFallbackPath();\n            pathArray.splice(1, 0, path.resolve(__dirname, 'webFeatures'));\n\n            return pathArray;\n        }\n    };\n\nexport default Routable;\n"],"names":["Routable","T","start_","_middlewareFactories","options","logMiddlewareRegistry","logLevel","log","middlewares","registry","Object","keys","stop_","registerMiddlewareFactory","name","factoryMethod","__esModule","default","InvalidArgument","ApplicationError","getMiddlewareFactory","factory","registryEntry","server","isServer","useMiddlewares_","router","middlewareFactory","middleware","middlewareFunctions","isPlainObject","eachAsync_","push","_","castArray","middlewareEntry","type","undefined","Array","isArray","length","InvalidConfiguration","forEach","m","useMiddleware","addRoute_","method","route","actions","handlers","_wrapMiddlewareTracer","lastIndex","action","i","lastIndexOf","middlewareItem","endpoint","opts","prefix","urlUtil","join","requireFeatures","features","hasNotEnabled","find","feature","enabled","addRouter","nestedRouter","baseRoute","createServerModuleRouter","attach","engine","createModuleRouter","mount","toWebPath","relativePath","pathOrQuery","url","query","isObject","pop","unshift","text","ensureStartsWith","appendQuery","replace","use","middlewareConfig","config","typeInfo","sanitize","traceMiddlewares","ctx","next","ret","_getFeatureFallbackPath","pathArray","splice","path","resolve","__dirname","constructor","defaultRoutableOpts","publicPath","toAbsolutePath","controllersPath","sourcePath","routable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}