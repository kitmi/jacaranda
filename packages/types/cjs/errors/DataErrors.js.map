{"version":3,"sources":["../../src/errors/DataErrors.js"],"sourcesContent":["import { ExposableError, ApplicationError } from './AppErrors';\nimport HttpCode from './HttpCode';\n\n/**\n * Data errors.\n * @module DataErrors\n */\n\n/**\n * Validation error.\n * @class\n */\nexport class ValidationError extends ExposableError {\n    static formatError(error) {\n        let fullMessage = error.message;\n        if (error.info.path) {\n            fullMessage += ' Key: ' + error.info.path;\n        }\n\n        if (error.info.error) {\n            fullMessage += '\\n' + error.info.error;\n        }\n\n        if (error.info.errors) {\n            fullMessage += '\\nAll of these alternative validations failed:\\n' + error.info.errors.map((_error, i) => `Option ${i+1} field \"${_error.info.path}\": ${_error.message}`).join('\\n');\n        }\n\n        return fullMessage;\n    }\n\n    static extractFromError(error) {\n        const _error = {\n            message: error.message,\n            info: error.info\n        };\n\n        if (error.inner) {\n            _error.inner = ValidationError.extractFromError(error.inner);\n        }\n\n        return _error;\n    }\n\n    constructor(message, info, inner) {\n        super(message, info, HttpCode.BAD_REQUEST, 'E_INVALID_DATA');\n\n        this.inner = inner;\n    }\n}\n\n/**\n * Referenced entity not found.\n * @class\n */\nexport class ReferencedNotExist extends ExposableError {\n    constructor(message, info) {\n        super(message, info, HttpCode.BAD_REQUEST, 'E_REFERENCED_NOT_EXIST');\n    }\n}\n\n/**\n * Duplicate error.\n * @class\n */\nexport class DuplicateError extends ExposableError {\n    constructor(message, info) {\n        super(message, info, HttpCode.BAD_REQUEST, 'E_DUPLICATE');\n    }\n}\n\n/**\n * Unexpected data/state error.\n * @class\n */\nexport class UnexpectedState extends ApplicationError {\n    constructor(message, info) {\n        super(message, info, 'E_UNEXPECTED');\n    }\n}\n\n/**\n * Database operation error.\n * @class\n */\nexport class DatabaseError extends ApplicationError {\n    constructor(message, info) {\n        super(message, info, 'E_DATABASE');\n    }\n}\n"],"names":["DatabaseError","DuplicateError","ReferencedNotExist","UnexpectedState","ValidationError","ExposableError","formatError","error","fullMessage","message","info","path","errors","map","_error","i","join","extractFromError","inner","constructor","HttpCode","BAD_REQUEST","ApplicationError"],"mappings":";;;;;;;;;;;IAoFaA,aAAa;eAAbA;;IApBAC,cAAc;eAAdA;;IAVAC,kBAAkB;eAAlBA;;IAoBAC,eAAe;eAAfA;;IA9DAC,eAAe;eAAfA;;;2BAZoC;iEAC5B;;;;;;AAWd,MAAMA,wBAAwBC,yBAAc;IAC/C,OAAOC,YAAYC,KAAK,EAAE;QACtB,IAAIC,cAAcD,MAAME,OAAO;QAC/B,IAAIF,MAAMG,IAAI,CAACC,IAAI,EAAE;YACjBH,eAAe,WAAWD,MAAMG,IAAI,CAACC,IAAI;QAC7C;QAEA,IAAIJ,MAAMG,IAAI,CAACH,KAAK,EAAE;YAClBC,eAAe,OAAOD,MAAMG,IAAI,CAACH,KAAK;QAC1C;QAEA,IAAIA,MAAMG,IAAI,CAACE,MAAM,EAAE;YACnBJ,eAAe,qDAAqDD,MAAMG,IAAI,CAACE,MAAM,CAACC,GAAG,CAAC,CAACC,QAAQC,IAAM,CAAC,OAAO,EAAEA,IAAE,EAAE,QAAQ,EAAED,OAAOJ,IAAI,CAACC,IAAI,CAAC,GAAG,EAAEG,OAAOL,OAAO,CAAC,CAAC,EAAEO,IAAI,CAAC;QAClL;QAEA,OAAOR;IACX;IAEA,OAAOS,iBAAiBV,KAAK,EAAE;QAC3B,MAAMO,SAAS;YACXL,SAASF,MAAME,OAAO;YACtBC,MAAMH,MAAMG,IAAI;QACpB;QAEA,IAAIH,MAAMW,KAAK,EAAE;YACbJ,OAAOI,KAAK,GAAGd,gBAAgBa,gBAAgB,CAACV,MAAMW,KAAK;QAC/D;QAEA,OAAOJ;IACX;IAEAK,YAAYV,OAAO,EAAEC,IAAI,EAAEQ,KAAK,CAAE;QAC9B,KAAK,CAACT,SAASC,MAAMU,iBAAQ,CAACC,WAAW,EAAE;QAE3C,IAAI,CAACH,KAAK,GAAGA;IACjB;AACJ;AAMO,MAAMhB,2BAA2BG,yBAAc;IAClDc,YAAYV,OAAO,EAAEC,IAAI,CAAE;QACvB,KAAK,CAACD,SAASC,MAAMU,iBAAQ,CAACC,WAAW,EAAE;IAC/C;AACJ;AAMO,MAAMpB,uBAAuBI,yBAAc;IAC9Cc,YAAYV,OAAO,EAAEC,IAAI,CAAE;QACvB,KAAK,CAACD,SAASC,MAAMU,iBAAQ,CAACC,WAAW,EAAE;IAC/C;AACJ;AAMO,MAAMlB,wBAAwBmB,2BAAgB;IACjDH,YAAYV,OAAO,EAAEC,IAAI,CAAE;QACvB,KAAK,CAACD,SAASC,MAAM;IACzB;AACJ;AAMO,MAAMV,sBAAsBsB,2BAAgB;IAC/CH,YAAYV,OAAO,EAAEC,IAAI,CAAE;QACvB,KAAK,CAACD,SAASC,MAAM;IACzB;AACJ"}