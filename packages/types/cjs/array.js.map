{"version":3,"sources":["../src/array.js"],"sourcesContent":["import { ValidationError } from './errors';\n\nimport csvLineParse from '@kitmi/utils/csvLineParse';\nimport arrayToCsv from '@kitmi/utils/arrayToCsv';\nimport { padLeft } from '@kitmi/utils/padding';\nimport batchAsync_ from '@kitmi/utils/batchAsync_';\n\nclass T_ARRAY {\n    name = 'array';\n    alias = ['list'];\n    primitive = true;\n    defaultValue = [];\n\n    constructor(system) {\n        this.system = system;\n    }\n\n    validate(value) {\n        return Array.isArray(value);\n    }\n\n    _sanitize(value, meta, opts) {\n        if (typeof value === 'string') {\n            if (meta.csv) {\n                value = csvLineParse(value, { delimiter: meta.delimiter || ',' });\n            } else {\n                const trimmed = value.trim();\n                if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n                    value = JSON.parse(trimmed);\n                }\n            }\n        }\n\n        if (Array.isArray(value)) {\n            if (meta.element) {\n                const schema = typeof meta.element === 'function' ? meta.element() : meta.element;\n\n                return value.map((a, i) => this.system.sanitize(a, schema, opts.i18n, padLeft(`[${i}]`, opts.path)));\n            }\n\n            return value;\n        }\n\n        throw new ValidationError('Invalid array value.', {\n            value,\n            meta,\n            rawValue: opts.rawValue,\n            i18n: opts.i18n,\n            path: opts.path,\n        });\n    }\n\n    async _sanitizeAsync(value, meta, opts) {\n        if (typeof value === 'string') {\n            if (meta.csv) {\n                value = csvLineParse(value, { delimiter: meta.delimiter || ',' });\n            } else {\n                const trimmed = value.trim();\n                if (trimmed.startsWith('[') && trimmed.endsWith(']')) {\n                    value = JSON.parse(trimmed);\n                }\n            }\n        }\n\n        if (Array.isArray(value)) {\n            if (meta.element) {\n                const schema = typeof meta.element === 'function' ? meta.element() : meta.element;\n\n                return batchAsync_(value, (a, i) => this.system.sanitize_(a, schema, opts.i18n, padLeft(`[${i}]`, opts.path)));\n            }\n\n            return value;\n        }\n\n        throw new ValidationError('Invalid array value.', {\n            value,\n            meta,\n            rawValue: opts.rawValue,\n            i18n: opts.i18n,\n            path: opts.path,\n        });\n    }\n\n    serialize(value, typeInfo) {\n        return value == null\n            ? null\n            : typeInfo?.csv\n            ? arrayToCsv(value, typeInfo?.delimiter, this.system.getStringifier())\n            : this.system.safeJsonStringify(value);\n    }\n}\n\nexport default T_ARRAY;\n"],"names":["T_ARRAY","validate","value","Array","isArray","_sanitize","meta","opts","csv","csvLineParse","delimiter","trimmed","trim","startsWith","endsWith","JSON","parse","element","schema","map","a","i","system","sanitize","i18n","padLeft","path","ValidationError","rawValue","_sanitizeAsync","batchAsync_","sanitize_","serialize","typeInfo","arrayToCsv","getStringifier","safeJsonStringify","constructor","name","alias","primitive","defaultValue"],"mappings":"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"}