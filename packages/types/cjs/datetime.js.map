{"version":3,"sources":["../src/datetime.js"],"sourcesContent":["import { ValidationError, ApplicationError } from './errors';\n\nclass T_DATETIME {\n    name = 'datetime';\n    alias = ['date', 'time', 'timestamp'];\n    primitive = true;\n    scalar = true;\n    defaultValue = new Date(0);\n    \n    constructor(system) {\n        this.system = system;\n    }\n\n    validate(value) {\n        return value instanceof Date;\n    }\n\n    /**\n     * Transform a value into a JavaScript Date object.\n     * @param {*} value\n     * @param {*} meta\n     * @param {*} i18n\n     * @param {string} [path]\n     * @returns {Date|null}\n     */\n    _sanitize(value, meta, opts) {\n        if (value instanceof Date) {\n            return value;\n        } else {\n            const type = typeof value;\n\n            if (type === 'string') {\n                if (meta.format) {\n                    const parser = this.system.plugins.datetimeParser;\n                    if (!parser) {\n                        throw new ApplicationError('Missing datetime parser plugin.');\n                    }\n                    value = parser(value, { format: meta.format, timezone: opts.i18n?.timezone });\n                } else {\n                    value = new Date(value);\n                }\n            } else if (type === 'number') {\n                value = new Date(value);\n            } else if (value.toJSDate) {\n                value = value.toJSDate();\n            }\n\n            if (isNaN(value)) {\n                throw new ValidationError('Invalid datetime value.', {\n                    value: null,\n                    meta,\n                    rawValue: opts.rawValue,\n                    i18n: opts.i18n,\n                    path: opts.path,\n                });\n            }\n        }\n\n        return value;\n    }\n\n    serialize(value) {\n        return value?.toISOString();\n    }\n};\n\nexport default T_DATETIME;"],"names":["T_DATETIME","validate","value","Date","_sanitize","meta","opts","type","format","parser","system","plugins","datetimeParser","ApplicationError","timezone","i18n","toJSDate","isNaN","ValidationError","rawValue","path","serialize","toISOString","constructor","name","alias","primitive","scalar","defaultValue"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAkEA;;;eAAA;;;wBAlEkD;;;;;;;;;;;;;;AAElD,MAAMA;IAWFC,SAASC,KAAK,EAAE;QACZ,OAAOA,iBAAiBC;IAC5B;IAEA;;;;;;;KAOC,GACDC,UAAUF,KAAK,EAAEG,IAAI,EAAEC,IAAI,EAAE;QACzB,IAAIJ,iBAAiBC,MAAM;YACvB,OAAOD;QACX,OAAO;YACH,MAAMK,OAAO,OAAOL;YAEpB,IAAIK,SAAS,UAAU;gBACnB,IAAIF,KAAKG,MAAM,EAAE;oBACb,MAAMC,SAAS,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,cAAc;oBACjD,IAAI,CAACH,QAAQ;wBACT,MAAM,IAAII,wBAAgB,CAAC;oBAC/B;oBACAX,QAAQO,OAAOP,OAAO;wBAAEM,QAAQH,KAAKG,MAAM;wBAAEM,UAAUR,KAAKS,IAAI,EAAED;oBAAS;gBAC/E,OAAO;oBACHZ,QAAQ,IAAIC,KAAKD;gBACrB;YACJ,OAAO,IAAIK,SAAS,UAAU;gBAC1BL,QAAQ,IAAIC,KAAKD;YACrB,OAAO,IAAIA,MAAMc,QAAQ,EAAE;gBACvBd,QAAQA,MAAMc,QAAQ;YAC1B;YAEA,IAAIC,MAAMf,QAAQ;gBACd,MAAM,IAAIgB,uBAAe,CAAC,2BAA2B;oBACjDhB,OAAO;oBACPG;oBACAc,UAAUb,KAAKa,QAAQ;oBACvBJ,MAAMT,KAAKS,IAAI;oBACfK,MAAMd,KAAKc,IAAI;gBACnB;YACJ;QACJ;QAEA,OAAOlB;IACX;IAEAmB,UAAUnB,KAAK,EAAE;QACb,OAAOA,OAAOoB;IAClB;IAtDAC,YAAYb,MAAM,CAAE;QANpBc,uBAAAA,QAAO;QACPC,uBAAAA,SAAQ;YAAC;YAAQ;YAAQ;SAAY;QACrCC,uBAAAA,aAAY;QACZC,uBAAAA,UAAS;QACTC,uBAAAA,gBAAe,IAAIzB,KAAK;QAGpB,IAAI,CAACO,MAAM,GAAGA;IAClB;AAqDJ;MAEA,WAAeV"}