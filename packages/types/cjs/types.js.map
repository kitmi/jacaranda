{"version":3,"sources":["../src/types.js"],"sourcesContent":["import { InvalidArgument, ValidationError, ApplicationError } from './errors';\n\nlet counter = 0;\n\nconst defaultTypeClasses = [];\nconst defaultPlugins = [];\n\nexport class TypeSystem {\n    primitives = new Set();\n    scalarTypes = new Set();\n    plugins = {};\n    types = {};\n    sanitize = this.callType('sanitize');\n    sanitize_ = this.callType('sanitize_');\n    serialize = this.callType('serialize');\n    validate = this.callType('validate');\n\n    constructor() {\n        this._counter = counter++;\n    }\n\n    static fromDefault() {\n        const ts = new TypeSystem();\n\n        defaultTypeClasses.forEach(({ name, TypeMeta }) => {\n            ts.addType(name, TypeMeta);\n        });\n\n        defaultPlugins.forEach(({ name, plugin }) => {\n            ts.addPlugin(name, plugin);\n        });\n\n        return ts;\n    }\n\n    addPlugin(name, plugin) {\n        this.plugins[name] = plugin;\n    }\n\n    removePlugin(name) {\n        delete this.plugins[name];\n    }\n\n    _addType(name, typeMeta) {\n        if (name in this.types) {\n            throw new ApplicationError(`Type \"${name}\" already exist.`, { name });\n        }\n\n        this.types[name] = typeMeta;\n        if (typeMeta.primitive) {\n            this.primitives.add(name);\n        }\n        if (typeMeta.scalar) {\n            this.scalarTypes.add(name);\n        }\n    }\n\n    addType(name, TypeMeta) {\n        const typeMeta = new TypeMeta(this);\n\n        typeMeta.sanitize = (value, meta, i18n, path) => {\n            meta = { type: typeMeta.name, ...meta };\n            const opts = { rawValue: value, i18n, path, system: this };\n            const [isDone, sanitized] = this.beginSanitize(value, meta, opts);\n            return this.endSanitize(isDone ? sanitized : typeMeta._sanitize(value, meta, opts), meta, opts);\n        };\n\n        typeMeta.sanitize_ = async (value, meta, i18n, path) => {\n            meta = { type: typeMeta.name, ...meta };\n            const opts = { rawValue: value, i18n, path, system: this };\n            const [isDone, sanitized] = await this.beginSanitize(value, meta, opts);\n            return this.endSanitize(\n                isDone\n                    ? sanitized\n                    : typeMeta._sanitizeAsync\n                    ? await typeMeta._sanitizeAsync(value, meta, opts)\n                    : typeMeta._sanitize(value, meta, opts),\n                meta,\n                opts\n            );\n        };\n\n        this._addType(name, typeMeta);\n        this._addType(typeMeta.name, typeMeta);\n\n        typeMeta.alias?.forEach((a) => {\n            this._addType(a, typeMeta);\n        });\n    }\n\n    callType(method) {\n        return (value, typeInfo, i18n, fieldPath) => {\n            if (typeInfo.type == null) {\n                throw new InvalidArgument(`Missing type info: ${JSON.stringify(typeInfo)}`);\n            }\n\n            if (!this.primitives.has(typeInfo.type)) {\n                throw new InvalidArgument(`Unsupported primitive type: \"${typeInfo.type}\".`);\n            }\n\n            const typeObject = this.types[typeInfo.type];            \n            return typeObject[method](value, typeInfo, i18n, fieldPath);\n        };\n    }\n\n    safeJsonStringify(value) {\n        const bigintWriter = this.plugins['bigintWriter'];\n        if (bigintWriter) {\n            const replacer = (_, value) => (typeof value === 'bigint' ? bigintWriter(value) : value);\n\n            return JSON.stringify(value, replacer);\n        }\n\n        return JSON.stringify(value);\n    }\n\n    getStringifier() {\n        const bigintWriter = this.plugins['bigintWriter'];\n        if (bigintWriter) {\n            return (value) => (typeof value === 'bigint' ? bigintWriter(value) : value.toString());\n        }\n\n        return null;\n    }\n\n    beginSanitize(value, meta, opts) {\n        if (value == null) {\n            if (meta.default != null) {\n                return [true, meta.default];\n            } else if (meta.optional) {\n                return [true, null];\n            }\n\n            throw new ValidationError('Missing a required value.', {\n                value,\n                meta,\n                rawValue: opts.rawValue,\n                i18n: opts.i18n,\n                path: opts.path,\n            });\n        }\n\n        if (meta.plain) return [true, value];\n\n        // more prerequisites here ...\n        if (this.plugins.preProcess) {\n            return this.plugins.preProcess(value, meta, opts);\n        }\n\n        return [false];\n    }\n\n    endSanitize(value, meta, opts) {\n        if (this.scalarTypes.has(meta.type)) {\n            this.verifyEnum(value, meta, opts);\n        }\n\n        if (this.plugins.postProcess) {\n            return this.plugins.postProcess(value, meta, opts);\n        }\n\n        return value;\n    }\n\n    verifyEnum(value, meta, opts) {\n        if (meta.enum && !meta.enum.includes(value)) {\n            throw new ValidationError('Invalid enum value.', {\n                value,\n                meta,\n                rawValue: opts.rawValue,\n                i18n: opts.i18n,\n                path: opts.path,\n            });\n        }\n    }\n}\n\nconst defaultTypeSystem = new TypeSystem();\n\nexport const addType = (name, TypeMeta) => {\n    defaultTypeSystem.addType(name, TypeMeta);\n    defaultTypeClasses.push({ name, TypeMeta });\n};\n\nexport const addPlugin = (name, plugin) => {\n    defaultTypeSystem.addPlugin(name, plugin);\n    defaultPlugins.push({ name, plugin });\n};\n\nexport const createTypeSystem = (emptySystem) => {\n    return emptySystem ? new TypeSystem() : TypeSystem.fromDefault();\n};\n\nexport const Types = defaultTypeSystem.types;\n\n// compatibility\nTypes.sanitize = defaultTypeSystem.sanitize.bind(defaultTypeSystem);\nTypes.sanitize_ = defaultTypeSystem.sanitize_.bind(defaultTypeSystem);\nTypes.serialize = defaultTypeSystem.serialize.bind(defaultTypeSystem);\nTypes.primitives = defaultTypeSystem.primitives;\n\nexport const charsets = {\n    up_letter_num: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    low_letter_num: '0123456789abcdefghijklmnopqrstuvwxyz',\n    up_letter: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    low_letter: 'abcdefghijklmnopqrstuvwxyz',\n    url_safe_all: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_',\n};\n\nexport default defaultTypeSystem;\n"],"names":["TypeSystem","Types","addPlugin","addType","charsets","createTypeSystem","counter","defaultTypeClasses","defaultPlugins","fromDefault","ts","forEach","name","TypeMeta","plugin","plugins","removePlugin","_addType","typeMeta","types","ApplicationError","primitive","primitives","add","scalar","scalarTypes","sanitize","value","meta","i18n","path","type","opts","rawValue","system","isDone","sanitized","beginSanitize","endSanitize","_sanitize","sanitize_","_sanitizeAsync","alias","a","callType","method","typeInfo","fieldPath","InvalidArgument","JSON","stringify","has","typeObject","safeJsonStringify","bigintWriter","replacer","_","getStringifier","toString","default","optional","ValidationError","plain","preProcess","verifyEnum","postProcess","enum","includes","constructor","Set","serialize","validate","_counter","defaultTypeSystem","push","emptySystem","bind","up_letter_num","low_letter_num","up_letter","low_letter","url_safe_all"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}