{"version":3,"sources":["../src/transform.js"],"sourcesContent":["// JSON Expression Syntax (JES)\nimport { get as _get, set as _set, isInteger } from '@kitmi/utils';\n\nimport _isEmpty from 'lodash/isEmpty';\nimport _reduce from 'lodash/reduce';\nimport _map from 'lodash/map';\nimport _mapValues from 'lodash/mapValues';\n\nimport { initContext, getChildContext } from './config';\nimport { isOperator } from './utils';\nimport ops from './transformerOperators';\n\nconst PFX_MAP = '|>'; // map\nconst PFX_REDUCE = '|+'; // reduce 1. intermediate = result op [key, value] 2. result = result op intermediate\n\n/**\n * Apply a bianry operator to a value\n * @param {*} value\n * @param {*} op\n * @param {*} opValue\n * @param {*} context\n * @returns {*}\n */\nfunction applyBinaryOperator(value, op, opValue, context) {\n    const handler = context.config.getTransformer(op);\n\n    if (!handler) {\n        throw new Error(context.config.messages.INVALID_TRANSFORMER_HANDLER(op));\n    }\n\n    return handler(value, opValue, context);\n}\n\n/**\n * Apply an unary operator to a value\n * @param {*} value\n * @param {*} tag\n * @param {*} context\n * @returns {*}\n */\nfunction applyUnaryOperator(value, tag, context) {\n    const handler = context.config.getTransformer(tag);\n\n    if (!handler) {\n        throw new Error(context.config.messages.INVALID_TRANSFORMER_HANDLER(tag));\n    }\n\n    return handler(value, context);\n}\n\n/**\n * Apply an operator to a value with operator meta\n * @param {*} currentValue\n * @param {*} rightValue\n * @param {*} opMeta\n * @param {*} context\n * @returns {*}\n */\nfunction applyOperator(currentValue, rightValue, [op, isUnary], context) {\n    if (isUnary) {\n        return applyUnaryOperator(currentValue, op, context);\n    }\n\n    return applyBinaryOperator(currentValue, op, rightValue, context);\n}\n\n/**\n * Apply an collection iteration operator with operator meta\n * @param {*} currentValue\n * @param {*} collectionOp\n * @param {*} opMeta\n * @param {*} expectedFieldValue\n * @param {*} context\n * @returns {*}\n */\nfunction transformCollection(currentValue, collectionOp, opMeta, expectedFieldValue, context) {\n    const isUnary = opMeta[1];\n\n    switch (collectionOp) {\n        case PFX_MAP:\n            return (Array.isArray(currentValue) ? _map : _mapValues)(currentValue, (item, key) =>\n                applyOperator(item, expectedFieldValue, opMeta, getChildContext(context, currentValue, key, item))\n            );\n\n        case PFX_REDUCE:\n            if (!Array.isArray(expectedFieldValue) || (isUnary && expectedFieldValue.length !== 1)) {\n                throw new Error(\n                    context.config.messages.INVALID_COLLECTION_OP_EXPR(ops.REDUCE, opMeta[0], expectedFieldValue)\n                );\n            }\n\n            return _reduce(\n                currentValue,\n                (result, item, key) =>\n                    applyOperator(\n                        result,\n                        expectedFieldValue[1],\n                        opMeta,\n                        getChildContext(context, currentValue, key, item)\n                    ),\n                expectedFieldValue[0]\n            );\n\n        default:\n            throw new Error(context.config.messages.INVALID_COLLECTION_OP(collectionOp));\n    }\n}\n\n/**\n * If $ operator used, only one a time is allowed\n * e.g.\n * {\n *    $groupBy: 'key'\n * }\n *\n *\n * @param {*} currentValue\n * @param {*} jsx\n * @param {*} context\n * @param {boolean} replaceLeft - Whether the expression will replace the left value chain, like a setOp\n * @return {*}\n */\nfunction transform(currentValue, jsx, context, replaceLeft) {\n    // Null jsx means\n    //  - no change if replaceLeft is false\n    //  - undefined if replaceLeft is true\n    if (jsx == null) {\n        return replaceLeft ? undefined : currentValue;\n    }\n\n    context = initContext(context, currentValue);\n\n    if (Array.isArray(jsx)) {\n        if (replaceLeft) {\n            return jsx.map((item) => transform(undefined, item, context, true));\n        }\n\n        return jsx.reduce((result, exprItem) => transform(result, exprItem, context), currentValue);\n    }\n\n    const typeExpr = typeof jsx;\n\n    if (typeExpr === 'boolean') {\n        if (replaceLeft) {\n            return jsx;\n        }\n\n        return jsx ? currentValue : undefined;\n    }\n\n    if (typeExpr === 'number' || typeExpr === 'bigint') {\n        if (replaceLeft) {\n            return jsx;\n        }\n\n        if (isInteger(jsx) && Array.isArray(currentValue)) {\n            return currentValue[jsx];\n        }\n\n        throw new Error(context.config.messages.SYNTAX_NUMBER_AS_EXPR);\n    }\n\n    if (typeExpr === 'string') {\n        if (replaceLeft) {\n            return jsx;\n        }        \n\n        if (isOperator(jsx)) {\n            const arrayOp = jsx.split('.', 2);\n            \n            if (arrayOp.length > 1 && context.config.getTransformerTagAndType(arrayOp[0]) != null) {\n                return transform(currentValue, [ arrayOp[0], { $valueOf: arrayOp[1] } ], context);\n            }\n\n            const opMeta = context.config.getTransformerTagAndType(jsx);\n            if (!opMeta) {\n                throw new Error(context.config.messages.INVALID_TRANSFORMER_OP(jsx));\n            }\n\n            if (!opMeta[1]) {\n                return applyBinaryOperator(currentValue, opMeta[0], null, context);\n            }\n\n            return applyUnaryOperator(currentValue, opMeta[0], context);\n        }\n\n        if (currentValue != null && typeof currentValue !== 'object') {\n            throw new Error(context.config.messages.SYNTAX_INVALID_EXPR(jsx));\n        }\n\n        return _get(currentValue, jsx);\n    }\n\n    if (typeExpr !== 'object') {\n        throw new Error(context.config.messages.SYNTAX_INVALID_EXPR(jsx));\n    }\n\n    if (replaceLeft) {\n        return _mapValues(jsx, (item) => transform(undefined, item, context, true));\n    }\n\n    let result,\n        hasOperator = false;\n\n    for (let fieldName in jsx) {\n        let expectedFieldValue = jsx[fieldName];\n\n        const l = fieldName.length;\n\n        if (l > 1) {\n            if (fieldName[0] === '$') {\n                if (result) {\n                    throw new Error(context.config.messages.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const opMeta = context.config.getTransformerTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new Error(context.config.messages.INVALID_TRANSFORMER_OP(fieldName));\n                }\n\n                if (hasOperator) {\n                    throw new Error(context.config.messages.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = applyOperator(currentValue, expectedFieldValue, opMeta, context);\n                hasOperator = true;\n                continue;\n            }\n\n            if (l > 3 && fieldName[0] === '|' && fieldName[2] === '$') {\n                if (result) {\n                    throw new Error(context.config.messages.SYNTAX_OP_NOT_ALONE);\n                }\n\n                const collectionOp = fieldName.substring(0, 2);\n                fieldName = fieldName.substring(2);\n\n                const opMeta = context.config.getTransformerTagAndType(fieldName);\n                if (!opMeta) {\n                    throw new Error(context.config.messages.INVALID_TRANSFORMER_OP(fieldName));\n                }\n\n                if (hasOperator) {\n                    throw new Error(context.config.messages.SYNTAX_OP_NOT_ALONE);\n                }\n\n                result = transformCollection(currentValue, collectionOp, opMeta, expectedFieldValue, context);\n                hasOperator = true;\n                continue;\n            }\n        }\n\n        if (hasOperator) {\n            throw new Error(context.config.messages.SYNTAX_OP_NOT_ALONE);\n        }\n\n        let complexKey = fieldName.indexOf('.') !== -1;\n\n        //pick a field and then apply manipulation\n        let actualFieldValue =\n            currentValue != null ? (complexKey ? _get(currentValue, fieldName) : currentValue[fieldName]) : undefined;\n\n        const childFieldValue = transform(\n            actualFieldValue,\n            expectedFieldValue,\n            getChildContext(context, currentValue, fieldName, actualFieldValue)\n        );\n\n        if (typeof childFieldValue !== 'undefined') {\n            result == null && (result = {});\n            if (complexKey) {\n                _set(result, fieldName, childFieldValue);\n            } else {\n                result[fieldName] = childFieldValue;\n            }\n        }\n    }\n\n    return result;\n}\n\nexport default transform;\n"],"names":["PFX_MAP","PFX_REDUCE","applyBinaryOperator","value","op","opValue","context","handler","config","getTransformer","Error","messages","INVALID_TRANSFORMER_HANDLER","applyUnaryOperator","tag","applyOperator","currentValue","rightValue","isUnary","transformCollection","collectionOp","opMeta","expectedFieldValue","Array","isArray","_map","_mapValues","item","key","getChildContext","length","INVALID_COLLECTION_OP_EXPR","ops","REDUCE","_reduce","result","INVALID_COLLECTION_OP","transform","jsx","replaceLeft","undefined","initContext","map","reduce","exprItem","typeExpr","isInteger","SYNTAX_NUMBER_AS_EXPR","isOperator","arrayOp","split","getTransformerTagAndType","$valueOf","INVALID_TRANSFORMER_OP","SYNTAX_INVALID_EXPR","_get","hasOperator","fieldName","l","SYNTAX_OP_NOT_ALONE","substring","complexKey","indexOf","actualFieldValue","childFieldValue","_set"],"mappings":"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"}