{"version":3,"sources":["../src/transformers.js"],"sourcesContent":["// JSON Expression Syntax (JES)\nimport { isInteger, get as _get, getBy, keyAt, valueAt } from '@kitmi/utils';\n\nimport t_ops from './transformerOperators';\n\nimport transform from './transform';\n\nconst MSG = config.messages;\n\nconst UNARY = true;\nconst BINARY = false;\n\n// Collection operators (pure)\nconst OP_THIS = [t_ops.THIS, UNARY, '$this', '$@>', '$$CURRENT'];\nconst OP_PARENT = [t_ops.PARENT, UNARY, '$parent', '$@<', '$$PARENT'];\nconst OP_ROOT = [t_ops.ROOT, UNARY, '$root', '$@^', '$$ROOT'];\nconst OP_KEY = [t_ops.KEY, UNARY, '$key', '$$KEY'];\n\nconst OP_GET_BY_INDEX = [t_ops.VALUE_AT, BINARY, '$at', '$getByIndex', '$nth']; // supports -1 as the last index, -2 the second last\nconst OP_GET_BY_KEY = [t_ops.GET_BY_KEY, BINARY, '$valueOf', '$getByKey']; // support key path\nconst OP_KEY_AT = [t_ops.KEY_AT, BINARY, '$keyAt', '$nthKey']; \n\nconfig.addTransformerToMap(OP_THIS, (left, right, context) => context.THIS);\nconfig.addTransformerToMap(OP_PARENT, (left, right, context) => context.PARENT);\nconfig.addTransformerToMap(OP_ROOT, (left, right, context) => context.ROOT);\nconfig.addTransformerToMap(OP_KEY, (left, right, context) => context.KEY);\n\nconfig.addTransformerToMap(OP_GET_BY_INDEX, (left, right, context) => {\n    right = transform(undefined, right, context, true); \n\n    if (right != null && !isInteger(right)) {\n        throw new Error(MSG.INVALID_OP_EXPR(t_ops.VALUE_AT));\n    }\n\n    return valueAt(left, right);\n});\n\nconfig.addTransformerToMap(OP_GET_BY_KEY, (left, right, context) => {\n    right = transform(undefined, right, context, true); \n\n    return getBy(left, right, (obj, key) => transform(obj, key, context));\n});\n\nconfig.addTransformerToMap(OP_KEY_AT, (left, right, context) => {\n    right = transform(undefined, right, context, true); \n\n    if (right != null && !isInteger(right)) {\n        throw new Error(MSG.INVALID_OP_EXPR(t_ops.VALUE_AT));\n    }\n\n    return keyAt(left, right);\n});"],"names":["MSG","config","messages","UNARY","BINARY","OP_THIS","t_ops","THIS","OP_PARENT","PARENT","OP_ROOT","ROOT","OP_KEY","KEY","OP_GET_BY_INDEX","VALUE_AT","OP_GET_BY_KEY","GET_BY_KEY","OP_KEY_AT","KEY_AT","addTransformerToMap","left","right","context","transform","undefined","isInteger","Error","INVALID_OP_EXPR","valueAt","getBy","obj","key","keyAt"],"mappings":"AAAA,+BAA+B;;;;;uBAC+B;6EAE5C;kEAEI;;;;;;AAEtB,MAAMA,MAAMC,OAAOC,QAAQ;AAE3B,MAAMC,QAAQ;AACd,MAAMC,SAAS;AAEf,8BAA8B;AAC9B,MAAMC,UAAU;IAACC,6BAAK,CAACC,IAAI;IAAEJ;IAAO;IAAS;IAAO;CAAY;AAChE,MAAMK,YAAY;IAACF,6BAAK,CAACG,MAAM;IAAEN;IAAO;IAAW;IAAO;CAAW;AACrE,MAAMO,UAAU;IAACJ,6BAAK,CAACK,IAAI;IAAER;IAAO;IAAS;IAAO;CAAS;AAC7D,MAAMS,SAAS;IAACN,6BAAK,CAACO,GAAG;IAAEV;IAAO;IAAQ;CAAQ;AAElD,MAAMW,kBAAkB;IAACR,6BAAK,CAACS,QAAQ;IAAEX;IAAQ;IAAO;IAAe;CAAO,EAAE,oDAAoD;AACpI,MAAMY,gBAAgB;IAACV,6BAAK,CAACW,UAAU;IAAEb;IAAQ;IAAY;CAAY,EAAE,mBAAmB;AAC9F,MAAMc,YAAY;IAACZ,6BAAK,CAACa,MAAM;IAAEf;IAAQ;IAAU;CAAU;AAE7DH,OAAOmB,mBAAmB,CAACf,SAAS,CAACgB,MAAMC,OAAOC,UAAYA,QAAQhB,IAAI;AAC1EN,OAAOmB,mBAAmB,CAACZ,WAAW,CAACa,MAAMC,OAAOC,UAAYA,QAAQd,MAAM;AAC9ER,OAAOmB,mBAAmB,CAACV,SAAS,CAACW,MAAMC,OAAOC,UAAYA,QAAQZ,IAAI;AAC1EV,OAAOmB,mBAAmB,CAACR,QAAQ,CAACS,MAAMC,OAAOC,UAAYA,QAAQV,GAAG;AAExEZ,OAAOmB,mBAAmB,CAACN,iBAAiB,CAACO,MAAMC,OAAOC;IACtDD,QAAQE,IAAAA,kBAAS,EAACC,WAAWH,OAAOC,SAAS;IAE7C,IAAID,SAAS,QAAQ,CAACI,IAAAA,gBAAS,EAACJ,QAAQ;QACpC,MAAM,IAAIK,MAAM3B,IAAI4B,eAAe,CAACtB,6BAAK,CAACS,QAAQ;IACtD;IAEA,OAAOc,IAAAA,cAAO,EAACR,MAAMC;AACzB;AAEArB,OAAOmB,mBAAmB,CAACJ,eAAe,CAACK,MAAMC,OAAOC;IACpDD,QAAQE,IAAAA,kBAAS,EAACC,WAAWH,OAAOC,SAAS;IAE7C,OAAOO,IAAAA,YAAK,EAACT,MAAMC,OAAO,CAACS,KAAKC,MAAQR,IAAAA,kBAAS,EAACO,KAAKC,KAAKT;AAChE;AAEAtB,OAAOmB,mBAAmB,CAACF,WAAW,CAACG,MAAMC,OAAOC;IAChDD,QAAQE,IAAAA,kBAAS,EAACC,WAAWH,OAAOC,SAAS;IAE7C,IAAID,SAAS,QAAQ,CAACI,IAAAA,gBAAS,EAACJ,QAAQ;QACpC,MAAM,IAAIK,MAAM3B,IAAI4B,eAAe,CAACtB,6BAAK,CAACS,QAAQ;IACtD;IAEA,OAAOkB,IAAAA,YAAK,EAACZ,MAAMC;AACvB"}