{"version":3,"sources":["../src/validate.js"],"sourcesContent":["// JSON Validation Syntax\nimport { get as _get, esmCheck } from '@kitmi/utils';\nimport JsvError from './JsvError';\nimport { initContext, getChildContext } from './config';\nimport { isOperator } from './utils';\nimport ops from './validateOperators';\n\nconst DEFAULT_LOCALE = 'en';\n\nfunction getUnmatchedExplanation(op, leftValue, rightValue, context) {\n    if (context.$$E) {\n        return context.$$E;\n    }\n\n    let getter;\n\n    if (context.config.messages.validationErrors) {\n        getter = context.config.messages.validationErrors[op];\n    } else {\n        let locale = context.locale || DEFAULT_LOCALE;\n        if (!context.config.supportedLocales.has(locale)) {\n            locale = DEFAULT_LOCALE;\n        }\n        const messages = esmCheck(require('./locale/' + locale));\n        getter = messages.validationErrors[op];\n    }\n\n    return getter(context.name, leftValue, rightValue, context);\n}\n\n/**\n * Tests whether a left-hand value satisfies a given operator and right-hand value.\n * @param {*} left - The left-hand value to test.\n * @param {string} op - The operator to use for the test.\n * @param {*} right - The right-hand value to test against.\n * @param {Object} options - Options to use for the test.\n * @param {Object} context - The current context of the data structure being validated.\n * @returns {*} The result of the test.\n * @throws {Error} If the specified operator does not have a registered validator.\n */\nexport function test(left, op, right, options, context) {\n    const handler = context.config.getValidator(op);\n\n    if (!handler) {\n        throw new Error(context.config.messages.INVALID_TEST_HANLDER(op));\n    }\n\n    return handler(left, right, options, context);\n}\n\n/**\n * Validate the given object with JSON Expression Syntax (JES)\n * @param {*} actual - The object to match\n * @param {*} jsv - Expected state in JSON Expression Syntax\n * @param {*} options - Validation options\n * @param {*} context - Validation context\n * @returns {array} - [ {boolean} matched, {string} unmatchedReason ]\n */\nfunction validate(actual, jsv, options, context) {\n    if (jsv == null) {\n        return true;\n    }\n\n    context = initContext(context, actual);\n\n    const type = typeof jsv;\n\n    if (type === 'string') {\n        if (!isOperator(jsv)) {\n            throw new Error(context.config.messages.SYNTAX_INVALID_EXPR(jsv));\n        }\n\n        return validate(actual, { [jsv]: null }, options, context);\n    }\n\n    const { throwError, abortEarly, asPredicate, plainError } = options;\n\n    if (Array.isArray(jsv)) {\n        return validate(actual, { $match: jsv }, options, context);\n    }\n\n    if (type !== 'object') {\n        return validate(actual, { $equal: jsv }, options, context);\n    }\n\n    let { path } = context;\n    const errors = [];\n    const _options = !abortEarly && throwError ? { ...options, throwError: false } : options;\n\n    for (let fieldName in jsv) {\n        let op, left, _context;\n\n        const opValue = jsv[fieldName];\n\n        if (isOperator(fieldName)) {\n            //validator\n            op = context.config.getValidatorTag(fieldName);\n            if (!op) {\n                throw new Error(context.config.messages.UNSUPPORTED_VALIDATION_OP(fieldName, path));\n            }\n\n            left = actual;\n            _context = context;\n        } else {\n            let isComplexKey = fieldName.indexOf('.') !== -1;\n\n            //pick a field and then apply manipulation\n            left = actual != null ? (isComplexKey ? _get(actual, fieldName) : actual[fieldName]) : undefined;\n\n            _context = getChildContext(context, actual, fieldName, left);\n\n            if (opValue != null && typeof opValue === 'object') {\n                op = ops.MATCH;\n            } else {\n                op = ops.EQUAL;\n            }\n        }\n\n        if (!test(left, op, opValue, _options, _context)) {\n            if (asPredicate) {\n                return false;\n            }\n\n            const reason = getUnmatchedExplanation(op, left, opValue, _context);\n            if (abortEarly && throwError) {\n                throw new JsvError(reason, left, _context.path);\n            }\n\n            errors.push(plainError ? reason : new JsvError(reason, left, _context.path));\n            if (abortEarly) {\n                break;\n            }\n        }\n    }\n\n    if (errors.length > 0) {\n        if (asPredicate) {\n            return false;\n        }\n\n        if (throwError) {\n            throw new JsvError(errors, actual, path);\n        }\n\n        return errors.length === 1 && plainError ? errors[0] : errors;\n    }\n\n    return true;\n}\n\nexport default validate;\n"],"names":["test","DEFAULT_LOCALE","getUnmatchedExplanation","op","leftValue","rightValue","context","$$E","getter","config","messages","validationErrors","locale","supportedLocales","has","esmCheck","require","name","left","right","options","handler","getValidator","Error","INVALID_TEST_HANLDER","validate","actual","jsv","initContext","type","isOperator","SYNTAX_INVALID_EXPR","throwError","abortEarly","asPredicate","plainError","Array","isArray","$match","$equal","path","errors","_options","fieldName","_context","opValue","getValidatorTag","UNSUPPORTED_VALIDATION_OP","isComplexKey","indexOf","_get","undefined","getChildContext","ops","MATCH","EQUAL","reason","JsvError","push","length"],"mappings":"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"}