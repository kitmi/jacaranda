{"version":3,"sources":["../src/validatorsLoader.js"],"sourcesContent":["// JSON Validation Syntax\nimport { Types } from '@kitmi/types';\nimport { get as _get } from '@kitmi/utils';\n\nimport _isEqual from 'lodash/isEqual';\nimport _has from 'lodash/has';\nimport _size from 'lodash/size';\nimport _castArray from 'lodash/castArray';\nimport _mapValues from 'lodash/mapValues';\n\nimport JsvError from './JsvError';\nimport validate, { test } from './validate';\n\nimport ops from './validateOperators';\n\nimport { processExprLikeValue } from './transform';\n\nexport default function validatorsFactory(config) {\n    const MSG = config.messages;\n\n    //Validators [ name, ...operator alias ]\n    const OP_EQUAL = [ops.EQUAL, '$eq', '$eql', '$equal', '$being'];\n    const OP_NOT_EQUAL = [ops.NOT_EQUAL, '$ne', '$neq', '$notEqual'];\n    const OP_NOT = [ops.NOT, '$not'];\n    const OP_GREATER_THAN = [ops.GREATER_THAN, '$gt', '$>', '$greaterThan'];\n    const OP_GREATER_THAN_OR_EQUAL = [ops.GREATER_THAN_OR_EQUAL, '$gte', '$>=', '$greaterThanOrEqual', '$min'];\n    const OP_LESS_THAN = [ops.LESS_THAN, '$lt', '$<', '$lessThan'];\n    const OP_LESS_THAN_OR_EQUAL = [ops.LESS_THAN_OR_EQUAL, '$lte', '$<=', '$lessThanOrEqual', '$max'];\n    const OP_LENGTH = [ops.LENGTH, '$length', '$size', '$capacity'];\n    const OP_IN = [ops.IN, '$in'];\n    const OP_NOT_IN = [ops.NOT_IN, '$nin', '$notIn'];\n    const OP_EXISTS = [ops.EXISTS, '$exist', '$exists', '$notNull'];\n    const OP_REQUIRED = [ops.REQUIRED, '$required', '$mandatory'];\n    const OP_MATCH = [ops.MATCH, '$has', '$match', '$all', '$should', '$and'];\n    const OP_MATCH_ANY = [ops.MATCH_ANY, '$any', '$or', '$either'];\n    const OP_ALL_MATCH = [ops.ALL_MATCH, '$allMatch', '|>$all', '|>$match'];\n    const OP_ANY_ONE_MATCH = [ops.ANY_ONE_MATCH, '$anyOneMatch', '|*$any', '|*$match', '|*$either'];\n    const OP_TYPE = [ops.TYPE, '$is', '$typeOf'];\n    const OP_HAS_KEYS = [ops.HAS_KEYS, '$hasKey', '$hasKeys', '$withKey', '$withKeys'];\n    const OP_START_WITH = [ops.START_WITH, '$startWith', '$startsWith'];\n    const OP_END_WITH = [ops.END_WITH, '$endWith', '$endsWith'];\n    const OP_MATCH_PATTERN = [ops.MATCH_PATTERN, '$pattern', '$matchPattern', '$matchRegex'];\n    const OP_CONTAINS = [ops.CONTAINS, '$contain', '$contains', '$include', '$includes'];\n    const OP_SAME_AS = [ops.SAME_AS, '$sameAs'];\n\n    const OP_IF = [ops.IF, '$if'];\n\n    config.addValidatorToMap(OP_EQUAL, (left, right, options, context) =>\n        _isEqual(left, processExprLikeValue(right, context))\n    );\n    config.addValidatorToMap(\n        OP_NOT_EQUAL,\n        (left, right, options, context) => !_isEqual(left, processExprLikeValue(right, context))\n    );\n    config.addValidatorToMap(OP_NOT, (left, ...args) => test(left, ops.MATCH, ...args) !== true);\n    config.addValidatorToMap(\n        OP_GREATER_THAN,\n        (left, right, options, context) => left > processExprLikeValue(right, context)\n    );\n    config.addValidatorToMap(\n        OP_GREATER_THAN_OR_EQUAL,\n        (left, right, options, context) => left >= processExprLikeValue(right, context)\n    );\n    config.addValidatorToMap(\n        OP_LESS_THAN,\n        (left, right, options, context) => left < processExprLikeValue(right, context)\n    );\n    config.addValidatorToMap(\n        OP_LESS_THAN_OR_EQUAL,\n        (left, right, options, context) => left <= processExprLikeValue(right, context)\n    );\n    config.addValidatorToMap(OP_LENGTH, (left, right, options, context) =>\n        test(_size(left), ops.MATCH, right, options, context)\n    );\n\n    config.addValidatorToMap(OP_IN, (left, right, options, context) => {\n        if (right == null) {\n            throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IN));\n        }\n\n        right = processExprLikeValue(right, context);\n\n        if (!Array.isArray(right)) {\n            throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IN));\n        }\n\n        const equal = config.getValidator(ops.EQUAL);\n        return right.findIndex((element) => equal(left, element, options, context)) !== -1;\n    });\n\n    config.addValidatorToMap(OP_NOT_IN, (left, right, options, context) => {\n        if (right == null) {\n            throw new Error(MSG.OPERAND_NOT_ARRAY(ops.NOT_IN));\n        }\n\n        right = processExprLikeValue(right, context);\n\n        if (!Array.isArray(right)) {\n            throw new Error(MSG.OPERAND_NOT_ARRAY(ops.NOT_IN));\n        }\n\n        const notEqual = config.getValidator(ops.NOT_EQUAL);\n\n        return right.every((element) => notEqual(left, element, options, context));\n    });\n\n    config.addValidatorToMap(OP_EXISTS, (left, right) => {\n        if (typeof right !== 'boolean') {\n            throw new Error(MSG.OPERAND_NOT_BOOL(ops.EXISTS));\n        }\n\n        return right ? left != null : left == null;\n    });\n\n    config.addValidatorToMap(OP_REQUIRED, (left, right) => {\n        right = processExprLikeValue(right, context);\n\n        if (typeof right !== 'boolean') {\n            throw new Error(MSG.OPERAND_NOT_BOOL(ops.REQUIRED));\n        }\n\n        return right ? left != null : true;\n    });\n\n    config.addValidatorToMap(OP_MATCH, (left, right, options, context) => {\n        if (Array.isArray(right)) {\n            const errors = [];\n\n            right.every((rule) => {\n                const reason = validate(left, rule, { ...options, asPredicate: false }, context);\n\n                if (reason !== true) {\n                    errors.push(..._castArray(reason));\n\n                    if (options.abortEarly) {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            if (errors.length > 0) {\n                if (options.throwError) {\n                    throw new JsvError(errors, left, context);\n                }\n\n                if (!options.asPredicate) {\n                    context.ERROR = errors.length === 1 && options.plainError ? errors[0] : errors;\n                }\n\n                return false;\n            }\n\n            return true;\n        }\n\n        const reason2 = validate(left, right, options, context);\n        if (reason2 !== true) {\n            if (!options.asPredicate) {\n                context.ERROR = reason2;\n            }\n\n            return false;\n        }\n\n        return true;\n    });\n\n    config.addValidatorToMap(OP_MATCH_ANY, (left, right, options, context) => {\n        if (!Array.isArray(right)) {\n            throw new Error(MSG.OPERAND_NOT_ARRAY(ops.MATCH_ANY));\n        }\n\n        let found = right.find((rule) => {\n            const reason = validate(left, rule, { ...options, abortEarly: false, throwError: false }, context);\n            return reason === true;\n        });\n\n        if (!found) {\n            context.ERROR = MSG.validationErrors[ops.MATCH_ANY](context.name, left, right, context);\n        }\n\n        return found ? true : false;\n    });\n\n    config.addValidatorToMap(OP_ALL_MATCH, (left, right, options, context) => {\n        if (!Array.isArray(left)) {\n            throw new Error(MSG.VALUE_NOT_ARRAY(ops.ALL_MATCH));\n        }\n\n        const errors = [];\n\n        left.every((leftItem) => {\n            const reason = validate(leftItem, right, { ...options, asPredicate: false }, context);\n            if (reason !== true) {\n                errors.push(\n                    MSG.validationErrors[ops.ALL_MATCH](context.name, left, right, context),\n                    ..._castArray(reason)\n                );\n\n                if (options.abortEarly) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        if (errors.length > 0) {\n            if (options.throwError) {\n                throw new JsvError(errors, left, context);\n            }\n\n            if (!options.asPredicate) {\n                context.ERROR = errors.length === 1 && options.plainError ? errors[0] : errors;\n            }\n\n            return false;\n        }\n\n        return true;\n    });\n\n    config.addValidatorToMap(OP_ANY_ONE_MATCH, (left, right, options, context) => {\n        if (!Array.isArray(left)) {\n            throw new Error(MSG.VALUE_NOT_ARRAY(ops.ANY_ONE_MATCH));\n        }\n\n        let found = left.find((leftItem) => {\n            const reason = validate(leftItem, right, { ...options, abortEarly: false, throwError: false }, context);\n            return reason === true;\n        });\n\n        if (!found) {\n            context.ERROR = MSG.validationErrors[ops.ANY_ONE_MATCH](context.name, left, right, context);\n        }\n\n        return found ? true : false;\n    });\n\n    config.addValidatorToMap(OP_TYPE, (left, right, options, context) => {\n        if (typeof right !== 'string') {\n            throw new Error(MSG.OPERAND_NOT_STRING(ops.TYPE));\n        }\n\n        if (!Types.primitives.has(right)) {\n            throw new Error(MSG.UNSUPPORTED_TYPE(right));\n        }\n\n        return Types[right].validate(left);\n    });\n\n    config.addValidatorToMap(OP_HAS_KEYS, (left, right) => {\n        if (typeof left !== 'object') {\n            return false;\n        }\n\n        return Array.isArray(right) ? right.every((key) => _has(left, key)) : _has(left, right);\n    });\n\n    config.addValidatorToMap(OP_START_WITH, (left, right, options, context) => {\n        if (typeof left !== 'string') {\n            return false;\n        }\n\n        right = processExprLikeValue(right, context);\n\n        if (typeof right !== 'string') {\n            throw new Error(MSG.OPERAND_NOT_STRING(ops.START_WITH));\n        }\n\n        return left.startsWith(right);\n    });\n\n    config.addValidatorToMap(OP_END_WITH, (left, right, options, context) => {\n        if (typeof left !== 'string') {\n            return false;\n        }\n\n        right = processExprLikeValue(right, context);\n\n        if (typeof right !== 'string') {\n            throw new Error(MSG.OPERAND_NOT_STRING(ops.END_WITH));\n        }\n\n        return left.endsWith(right);\n    });\n\n    config.addValidatorToMap(OP_MATCH_PATTERN, (left, right, options, context) => {\n        if (typeof left !== 'string') {\n            return false;\n        }\n\n        right = processExprLikeValue(right, context);\n\n        let pattern = right;\n        let flags;\n\n        if (Array.isArray(right)) {\n            if (right.length > 2) {\n                throw new Error(MSG.OPERAND_NOT_TUPLE(ops.MATCH_PATTERN));\n            }\n\n            pattern = right[0];\n            flags = right[1];\n        } else if (typeof right !== 'string') {\n            throw new Error(MSG.OPERAND_NOT_STRING(ops.MATCH_PATTERN));\n        }\n\n        return new RegExp(pattern, flags).test(left);\n    });\n\n    config.addValidatorToMap(OP_CONTAINS, (left, right, options, context) => {\n        if (typeof left !== 'string') {\n            return false;\n        }\n\n        right = processExprLikeValue(right, context);\n\n        if (typeof right !== 'string') {\n            throw new Error(MSG.OPERAND_NOT_STRING(ops.CONTAINS));\n        }\n\n        return left.includes(right);\n    });\n\n    config.addValidatorToMap(OP_SAME_AS, (left, right, options, context) => {\n        if (typeof left === 'object') {\n            throw new Error(MSG.VALUE_NOT_PRIMITIVE(ops.SAME_AS));\n        }\n        if (typeof right !== 'string') {\n            throw new Error(MSG.OPERAND_NOT_STRING(ops.SAME_AS));\n        }\n\n        return left === _get(context.PARENT, right);\n    });\n\n    config.addValidatorToMap(OP_IF, (left, right, options, context) => {\n        if (!Array.isArray(right)) {\n            throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IF));\n        }\n\n        if (right.length < 2 || right.length > 3) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE_2_OR_3(ops.IF));\n        }\n\n        const condition = processExprLikeValue(right[0], context);\n\n        if (typeof condition !== 'boolean') {\n            throw new Error(MSG.VALUE_NOT_BOOL(ops.IF));\n        }\n\n        let result = true;\n\n        if (condition) {\n            result = validate(left, right[1], options, context);\n        } else if (right.length > 2) {\n            result = validate(left, right[2], options, context);\n        }\n\n        return result;\n    });\n}\n"],"names":["validatorsFactory","config","MSG","messages","OP_EQUAL","ops","EQUAL","OP_NOT_EQUAL","NOT_EQUAL","OP_NOT","NOT","OP_GREATER_THAN","GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","OP_LESS_THAN","LESS_THAN","OP_LESS_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","OP_LENGTH","LENGTH","OP_IN","IN","OP_NOT_IN","NOT_IN","OP_EXISTS","EXISTS","OP_REQUIRED","REQUIRED","OP_MATCH","MATCH","OP_MATCH_ANY","MATCH_ANY","OP_ALL_MATCH","ALL_MATCH","OP_ANY_ONE_MATCH","ANY_ONE_MATCH","OP_TYPE","TYPE","OP_HAS_KEYS","HAS_KEYS","OP_START_WITH","START_WITH","OP_END_WITH","END_WITH","OP_MATCH_PATTERN","MATCH_PATTERN","OP_CONTAINS","CONTAINS","OP_SAME_AS","SAME_AS","OP_IF","IF","addValidatorToMap","left","right","options","context","_isEqual","processExprLikeValue","args","test","_size","Error","OPERAND_NOT_ARRAY","Array","isArray","equal","getValidator","findIndex","element","notEqual","every","OPERAND_NOT_BOOL","errors","rule","reason","validate","asPredicate","push","_castArray","abortEarly","length","throwError","JsvError","ERROR","plainError","reason2","found","find","validationErrors","name","VALUE_NOT_ARRAY","leftItem","OPERAND_NOT_STRING","Types","primitives","has","UNSUPPORTED_TYPE","key","_has","startsWith","endsWith","pattern","flags","OPERAND_NOT_TUPLE","RegExp","includes","VALUE_NOT_PRIMITIVE","_get","PARENT","OPERAND_NOT_TUPLE_2_OR_3","condition","VALUE_NOT_BOOL","result"],"mappings":"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"}