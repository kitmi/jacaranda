{"version":3,"sources":["../src/transformersLoader.js"],"sourcesContent":["// JSON Expression Syntax (JES)\nimport { isInteger, get as _get, getBy, keyAt, valueAt } from '@kitmi/utils';\nimport ops from './transformerOperators';\nimport v_ops from './validateOperators';\nimport transform, { processExprLikeValue } from './transform';\nimport { test } from './validate';\n\nexport const matchOptions = { throwError: false, abortEarly: true, asPredicate: true };\n\nexport default function transformersFactory(config) {\n    const MSG = config.messages;\n\n    const UNARY = true;\n    const BINARY = false;\n\n    // Collection operators (pure)\n    const OP_THIS = [ops.THIS, UNARY, '$this', '$@>', '$$CURRENT'];\n    const OP_PARENT = [ops.PARENT, UNARY, '$parent', '$@<', '$$PARENT'];\n    const OP_ROOT = [ops.ROOT, UNARY, '$root', '$@^', '$$ROOT'];\n    const OP_KEY = [ops.KEY, UNARY, '$key', '$$KEY'];\n\n    const OP_GET_BY_INDEX = [ops.VALUE_AT, BINARY, '$at', '$getByIndex', '$nth', '$valueAt']; // supports -1 as the last index, -2 the second last\n    const OP_GET_BY_KEY = [ops.GET_BY_KEY, BINARY, '$valueOf', '$getByKey']; // support key path\n    const OP_KEY_AT = [ops.KEY_AT, BINARY, '$keyAt', '$nthKey'];\n\n    const OP_MATCH = [ops.MATCH, BINARY, '$is', '$has', '$match', '$all', '$validate', '$when'];\n\n    config.addTransformerToMap(OP_THIS, (left, context) => context.THIS);\n    config.addTransformerToMap(OP_PARENT, (left, context) => context.PARENT);\n    config.addTransformerToMap(OP_ROOT, (left, context) => context.ROOT);\n    config.addTransformerToMap(OP_KEY, (left, context) => context.KEY);\n\n    config.addTransformerToMap(OP_GET_BY_INDEX, (left, right, context) => {\n        right = processExprLikeValue(right, context);\n\n        if (right != null && !isInteger(right)) {\n            throw new Error(MSG.INVALID_OP_EXPR(ops.VALUE_AT));\n        }\n\n        return valueAt(left, right);\n    });\n\n    config.addTransformerToMap(OP_GET_BY_KEY, (left, right, context) => {\n        right = processExprLikeValue(right, context);\n\n        return getBy(left, right, (obj, key) => transform(obj, key, context));\n    });\n\n    config.addTransformerToMap(OP_KEY_AT, (left, right, context) => {\n        right = processExprLikeValue(right, context);\n\n        if (right != null && !isInteger(right)) {\n            throw new Error(MSG.INVALID_OP_EXPR(ops.VALUE_AT));\n        }\n\n        return keyAt(left, right);\n    });\n\n    config.addTransformerToMap(OP_MATCH, (left, right, context) =>\n        test(left, v_ops.MATCH, processExprLikeValue(right, context), matchOptions, context)\n    );\n}\n"],"names":["transformersFactory","matchOptions","throwError","abortEarly","asPredicate","config","MSG","messages","UNARY","BINARY","OP_THIS","ops","THIS","OP_PARENT","PARENT","OP_ROOT","ROOT","OP_KEY","KEY","OP_GET_BY_INDEX","VALUE_AT","OP_GET_BY_KEY","GET_BY_KEY","OP_KEY_AT","KEY_AT","OP_MATCH","MATCH","addTransformerToMap","left","context","right","processExprLikeValue","isInteger","Error","INVALID_OP_EXPR","valueAt","getBy","obj","key","transform","keyAt","test","v_ops"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,+BAA+B;;;;;;;;;;;;IAS/B,OAoDC;eApDuBA;;IAFXC,YAAY;eAAZA;;;uBANiD;6EAC9C;0EACE;mEAC8B;0BAC3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEd,MAAMA,eAAe;IAAEC,YAAY;IAAOC,YAAY;IAAMC,aAAa;AAAK;AAEtE,SAASJ,oBAAoBK,MAAM;IAC9C,MAAMC,MAAMD,OAAOE,QAAQ;IAE3B,MAAMC,QAAQ;IACd,MAAMC,SAAS;IAEf,8BAA8B;IAC9B,MAAMC,UAAU;QAACC,6BAAG,CAACC,IAAI;QAAEJ;QAAO;QAAS;QAAO;KAAY;IAC9D,MAAMK,YAAY;QAACF,6BAAG,CAACG,MAAM;QAAEN;QAAO;QAAW;QAAO;KAAW;IACnE,MAAMO,UAAU;QAACJ,6BAAG,CAACK,IAAI;QAAER;QAAO;QAAS;QAAO;KAAS;IAC3D,MAAMS,SAAS;QAACN,6BAAG,CAACO,GAAG;QAAEV;QAAO;QAAQ;KAAQ;IAEhD,MAAMW,kBAAkB;QAACR,6BAAG,CAACS,QAAQ;QAAEX;QAAQ;QAAO;QAAe;QAAQ;KAAW,EAAE,oDAAoD;IAC9I,MAAMY,gBAAgB;QAACV,6BAAG,CAACW,UAAU;QAAEb;QAAQ;QAAY;KAAY,EAAE,mBAAmB;IAC5F,MAAMc,YAAY;QAACZ,6BAAG,CAACa,MAAM;QAAEf;QAAQ;QAAU;KAAU;IAE3D,MAAMgB,WAAW;QAACd,6BAAG,CAACe,KAAK;QAAEjB;QAAQ;QAAO;QAAQ;QAAU;QAAQ;QAAa;KAAQ;IAE3FJ,OAAOsB,mBAAmB,CAACjB,SAAS,CAACkB,MAAMC,UAAYA,QAAQjB,IAAI;IACnEP,OAAOsB,mBAAmB,CAACd,WAAW,CAACe,MAAMC,UAAYA,QAAQf,MAAM;IACvET,OAAOsB,mBAAmB,CAACZ,SAAS,CAACa,MAAMC,UAAYA,QAAQb,IAAI;IACnEX,OAAOsB,mBAAmB,CAACV,QAAQ,CAACW,MAAMC,UAAYA,QAAQX,GAAG;IAEjEb,OAAOsB,mBAAmB,CAACR,iBAAiB,CAACS,MAAME,OAAOD;QACtDC,QAAQC,IAAAA,+BAAoB,EAACD,OAAOD;QAEpC,IAAIC,SAAS,QAAQ,CAACE,IAAAA,gBAAS,EAACF,QAAQ;YACpC,MAAM,IAAIG,MAAM3B,IAAI4B,eAAe,CAACvB,6BAAG,CAACS,QAAQ;QACpD;QAEA,OAAOe,IAAAA,cAAO,EAACP,MAAME;IACzB;IAEAzB,OAAOsB,mBAAmB,CAACN,eAAe,CAACO,MAAME,OAAOD;QACpDC,QAAQC,IAAAA,+BAAoB,EAACD,OAAOD;QAEpC,OAAOO,IAAAA,YAAK,EAACR,MAAME,OAAO,CAACO,KAAKC,MAAQC,IAAAA,kBAAS,EAACF,KAAKC,KAAKT;IAChE;IAEAxB,OAAOsB,mBAAmB,CAACJ,WAAW,CAACK,MAAME,OAAOD;QAChDC,QAAQC,IAAAA,+BAAoB,EAACD,OAAOD;QAEpC,IAAIC,SAAS,QAAQ,CAACE,IAAAA,gBAAS,EAACF,QAAQ;YACpC,MAAM,IAAIG,MAAM3B,IAAI4B,eAAe,CAACvB,6BAAG,CAACS,QAAQ;QACpD;QAEA,OAAOoB,IAAAA,YAAK,EAACZ,MAAME;IACvB;IAEAzB,OAAOsB,mBAAmB,CAACF,UAAU,CAACG,MAAME,OAAOD,UAC/CY,IAAAA,cAAI,EAACb,MAAMc,0BAAK,CAAChB,KAAK,EAAEK,IAAAA,+BAAoB,EAACD,OAAOD,UAAU5B,cAAc4B;AAEpF"}