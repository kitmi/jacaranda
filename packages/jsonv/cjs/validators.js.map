{"version":3,"sources":["../src/validators.js"],"sourcesContent":["// JSON Validation Syntax\nimport { Types } from '@kitmi/types';\nimport { isPlainObject, get as _get } from '@kitmi/utils';\n\nimport _isEqual from 'lodash/isEqual';\nimport _has from 'lodash/has';\nimport _size from 'lodash/size';\nimport _castArray from 'lodash/castArray';\nimport _mapValues from 'lodash/mapValues';\n\nimport JsvError from './JsvError';\nimport validate, { test } from './validate';\n\nimport config, { contextVarKeys } from './config';\n\nimport ops from './validateOperators';\n\nconst MSG = config.messages;\n\nfunction evaluateWithContext(value, context) {\n    if (value == null) {\n        return null;\n    }\n\n    if (context == null) {\n        context = {};\n    }\n\n    const type = typeof value;\n\n    if (type === 'string') {\n        if (value.startsWith('$$')) {\n            //get from context\n            const pos = value.indexOf('.');\n            if (pos === -1) {\n                if (!contextVarKeys.has(value)) {\n                    throw new Error(MSG.SYNTAX_INVALID_CONTEXT(value));\n                }\n                return context[value];\n            }\n\n            const key = value.substring(0, pos);\n            if (!contextVarKeys.has(key)) {\n                throw new Error(MSG.SYNTAX_INVALID_CONTEXT(key));\n            }\n\n            return _get(context, value);\n        }\n\n        return value;\n    }\n\n    if (Array.isArray(value)) {\n        return value.map((item) => evaluateWithContext(item, context));\n    }\n\n    if (type === 'object') {\n        return _mapValues(value, (item) => evaluateWithContext(item, context));\n    }\n\n    return value;\n}\n\nconst processRightValue = (right, context) =>\n    context.jsonx && ((typeof right === 'string' && right[0] === '$') || isPlainObject(right))\n        ? context.jsonx(undefined, right, context, true)\n        : evaluateWithContext(right, context);\n\n//Validators [ name, ...operator alias ]\nconst OP_EQUAL = [ops.EQUAL, '$eq', '$eql', '$equal', '$being'];\nconst OP_NOT_EQUAL = [ops.NOT_EQUAL, '$ne', '$neq', '$notEqual'];\nconst OP_NOT = [ops.NOT, '$not'];\nconst OP_GREATER_THAN = [ops.GREATER_THAN, '$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = [ops.GREATER_THAN_OR_EQUAL, '$gte', '$>=', '$greaterThanOrEqual', '$min'];\nconst OP_LESS_THAN = [ops.LESS_THAN, '$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = [ops.LESS_THAN_OR_EQUAL, '$lte', '$<=', '$lessThanOrEqual', '$max'];\nconst OP_LENGTH = [ops.LENGTH, '$length', '$size', '$capacity'];\nconst OP_IN = [ops.IN, '$in'];\nconst OP_NOT_IN = [ops.NOT_IN, '$nin', '$notIn'];\nconst OP_EXISTS = [ops.EXISTS, '$exist', '$exists', '$notNull'];\nconst OP_REQUIRED = [ops.REQUIRED, '$required', '$mandatory'];\nconst OP_MATCH = [ops.MATCH, '$has', '$match', '$all', '$should'];\nconst OP_MATCH_ANY = [ops.MATCH_ANY, '$any', '$or', '$either'];\nconst OP_ALL_MATCH = [ops.ALL_MATCH, '$allMatch', '|>$all', '|>$match'];\nconst OP_ANY_ONE_MATCH = [ops.ANY_ONE_MATCH, '$anyOneMatch', '|*$any', '|*$match', '|*$either'];\nconst OP_TYPE = [ops.TYPE, '$is', '$typeOf'];\nconst OP_HAS_KEYS = [ops.HAS_KEYS, '$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = [ops.START_WITH, '$startWith', '$startsWith'];\nconst OP_END_WITH = [ops.END_WITH, '$endWith', '$endsWith'];\nconst OP_MATCH_PATTERN = [ops.MATCH_PATTERN, '$pattern', '$matchPattern', '$matchRegex'];\nconst OP_CONTAINS = [ops.CONTAINS, '$contain', '$contains', '$include', '$includes'];\nconst OP_SAME_AS = [ops.SAME_AS, '$sameAs'];\n\nconst OP_IF = [ops.IF, '$if'];\n\nconfig.addValidatorToMap(OP_EQUAL, (left, right, options, context) =>\n    _isEqual(left, processRightValue(right, context))\n);\nconfig.addValidatorToMap(\n    OP_NOT_EQUAL,\n    (left, right, options, context) => !_isEqual(left, processRightValue(right, context))\n);\nconfig.addValidatorToMap(OP_NOT, (left, ...args) => !test(left, ops.MATCH, ...args));\nconfig.addValidatorToMap(OP_GREATER_THAN, (left, right, options, context) => left > processRightValue(right, context));\nconfig.addValidatorToMap(\n    OP_GREATER_THAN_OR_EQUAL,\n    (left, right, options, context) => left >= processRightValue(right, context)\n);\nconfig.addValidatorToMap(OP_LESS_THAN, (left, right, options, context) => left < processRightValue(right, context));\nconfig.addValidatorToMap(\n    OP_LESS_THAN_OR_EQUAL,\n    (left, right, options, context) => left <= processRightValue(right, context)\n);\nconfig.addValidatorToMap(OP_LENGTH, (left, right, options, context) =>\n    test(_size(left), ops.MATCH, right, options, context)\n);\n\nconfig.addValidatorToMap(OP_IN, (left, right, options, context) => {\n    if (right == null) {\n        return false;\n    }\n\n    right = processRightValue(right, context);\n\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IN));\n    }\n\n    const equal = config.getValidator(ops.EQUAL);\n    return right.find((element) => equal(left, element, options, context));\n});\n\nconfig.addValidatorToMap(OP_NOT_IN, (left, right, options, context) => {\n    if (right == null) {\n        return true;\n    }\n\n    right = processRightValue(right, context);\n\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.NOT_IN));\n    }\n\n    const notEqual = config.getValidator(ops.NOT_EQUAL);\n\n    return right.every((element) => notEqual(left, element, options, context));\n});\n\nconfig.addValidatorToMap(OP_EXISTS, (left, right) => {\n    if (typeof right !== 'boolean') {\n        throw new Error(MSG.OPERAND_NOT_BOOL(ops.EXISTS));\n    }\n\n    return right ? left != null : left == null;\n});\n\nconfig.addValidatorToMap(OP_REQUIRED, (left, right) => {\n    right = processRightValue(right, context);\n\n    if (typeof right !== 'boolean') {\n        throw new Error(MSG.OPERAND_NOT_BOOL(ops.REQUIRED));\n    }\n\n    return right ? left != null : true;\n});\n\nconfig.addValidatorToMap(OP_MATCH, (left, right, options, context) => {\n    if (Array.isArray(right)) {\n        const errors = [];\n\n        right.every((rule) => {\n            const reason = validate(left, rule, { ...options, asPredicate: false }, context);\n\n            if (reason !== true) {\n                errors.push(..._castArray(reason));\n\n                if (options.abortEarly) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        if (errors.length > 0) {\n            if (options.throwError) {\n                throw new JsvError(errors, left, context.path);\n            }\n\n            if (!options.asPredicate) {\n                context.$$E = errors.length === 1 && options.plainError ? errors[0] : errors;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    const reason2 = validate(left, right, options, context);\n    if (reason2 !== true) {\n        if (!options.asPredicate) {\n            context.$$E = reason2;\n        }\n\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_MATCH_ANY, (left, right, options, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.MATCH_ANY));\n    }\n\n    let found = right.find((rule) => {\n        const reason = validate(left, rule, { ...options, abortEarly: false, throwError: false }, context);\n        return reason === true;\n    });\n\n    if (!found) {\n        context.$$E = MSG.validationErrors[ops.MATCH_ANY](context.name, left, right, context);\n    }\n\n    return found ? true : false;\n});\n\nconfig.addValidatorToMap(OP_ALL_MATCH, (left, right, options, context) => {\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.ALL_MATCH));\n    }\n\n    const errors = [];\n\n    left.every((leftItem) => {\n        const reason = validate(leftItem, right, { ...options, asPredicate: false }, context);\n        if (reason !== true) {\n            errors.push(MSG.validationErrors[ops.ALL_MATCH](context.name, left, right, context), ..._castArray(reason));\n\n            if (options.abortEarly) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (errors.length > 0) {\n        if (options.throwError) {\n            throw new JsvError(errors, left, context.path);\n        }\n\n        if (!options.asPredicate) {\n            context.$$E = errors.length === 1 && options.plainError ? errors[0] : errors;\n        }\n\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_ANY_ONE_MATCH, (left, right, options, context) => {\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.ANY_ONE_MATCH));\n    }\n\n    let found = left.find((leftItem) => {\n        const reason = validate(leftItem, right, { ...options, abortEarly: false, throwError: false }, context);\n        return reason === true;\n    });\n\n    if (!found) {\n        context.$$E = MSG.validationErrors[ops.ANY_ONE_MATCH](context.name, left, right, context);\n    }\n\n    return found ? true : false;\n});\n\nconfig.addValidatorToMap(OP_TYPE, (left, right, options, context) => {\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.TYPE));\n    }\n\n    if (!Types.primitives.has(right)) {\n        throw new Error(MSG.UNSUPPORTED_TYPE(right));\n    }\n\n    return Types[right].validate(left);\n});\n\nconfig.addValidatorToMap(OP_HAS_KEYS, (left, right) => {\n    if (typeof left !== 'object') {\n        return false;\n    }\n\n    return Array.isArray(right) ? right.every((key) => _has(left, key)) : _has(left, right);\n});\n\nconfig.addValidatorToMap(OP_START_WITH, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processRightValue(right, context);\n\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.START_WITH));\n    }\n\n    return left.startsWith(right);\n});\n\nconfig.addValidatorToMap(OP_END_WITH, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processRightValue(right, context);\n\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.END_WITH));\n    }\n\n    return left.endsWith(right);\n});\n\nconfig.addValidatorToMap(OP_MATCH_PATTERN, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processRightValue(right, context);\n\n    let pattern = right;\n    let flags;\n\n    if (Array.isArray(right)) {\n        if (right.length > 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(ops.MATCH_PATTERN));\n        }\n\n        pattern = right[0];\n        flags = right[1];\n    } else if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.MATCH_PATTERN));\n    }\n\n    return new RegExp(pattern, flags).test(left);\n});\n\nconfig.addValidatorToMap(OP_CONTAINS, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processRightValue(right, context);\n\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.CONTAINS));\n    }\n\n    return left.includes(right);\n});\n\nconfig.addValidatorToMap(OP_SAME_AS, (left, right, options, context) => {\n    if (typeof left === 'object') {\n        throw new Error(MSG.VALUE_NOT_PRIMITIVE(ops.SAME_AS));\n    }\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.SAME_AS));\n    }\n\n    return left === _get(context.$$P, right);\n});\n\nconfig.addValidatorToMap(OP_IF, (left, right, options, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IF));\n    }\n\n    if (right.length < 2 || right.length > 3) {\n        throw new Error(MSG.OPERAND_NOT_TUPLE_2_OR_3(ops.IF));\n    }\n\n    const condition = context.jsonx\n        ? context.jsonx(left, right[0], context, true)\n        : validate(left, right[0], { abortEarly: true, throwError: false, asPredicate: true }, context);\n\n    console.log({\n        condition,\n        left,\n        right\n    });\n\n    if (condition) {\n        return validate(left, right[1], options, context);\n    } else if (right.length > 2) {\n        return validate(left, right[2], options, context);\n    }\n\n    return true;\n});\n\nexport default validate;\n"],"names":["MSG","config","messages","evaluateWithContext","value","context","type","startsWith","pos","indexOf","contextVarKeys","has","Error","SYNTAX_INVALID_CONTEXT","key","substring","_get","Array","isArray","map","item","_mapValues","processRightValue","right","jsonx","isPlainObject","undefined","OP_EQUAL","ops","EQUAL","OP_NOT_EQUAL","NOT_EQUAL","OP_NOT","NOT","OP_GREATER_THAN","GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","OP_LESS_THAN","LESS_THAN","OP_LESS_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","OP_LENGTH","LENGTH","OP_IN","IN","OP_NOT_IN","NOT_IN","OP_EXISTS","EXISTS","OP_REQUIRED","REQUIRED","OP_MATCH","MATCH","OP_MATCH_ANY","MATCH_ANY","OP_ALL_MATCH","ALL_MATCH","OP_ANY_ONE_MATCH","ANY_ONE_MATCH","OP_TYPE","TYPE","OP_HAS_KEYS","HAS_KEYS","OP_START_WITH","START_WITH","OP_END_WITH","END_WITH","OP_MATCH_PATTERN","MATCH_PATTERN","OP_CONTAINS","CONTAINS","OP_SAME_AS","SAME_AS","OP_IF","IF","addValidatorToMap","left","options","_isEqual","args","test","_size","OPERAND_NOT_ARRAY","equal","getValidator","find","element","notEqual","every","OPERAND_NOT_BOOL","errors","rule","reason","validate","asPredicate","push","_castArray","abortEarly","length","throwError","JsvError","path","$$E","plainError","reason2","found","validationErrors","name","VALUE_NOT_ARRAY","leftItem","OPERAND_NOT_STRING","Types","primitives","UNSUPPORTED_TYPE","_has","endsWith","pattern","flags","OPERAND_NOT_TUPLE","RegExp","includes","VALUE_NOT_PRIMITIVE","$$P","OPERAND_NOT_TUPLE_2_OR_3","condition","console","log"],"mappings":"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"}