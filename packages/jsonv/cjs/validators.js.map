{"version":3,"sources":["../src/validators.js"],"sourcesContent":["// JSON Validation Syntax\nimport { Types } from '@kitmi/types';\nimport { get as _get } from '@kitmi/utils';\n\nimport _isEqual from 'lodash/isEqual';\nimport _has from 'lodash/has';\nimport _size from 'lodash/size';\nimport _castArray from 'lodash/castArray';\nimport _mapValues from 'lodash/mapValues';\n\nimport JsvError from './JsvError';\nimport validate, { test } from './validate';\n\nimport config from './config';\n\nimport ops from './validateOperators';\n\nconst MSG = config.messages;\n\nconst processExprLikeValue = (exprLikeValue, context) =>    \n    (typeof exprLikeValue === 'object' && exprLikeValue.$expr != null)\n        ? context.transform(undefined, exprLikeValue.$expr, context)\n        : exprLikeValue;\n\n//Validators [ name, ...operator alias ]\nconst OP_EQUAL = [ops.EQUAL, '$eq', '$eql', '$equal', '$being'];\nconst OP_NOT_EQUAL = [ops.NOT_EQUAL, '$ne', '$neq', '$notEqual'];\nconst OP_NOT = [ops.NOT, '$not'];\nconst OP_GREATER_THAN = [ops.GREATER_THAN, '$gt', '$>', '$greaterThan'];\nconst OP_GREATER_THAN_OR_EQUAL = [ops.GREATER_THAN_OR_EQUAL, '$gte', '$>=', '$greaterThanOrEqual', '$min'];\nconst OP_LESS_THAN = [ops.LESS_THAN, '$lt', '$<', '$lessThan'];\nconst OP_LESS_THAN_OR_EQUAL = [ops.LESS_THAN_OR_EQUAL, '$lte', '$<=', '$lessThanOrEqual', '$max'];\nconst OP_LENGTH = [ops.LENGTH, '$length', '$size', '$capacity'];\nconst OP_IN = [ops.IN, '$in'];\nconst OP_NOT_IN = [ops.NOT_IN, '$nin', '$notIn'];\nconst OP_EXISTS = [ops.EXISTS, '$exist', '$exists', '$notNull'];\nconst OP_REQUIRED = [ops.REQUIRED, '$required', '$mandatory'];\nconst OP_MATCH = [ops.MATCH, '$has', '$match', '$all', '$should'];\nconst OP_MATCH_ANY = [ops.MATCH_ANY, '$any', '$or', '$either'];\nconst OP_ALL_MATCH = [ops.ALL_MATCH, '$allMatch', '|>$all', '|>$match'];\nconst OP_ANY_ONE_MATCH = [ops.ANY_ONE_MATCH, '$anyOneMatch', '|*$any', '|*$match', '|*$either'];\nconst OP_TYPE = [ops.TYPE, '$is', '$typeOf'];\nconst OP_HAS_KEYS = [ops.HAS_KEYS, '$hasKey', '$hasKeys', '$withKey', '$withKeys'];\nconst OP_START_WITH = [ops.START_WITH, '$startWith', '$startsWith'];\nconst OP_END_WITH = [ops.END_WITH, '$endWith', '$endsWith'];\nconst OP_MATCH_PATTERN = [ops.MATCH_PATTERN, '$pattern', '$matchPattern', '$matchRegex'];\nconst OP_CONTAINS = [ops.CONTAINS, '$contain', '$contains', '$include', '$includes'];\nconst OP_SAME_AS = [ops.SAME_AS, '$sameAs'];\n\nconst OP_IF = [ops.IF, '$if'];\n\nconfig.addValidatorToMap(OP_EQUAL, (left, right, options, context) =>\n    _isEqual(left, processExprLikeValue(right, context))\n);\nconfig.addValidatorToMap(\n    OP_NOT_EQUAL,\n    (left, right, options, context) => !_isEqual(left, processExprLikeValue(right, context))\n);\nconfig.addValidatorToMap(OP_NOT, (left, ...args) => test(left, ops.MATCH, ...args) !== true);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN,\n    (left, right, options, context) => left > processExprLikeValue(right, context)\n);\nconfig.addValidatorToMap(\n    OP_GREATER_THAN_OR_EQUAL,\n    (left, right, options, context) => left >= processExprLikeValue(right, context)\n);\nconfig.addValidatorToMap(OP_LESS_THAN, (left, right, options, context) => left < processExprLikeValue(right, context));\nconfig.addValidatorToMap(\n    OP_LESS_THAN_OR_EQUAL,\n    (left, right, options, context) => left <= processExprLikeValue(right, context)\n);\nconfig.addValidatorToMap(OP_LENGTH, (left, right, options, context) =>\n    test(_size(left), ops.MATCH, right, options, context)\n);\n\nconfig.addValidatorToMap(OP_IN, (left, right, options, context) => {\n    if (right == null) {\n        return false;\n    }\n\n    right = processExprLikeValue(right, context);\n\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IN));\n    }\n\n    const equal = config.getValidator(ops.EQUAL);\n    return right.findIndex((element) => equal(left, element, options, context)) !== -1;\n});\n\nconfig.addValidatorToMap(OP_NOT_IN, (left, right, options, context) => {\n    if (right == null) {\n        return true;\n    }\n\n    right = processExprLikeValue(right, context);\n\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.NOT_IN));\n    }\n\n    const notEqual = config.getValidator(ops.NOT_EQUAL);\n\n    return right.every((element) => notEqual(left, element, options, context));\n});\n\nconfig.addValidatorToMap(OP_EXISTS, (left, right) => {\n    if (typeof right !== 'boolean') {\n        throw new Error(MSG.OPERAND_NOT_BOOL(ops.EXISTS));\n    }\n\n    return right ? left != null : left == null;\n});\n\nconfig.addValidatorToMap(OP_REQUIRED, (left, right) => {\n    right = processExprLikeValue(right, context);\n\n    if (typeof right !== 'boolean') {\n        throw new Error(MSG.OPERAND_NOT_BOOL(ops.REQUIRED));\n    }\n\n    return right ? left != null : true;\n});\n\nconfig.addValidatorToMap(OP_MATCH, (left, right, options, context) => {\n    if (Array.isArray(right)) {\n        const errors = [];\n\n        right.every((rule) => {\n            const reason = validate(left, rule, { ...options, asPredicate: false }, context);\n\n            if (reason !== true) {\n                errors.push(..._castArray(reason));\n\n                if (options.abortEarly) {\n                    return false;\n                }\n            }\n\n            return true;\n        });\n\n        if (errors.length > 0) {\n            if (options.throwError) {\n                throw new JsvError(errors, left, context.path);\n            }\n\n            if (!options.asPredicate) {\n                context.ERROR = errors.length === 1 && options.plainError ? errors[0] : errors;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    const reason2 = validate(left, right, options, context);\n    if (reason2 !== true) {\n        if (!options.asPredicate) {\n            context.ERROR = reason2;\n        }\n\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_MATCH_ANY, (left, right, options, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.MATCH_ANY));\n    }\n\n    let found = right.find((rule) => {\n        const reason = validate(left, rule, { ...options, abortEarly: false, throwError: false }, context);\n        return reason === true;\n    });\n\n    if (!found) {\n        context.ERROR = MSG.validationErrors[ops.MATCH_ANY](context.name, left, right, context);\n    }\n\n    return found ? true : false;\n});\n\nconfig.addValidatorToMap(OP_ALL_MATCH, (left, right, options, context) => {\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.ALL_MATCH));\n    }\n\n    const errors = [];\n\n    left.every((leftItem) => {\n        const reason = validate(leftItem, right, { ...options, asPredicate: false }, context);\n        if (reason !== true) {\n            errors.push(MSG.validationErrors[ops.ALL_MATCH](context.name, left, right, context), ..._castArray(reason));\n\n            if (options.abortEarly) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (errors.length > 0) {\n        if (options.throwError) {\n            throw new JsvError(errors, left, context.path);\n        }\n\n        if (!options.asPredicate) {\n            context.ERROR = errors.length === 1 && options.plainError ? errors[0] : errors;\n        }\n\n        return false;\n    }\n\n    return true;\n});\n\nconfig.addValidatorToMap(OP_ANY_ONE_MATCH, (left, right, options, context) => {\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(ops.ANY_ONE_MATCH));\n    }\n\n    let found = left.find((leftItem) => {\n        const reason = validate(leftItem, right, { ...options, abortEarly: false, throwError: false }, context);\n        return reason === true;\n    });\n\n    if (!found) {\n        context.ERROR = MSG.validationErrors[ops.ANY_ONE_MATCH](context.name, left, right, context);\n    }\n\n    return found ? true : false;\n});\n\nconfig.addValidatorToMap(OP_TYPE, (left, right, options, context) => {\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.TYPE));\n    }\n\n    if (!Types.primitives.has(right)) {\n        throw new Error(MSG.UNSUPPORTED_TYPE(right));\n    }\n\n    return Types[right].validate(left);\n});\n\nconfig.addValidatorToMap(OP_HAS_KEYS, (left, right) => {\n    if (typeof left !== 'object') {\n        return false;\n    }\n\n    return Array.isArray(right) ? right.every((key) => _has(left, key)) : _has(left, right);\n});\n\nconfig.addValidatorToMap(OP_START_WITH, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processExprLikeValue(right, context);\n\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.START_WITH));\n    }\n\n    return left.startsWith(right);\n});\n\nconfig.addValidatorToMap(OP_END_WITH, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processExprLikeValue(right, context);\n\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.END_WITH));\n    }\n\n    return left.endsWith(right);\n});\n\nconfig.addValidatorToMap(OP_MATCH_PATTERN, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processExprLikeValue(right, context);\n\n    let pattern = right;\n    let flags;\n\n    if (Array.isArray(right)) {\n        if (right.length > 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(ops.MATCH_PATTERN));\n        }\n\n        pattern = right[0];\n        flags = right[1];\n    } else if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.MATCH_PATTERN));\n    }\n\n    return new RegExp(pattern, flags).test(left);\n});\n\nconfig.addValidatorToMap(OP_CONTAINS, (left, right, options, context) => {\n    if (typeof left !== 'string') {\n        return false;\n    }\n\n    right = processExprLikeValue(right, context);\n\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.CONTAINS));\n    }\n\n    return left.includes(right);\n});\n\nconfig.addValidatorToMap(OP_SAME_AS, (left, right, options, context) => {\n    if (typeof left === 'object') {\n        throw new Error(MSG.VALUE_NOT_PRIMITIVE(ops.SAME_AS));\n    }\n    if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(ops.SAME_AS));\n    }\n\n    return left === _get(context.PARENT, right);\n});\n\nconfig.addValidatorToMap(OP_IF, (left, right, options, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(ops.IF));\n    }\n\n    if (right.length < 2 || right.length > 3) {\n        throw new Error(MSG.OPERAND_NOT_TUPLE_2_OR_3(ops.IF));\n    }\n\n    const condition = processExprLikeValue(right[0], context);   \n\n    let result = true;\n\n    if (condition) {\n        result = validate(left, right[1], options, context);\n    } else if (right.length > 2) {\n        result = validate(left, right[2], options, context);\n    }\n\n    return result;\n});\n\nexport default validate;\n"],"names":["MSG","config","messages","processExprLikeValue","exprLikeValue","context","$expr","transform","undefined","OP_EQUAL","ops","EQUAL","OP_NOT_EQUAL","NOT_EQUAL","OP_NOT","NOT","OP_GREATER_THAN","GREATER_THAN","OP_GREATER_THAN_OR_EQUAL","GREATER_THAN_OR_EQUAL","OP_LESS_THAN","LESS_THAN","OP_LESS_THAN_OR_EQUAL","LESS_THAN_OR_EQUAL","OP_LENGTH","LENGTH","OP_IN","IN","OP_NOT_IN","NOT_IN","OP_EXISTS","EXISTS","OP_REQUIRED","REQUIRED","OP_MATCH","MATCH","OP_MATCH_ANY","MATCH_ANY","OP_ALL_MATCH","ALL_MATCH","OP_ANY_ONE_MATCH","ANY_ONE_MATCH","OP_TYPE","TYPE","OP_HAS_KEYS","HAS_KEYS","OP_START_WITH","START_WITH","OP_END_WITH","END_WITH","OP_MATCH_PATTERN","MATCH_PATTERN","OP_CONTAINS","CONTAINS","OP_SAME_AS","SAME_AS","OP_IF","IF","addValidatorToMap","left","right","options","_isEqual","args","test","_size","Array","isArray","Error","OPERAND_NOT_ARRAY","equal","getValidator","findIndex","element","notEqual","every","OPERAND_NOT_BOOL","errors","rule","reason","validate","asPredicate","push","_castArray","abortEarly","length","throwError","JsvError","path","ERROR","plainError","reason2","found","find","validationErrors","name","VALUE_NOT_ARRAY","leftItem","OPERAND_NOT_STRING","Types","primitives","has","UNSUPPORTED_TYPE","key","_has","startsWith","endsWith","pattern","flags","OPERAND_NOT_TUPLE","RegExp","includes","VALUE_NOT_PRIMITIVE","_get","PARENT","OPERAND_NOT_TUPLE_2_OR_3","condition","result"],"mappings":"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"}