{"version":3,"sources":["../src/Jsvs.js"],"sourcesContent":["import config from './config';\nimport validate from './validators';\n\n/**\n * JSON Validation Syntax\n * @class\n */\nclass JSV {\n    static config = config;\n    static match = (value, jsv, options, context) => {\n        const reason = validate(\n            value,\n            jsv,\n            {\n                throwError: false,\n                abortEarly: true,\n                plainError: true,\n                ...options,\n            },\n            { config: this.config, ...context }\n        );\n        if (reason === true) {\n            return [true];\n        }\n\n        return [false, reason];\n    };\n\n    /**\n     * @param {object} value\n     */\n    constructor(value) {\n        this.value = value;\n    }\n\n    /**\n     * Match the value with expected conditions in JSON expression\n     * @param {object} expected - JSON match expression\n     * @throws ValidationError\n     * @returns {JSV}\n     */\n    match(expected) {\n        validate(this.value, expected, { throwError: true, abortEarly: true }, { config: this.constructor.config });\n        return this;\n    }\n}\n\nexport default JSV;\n"],"names":["JSV","match","expected","validate","value","throwError","abortEarly","config","constructor","jsv","options","context","reason","plainError"],"mappings":";;;;+BA+CA;;;eAAA;;;+DA/CmB;mEACE;;;;;;;;;;;;;;;;;;;AAErB;;;CAGC,GACD,MAAMA;IA4BF;;;;;KAKC,GACDC,MAAMC,QAAQ,EAAE;QACZC,IAAAA,mBAAQ,EAAC,IAAI,CAACC,KAAK,EAAEF,UAAU;YAAEG,YAAY;YAAMC,YAAY;QAAK,GAAG;YAAEC,QAAQ,IAAI,CAACC,WAAW,CAACD,MAAM;QAAC;QACzG,OAAO,IAAI;IACf;IAhBA;;KAEC,GACDC,YAAYJ,KAAK,CAAE;QACf,IAAI,CAACA,KAAK,GAAGA;IACjB;AAYJ;AArCI,iBADEJ,KACKO,UAASA,eAAM;AACtB,iBAFEP,KAEKC,SAAQ,CAACG,OAAOK,KAAKC,SAASC;IACjC,MAAMC,SAAST,IAAAA,mBAAQ,EACnBC,OACAK,KACA;QACIJ,YAAY;QACZC,YAAY;QACZO,YAAY;QACZ,GAAGH,OAAO;IACd,GACA;QAAEH,QAAQ,AAZhBP,IAYqBO,MAAM;QAAE,GAAGI,OAAO;IAAC;IAEtC,IAAIC,WAAW,MAAM;QACjB,OAAO;YAAC;SAAK;IACjB;IAEA,OAAO;QAAC;QAAOA;KAAO;AAC1B;MAqBJ,WAAeZ"}