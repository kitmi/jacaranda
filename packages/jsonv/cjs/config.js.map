{"version":3,"sources":["../src/config.js"],"sourcesContent":["import { formatPath, makePath } from './utils';\n\nexport class Config {\n    validatorHandlers = {};\n    mapOfValidators = {};\n\n    transformerHandlers = {};\n    mapOfTransformers = {};\n\n    messagesCache = {};\n\n    // default message handlers\n    messages = {\n        //Exception messages\n        SYNTAX_OP_NOT_ALONE: 'Transformer operator can only be used alone in one pipeline stage.',\n        SYNTAX_INVALID_EXPR: (expr) => `Invalid expression syntax: ${JSON.stringify(expr)}`, // complext expr, not split out operator yet\n        SYNTAX_INVALID_OP: (op, prefix) => `Invalid operator \"${op}\" at ${formatPath(prefix)}.`,\n        SYNTAX_NUMBER_AS_EXPR: 'Number value cannot be used as a transformer expression.',\n        SYNTAX_INVALID_CONTEXT: (key) => `Invalid context variable \"${key}\".`,\n\n        INVALID_TRANSFORMER_OP: (op) => `Invalid transformer operator \"${op}\".`,\n        UNSUPPORTED_VALIDATION_OP: (op, prefix) => `Unsupported validation operator \"${op}\" at ${formatPath(prefix)}.`,\n        INVALID_COLLECTION_OP: (op) => `Invalid collection operator \"${op}\".`,\n\n        INVALID_TRANSFORMER_HANDLER: (tag) => `Handler for transformer \"${tag}\" not found.`,\n        INVALID_TEST_HANLDER: (tag) => `Handler for validator \"${tag}\" not found.`,\n\n        INVALID_OP_EXPR: (op, right, expected) =>\n            `Invalid \"${op}\" expression: ${JSON.stringify(right)}` +\n            (expected ? `, expected: ${JSON.stringify(expected)}.` : '.'),\n        INVALID_COLLECTION_OP_EXPR: (collectionOp, op, right) =>\n            `Invalid \"${op}\" expression for collection \"${collectionOp}\" traversing: ${JSON.stringify(right)}.`,\n        UNSUPPORTED_TYPE: (type) => `Supported type \"${type}\".`,\n\n        OPERAND_NOT_TUPLE: (op) =>\n            `The right operand of a collection operator ${op ? '\"' + op + '\" ' : ''}must be a two-tuple.`,\n        OPERAND_NOT_TUPLE_2_OR_3: (op) =>\n            `The right operand of a \"${op}\" operator must be either a 2-tuple or a 3-tuple.`,\n        OPERAND_NOT_ARRAY: (op) => `The right operand of a \"${op}\" operator must be an array.`,\n        OPERAND_NOT_BOOL: (op) => `The right operand of a \"${op}\" operator must be a boolean value.`,\n        OPERAND_NOT_STRING: (op) => `The right operand of a \"${op}\" operator must be a string.`,\n        OPERAND_NOT_OBJECT: (op) => `The right operand of a \"${op}\" operator must be an object.`,\n\n        VALUE_NOT_ARRAY: (op) => `The value to take a \"${op}\" operator must be an array.`,\n        VALUE_NOT_COLLECTION: (op) => `The value to take a \"${op}\" operator must be either an object or an array.`,\n        VALUE_NOT_PRIMITIVE: (op) =>\n            `The value to take a \"${op}\" operator must be a primitive value, e.g. string, number.`,\n        VALUE_NOT_STRING: (op) => `The value to take a \"${op}\" operator must be a string.`,\n        VALUE_NOT_OBJECT: (op) => `The value to take a \"${op}\" operator must be an object.`,\n        VALUE_NOT_BOOL: (op) => `The evaluated value used as the condition of a \"${op}\" operator must be a boolean.`,\n\n        REQUIRE_RIGHT_OPERAND: (op) => `Binary operator \"${op}\" requires a right operand.`,\n        RIGHT_OPERAND_NOT_EMPTY: (op) => `Unary operator \"${op}\" does not require a right operand.`,\n\n        MULTI_ERRORS: (numErrors) => `${numErrors} errors occurred.`,\n    };\n\n    supportedLocales = new Set(['en', 'en-AU', 'en-GB', 'en-US', 'zh', 'zh-CN', 'zh-HK', 'zh-TW']);\n\n    getValidatorTag = (op) => this.mapOfValidators[op];\n    getValidator = (tag) => this.validatorHandlers[tag];\n\n    getTransformerTagAndType = (op) => this.mapOfTransformers[op];\n    getTransformer = (tag) => this.transformerHandlers[tag];\n\n    addValidatorToMap(tokens, handler) {\n        const [tag, ...alias] = tokens;\n\n        alias.forEach((op) => {\n            if (op in this.mapOfValidators) {\n                throw new Error(`Duplicate validator alias \"${op}\" for operator \"${tag}\".`);\n            }\n            this.mapOfValidators[op] = tag;\n        });\n\n        if (tag in this.validatorHandlers) {\n            throw new Error(`Duplicate operator name \"${tag}\".`);\n        }\n\n        return this.overrideValidator(tag, handler);\n    }\n\n    overrideValidator(tag, handler) {\n        this.validatorHandlers[tag] = handler;\n        return this;\n    }\n\n    addTransformerToMap(tokens, handler) {\n        const [tag, isUnary, ...alias] = tokens;\n\n        if (typeof isUnary !== 'boolean') {\n            throw new Error('The second param should be a boolean value.');\n        }\n\n        alias.forEach((op) => {\n            if (op in this.mapOfTransformers) {\n                throw new Error(`Duplicate transformer alias: \"${op}\" for operator \"${tag}\".`);\n            }\n            this.mapOfTransformers[op] = [tag, isUnary];\n        });\n\n        if (tag in this.transformerHandlers) {\n            throw new Error(`Duplicate operator name: \"${tag}\".`);\n        }\n\n        return this.overrideTransformer(tag, handler);\n    }\n\n    overrideTransformer(tag, handler) {\n        this.transformerHandlers[tag] = handler;\n        return this;\n    }\n\n    loadMessages(locale, moreMessages) {\n        this.messagesCache[locale] = moreMessages;\n        return this;\n    }\n\n    setLocale(locale) {\n        if (locale in this.messagesCache) {\n            Object.assign(this.messages, this.messagesCache[locale]);\n        }\n    }\n}\n\n//JSON Dynamic Expression Runtime Configuration\nconst config = new Config();\n\nexport const initContext = (context, currentValue) => {\n    if (context == null) {\n        context = {\n            config\n        };\n    }\n\n    if (!('THIS' in context)) {\n        context = {\n            ...context,\n            THIS: currentValue,\n            ROOT: currentValue,\n        };\n    }\n\n    return context;\n};\n\nexport const getChildContext = (context, currentValue, childKey, childValue) => ({\n    ...context,\n    path: makePath(childKey, context.path),\n    PARENT: currentValue,\n    THIS: childValue,\n    KEY: childKey,\n});\n\nexport default config;\n"],"names":["Config","getChildContext","initContext","addValidatorToMap","tokens","handler","tag","alias","forEach","op","mapOfValidators","Error","validatorHandlers","overrideValidator","addTransformerToMap","isUnary","mapOfTransformers","transformerHandlers","overrideTransformer","loadMessages","locale","moreMessages","messagesCache","setLocale","Object","assign","messages","SYNTAX_OP_NOT_ALONE","SYNTAX_INVALID_EXPR","expr","JSON","stringify","SYNTAX_INVALID_OP","prefix","formatPath","SYNTAX_NUMBER_AS_EXPR","SYNTAX_INVALID_CONTEXT","key","INVALID_TRANSFORMER_OP","UNSUPPORTED_VALIDATION_OP","INVALID_COLLECTION_OP","INVALID_TRANSFORMER_HANDLER","INVALID_TEST_HANLDER","INVALID_OP_EXPR","right","expected","INVALID_COLLECTION_OP_EXPR","collectionOp","UNSUPPORTED_TYPE","type","OPERAND_NOT_TUPLE","OPERAND_NOT_TUPLE_2_OR_3","OPERAND_NOT_ARRAY","OPERAND_NOT_BOOL","OPERAND_NOT_STRING","OPERAND_NOT_OBJECT","VALUE_NOT_ARRAY","VALUE_NOT_COLLECTION","VALUE_NOT_PRIMITIVE","VALUE_NOT_STRING","VALUE_NOT_OBJECT","VALUE_NOT_BOOL","REQUIRE_RIGHT_OPERAND","RIGHT_OPERAND_NOT_EMPTY","MULTI_ERRORS","numErrors","supportedLocales","Set","getValidatorTag","getValidator","getTransformerTagAndType","getTransformer","config","context","currentValue","THIS","ROOT","childKey","childValue","path","makePath","PARENT","KEY"],"mappings":"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"}