{"version":3,"sources":["../src/azureSpeech.js"],"sourcesContent":["import Feature from '../../jacaranda/src/Feature';\n\nconst voiceMapping = {\n    'zh': 'zh-CN-XiaoxiaoNeural',\n    'zh-CN': 'zh-CN-XiaoxiaoNeural',\n    'en-US': 'en-US-JaneNeural',\n    'en-GB': 'en-GB-LibbyNeural',\n    'en-AU': 'en-AU-AnnetteNeural',\n    'zh-Hant': 'zh-CN-XiaoxiaoNeural',\n    'zh-HK': 'zh-HK-HiuMaanNeural',\n    'zh-TW': 'zh-TW-HsiaoChenNeural',\n    'ja': 'ja-JP-AoiNeural',\n    'ko': 'ko-KR-SoonBokNeural',\n};\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    packages: ['microsoft-cognitiveservices-speech-sdk'],\n\n    load_: async function (app, options, name) {\n        const sdk = await app.tryRequire_('microsoft-cognitiveservices-speech-sdk', false);\n\n        const { apiKey, region } = app.featureConfig(options, {\n            schema: {\n                apiKey: { type: 'text' },\n                region: { type: 'text' },\n            },\n        });\n\n        const service = {\n            async speakToFile_(text, filename, language) {\n                const voiceName =\n                    voiceMapping[language] ?? 'en-US-JennyMultilingualNeural';\n\n                const speechConfig = sdk.SpeechConfig.fromSubscription(\n                    apiKey,\n                    region\n                );\n\n                // setting the synthesis language, voice name, and output audio format.\n                // see https://aka.ms/speech/tts-languages for available languages and voices\n                //speechConfig.speechSynthesisLanguage = language;\n                speechConfig.speechSynthesisVoiceName = voiceName;\n                speechConfig.speechSynthesisOutputFormat =\n                    sdk.SpeechSynthesisOutputFormat.Audio24Khz48KBitRateMonoMp3;\n\n                // now create the audio-config pointing to the output file.\n                // You can also use audio output stream to initialize the audio config, see the docs for details.\n                const audioConfig =\n                    sdk.AudioConfig.fromAudioFileOutput(filename);\n\n                // create the speech synthesizer.\n                let synthesizer = new sdk.SpeechSynthesizer(\n                    speechConfig,\n                    audioConfig\n                );\n\n                // start the synthesizer and wait for a result.\n                return new Promise((resolve, reject) => {\n                    synthesizer.speakTextAsync(\n                        text,\n                        function (result) {\n                            synthesizer.close();\n                            synthesizer = undefined;\n                            resolve(result);\n                        },\n                        function (err) {\n                            synthesizer.close();\n                            synthesizer = undefined;\n                            reject(err);\n                        }\n                    );\n                });\n            },\n\n            async speakToBuffer_(text, language) {\n                const voiceName =\n                    voiceMapping[language] ?? 'en-US-JennyMultilingualNeural';\n\n                const speechConfig = sdk.SpeechConfig.fromSubscription(\n                    apiKey,\n                    region\n                );\n\n                speechConfig.speechSynthesisVoiceName = voiceName;\n                speechConfig.speechSynthesisOutputFormat =\n                    sdk.SpeechSynthesisOutputFormat.Audio16Khz64KBitRateMonoMp3;\n\n                let synthesizer = new sdk.SpeechSynthesizer(speechConfig);\n\n                return new Promise((resolve, reject) => {\n                    synthesizer.speakTextAsync(\n                        text,\n                        (result) => {\n                            synthesizer.close();\n                            synthesizer = undefined;\n\n                            console.log(result);\n\n                            // convert arrayBuffer to stream\n                            // return stream\n                            \n                            resolve(result.audioData);\n                        },\n                        (err) => {\n                            synthesizer.close();\n                            synthesizer = undefined;\n                            reject(err);\n                        }\n                    );\n                });\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["voiceMapping","stage","Feature","SERVICE","groupable","packages","load_","app","options","name","sdk","tryRequire_","apiKey","region","featureConfig","schema","type","service","speakToFile_","text","filename","language","voiceName","speechConfig","SpeechConfig","fromSubscription","speechSynthesisVoiceName","speechSynthesisOutputFormat","SpeechSynthesisOutputFormat","Audio24Khz48KBitRateMonoMp3","audioConfig","AudioConfig","fromAudioFileOutput","synthesizer","SpeechSynthesizer","Promise","resolve","reject","speakTextAsync","result","close","undefined","err","speakToBuffer_","Audio16Khz64KBitRateMonoMp3","console","log","audioData","registerService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAeA;;;eAAA;;;gEAfoB;;;;;;AAEpB,MAAMA,eAAe;IACjB,MAAM;IACN,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,WAAW;IACX,SAAS;IACT,SAAS;IACT,MAAM;IACN,MAAM;AACV;MAEA,WAAe;IACXC,OAAOC,gBAAO,CAACC,OAAO;IAEtBC,WAAW;IAEXC,UAAU;QAAC;KAAyC;IAEpDC,OAAO,eAAgBC,GAAG,EAAEC,OAAO,EAAEC,IAAI;QACrC,MAAMC,MAAM,MAAMH,IAAII,WAAW,CAAC,0CAA0C;QAE5E,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE,GAAGN,IAAIO,aAAa,CAACN,SAAS;YAClDO,QAAQ;gBACJH,QAAQ;oBAAEI,MAAM;gBAAO;gBACvBH,QAAQ;oBAAEG,MAAM;gBAAO;YAC3B;QACJ;QAEA,MAAMC,UAAU;YACZ,MAAMC,cAAaC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ;gBACvC,MAAMC,YACFtB,YAAY,CAACqB,SAAS,IAAI;gBAE9B,MAAME,eAAeb,IAAIc,YAAY,CAACC,gBAAgB,CAClDb,QACAC;gBAGJ,uEAAuE;gBACvE,6EAA6E;gBAC7E,kDAAkD;gBAClDU,aAAaG,wBAAwB,GAAGJ;gBACxCC,aAAaI,2BAA2B,GACpCjB,IAAIkB,2BAA2B,CAACC,2BAA2B;gBAE/D,2DAA2D;gBAC3D,iGAAiG;gBACjG,MAAMC,cACFpB,IAAIqB,WAAW,CAACC,mBAAmB,CAACZ;gBAExC,iCAAiC;gBACjC,IAAIa,cAAc,IAAIvB,IAAIwB,iBAAiB,CACvCX,cACAO;gBAGJ,+CAA+C;gBAC/C,OAAO,IAAIK,QAAQ,CAACC,SAASC;oBACzBJ,YAAYK,cAAc,CACtBnB,MACA,SAAUoB,MAAM;wBACZN,YAAYO,KAAK;wBACjBP,cAAcQ;wBACdL,QAAQG;oBACZ,GACA,SAAUG,GAAG;wBACTT,YAAYO,KAAK;wBACjBP,cAAcQ;wBACdJ,OAAOK;oBACX;gBAER;YACJ;YAEA,MAAMC,gBAAexB,IAAI,EAAEE,QAAQ;gBAC/B,MAAMC,YACFtB,YAAY,CAACqB,SAAS,IAAI;gBAE9B,MAAME,eAAeb,IAAIc,YAAY,CAACC,gBAAgB,CAClDb,QACAC;gBAGJU,aAAaG,wBAAwB,GAAGJ;gBACxCC,aAAaI,2BAA2B,GACpCjB,IAAIkB,2BAA2B,CAACgB,2BAA2B;gBAE/D,IAAIX,cAAc,IAAIvB,IAAIwB,iBAAiB,CAACX;gBAE5C,OAAO,IAAIY,QAAQ,CAACC,SAASC;oBACzBJ,YAAYK,cAAc,CACtBnB,MACA,CAACoB;wBACGN,YAAYO,KAAK;wBACjBP,cAAcQ;wBAEdI,QAAQC,GAAG,CAACP;wBAEZ,gCAAgC;wBAChC,gBAAgB;wBAEhBH,QAAQG,OAAOQ,SAAS;oBAC5B,GACA,CAACL;wBACGT,YAAYO,KAAK;wBACjBP,cAAcQ;wBACdJ,OAAOK;oBACX;gBAER;YACJ;QACJ;QAEAnC,IAAIyC,eAAe,CAACvC,MAAMQ;IAC9B;AACJ"}