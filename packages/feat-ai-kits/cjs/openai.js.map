{"version":3,"sources":["../src/openai.js"],"sourcesContent":["import { ExternalServiceError } from '@kitmi/types';\nimport { xNull } from '@kitmi/utils';\nimport Feature from '../../jacaranda/src/Feature';\n\nconst IMAGE_SIZE = ['256x256', '512x512', '1024x1024'];\n\nexport default {\n    stage: Feature.SERVICE,\n\n    groupable: true,\n\n    packages: ['openai'],\n\n    load_: async function (app, options, name) {\n        const OpenAI = await app.tryRequire_('openai');\n\n        const { embeddingModel, asrModel, ..._options } = app.featureConfig(options, {\n            schema: {\n                organization: { type: 'text' },\n                apiKey: { type: 'text' },\n                asrModel: { type: 'text', default: 'whisper-1' },\n                embeddingModel: { type: 'text', default: 'text-embedding-ada-002' },\n            },\n        });\n\n        const openai = new OpenAI(_options);\n\n        const service = {\n            get maxEmbeddingTokens() {\n                return 8191; // depends on embeddingModel\n            },\n\n            systemMessage: (content) => ({\n                role: 'system',\n                content,\n            }),\n\n            userMessage: (content) => ({\n                role: 'user',\n                content,\n            }),\n\n            assistantMessage: (content) => ({\n                role: 'assistant',\n                content,\n            }),\n\n            functionMessage: (name, content) => ({\n                role: 'function',\n                name,\n                content,\n            }),\n\n            listModels_: async () => {\n                const result = await openai.listModels();\n                return result.data;\n            },\n\n            createAgent: (options) => ({\n                async call(messages, { model, temperature, top_n, stop }) {\n                    const req = xNull({\n                        model,\n                        messages,\n                        ...options,\n                        temperature,\n                        top_n,\n                        stop,\n                    });\n\n                    return service.getChatCompletion_(req);\n                },\n            }),\n\n            getEmbeddings_: async (textOrArray) => {\n                try {\n                    const result = await openai.createEmbedding({\n                        model: embeddingModel,\n                        input: textOrArray,\n                    });\n                    return result.data; // array of embeddings\n                } catch (err) {\n                    let error = err.response ? err.response.data.error : err;\n                    throw new ExternalServiceError('Failed to createEmbedding', error);\n                }\n            },\n\n            getChatCompletion_: async (request) => {\n                try {\n                    const result = await openai.chat.completions.create(request);\n                    return result;\n                } catch (err) {\n                    if (err instanceof OpenAI.APIError) {\n                        console.log(err.status); // 400\n                        console.log(err.name); // BadRequestError\n                        console.log(err.headers); // {server: 'nginx', ...}\n\n                        throw new ExternalServiceError('Failed to createChatCompletion', err);\n                    } else {\n                        throw err;\n                    }\n                }\n            },\n\n            /**\n             * Speech to text\n             * @param audioStream\n             */\n            getAudioTranscription_: async (audioStream) => {\n                try {\n                    const response = await openai.createTranscription(audioStream, asrModel);\n\n                    if (response) {\n                        return response.data;\n                    }\n                } catch (err) {\n                    let error = err.response ? err.response.data.error : err;\n                    throw new ExternalServiceError('Failed to createTranscription', error);\n                }\n\n                return undefined;\n            },\n\n            generatImage_: async (prompt, imageSizeScale, userId) => {\n                const size = IMAGE_SIZE[imageSizeScale ?? 0];\n\n                try {\n                    const response = await openai.createImage({\n                        prompt,\n                        n: 1,\n                        size,\n                        user: userId,\n                    });\n                    if (response) {\n                        return response.data[0];\n                    }\n                } catch (err) {\n                    let error = err.response ? err.response.data.error : err;\n                    throw new ExternalServiceError('Failed to createImage', error);\n                }\n\n                return undefined;\n            },\n        };\n\n        app.registerService(name, service);\n    },\n};\n"],"names":["IMAGE_SIZE","stage","Feature","SERVICE","groupable","packages","load_","app","options","name","OpenAI","tryRequire_","embeddingModel","asrModel","_options","featureConfig","schema","organization","type","apiKey","default","openai","service","maxEmbeddingTokens","systemMessage","content","role","userMessage","assistantMessage","functionMessage","listModels_","result","listModels","data","createAgent","call","messages","model","temperature","top_n","stop","req","xNull","getChatCompletion_","getEmbeddings_","textOrArray","createEmbedding","input","err","error","response","ExternalServiceError","request","chat","completions","create","APIError","console","log","status","headers","getAudioTranscription_","audioStream","createTranscription","undefined","generatImage_","prompt","imageSizeScale","userId","size","createImage","n","user","registerService"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}