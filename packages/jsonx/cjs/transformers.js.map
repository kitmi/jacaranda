{"version":3,"sources":["../src/transformers.js"],"sourcesContent":["// JSON Expression Syntax (JES)\nimport { remap, isPlainObject, get as _get, template, filterNull, objectToArray } from '@kitmi/utils';\nimport { Types, typeOf } from '@kitmi/types';\nimport { validate, test, OP as v_ops } from '@kitmi/jsonv';\n\nimport _size from 'lodash/size';\nimport _reduce from 'lodash/reduce';\nimport _reverse from 'lodash/reverse';\nimport _keys from 'lodash/keys';\nimport _values from 'lodash/values';\nimport _pick from 'lodash/pick';\nimport _pickBy from 'lodash/pickBy';\nimport _nth from 'lodash/nth';\nimport _omit from 'lodash/omit';\nimport _omitBy from 'lodash/omitBy';\nimport _groupBy from 'lodash/groupBy';\nimport _sortBy from 'lodash/sortBy';\nimport _filter from 'lodash/filter';\nimport _map from 'lodash/map';\nimport _mapValues from 'lodash/mapValues';\nimport _findIndex from 'lodash/findIndex';\nimport _findKey from 'lodash/findKey';\nimport _find from 'lodash/find';\nimport _isEqual from 'lodash/isEqual';\nimport _each from 'lodash/each';\n\nimport config, { getChildContext } from './config';\nimport t_ops from './transformerOperators';\n\nimport transform from './transform';\n\nconst MSG = config.messages;\n\nconst UNARY = true;\nconst BINARY = false;\n\n//Query & aggregate operators (pure)\nconst OP_MATCH = [t_ops.MATCH, BINARY, '$has', '$match', '$all', '$validate', '$when'];\nconst OP_SIZE = [t_ops.SIZE, UNARY, '$size', '$length', '$count'];\nconst OP_SUM = [t_ops.SUM, UNARY, '$sum', '$total'];\nconst OP_GET_TYPE = [t_ops.GET_TYPE, UNARY, '$type'];\nconst OP_GET_BY_INDEX = [t_ops.GET_BY_INDEX, BINARY, '$at', '$getByIndex', '$nth']; // supports -1 as the last index, -2 the second last\nconst OP_GET_BY_KEY = [t_ops.GET_BY_KEY, BINARY, '$of', '$valueOf', '$getByKey']; // support key path\nconst OP_FIND_INDEX = [t_ops.FIND_INDEX, BINARY, '$findIndex', '$indexOf', '$keyOf'];\nconst OP_FIND = [t_ops.FIND, BINARY, '$find'];\nconst OP_IF = [t_ops.IF, BINARY, '$if'];\nconst OP_CAST_ARRAY = [t_ops.CAST_ARRAY, UNARY, '$castArray', '$makeArray'];\n\n//Math operators (pure)\nconst OP_ADD = [t_ops.ADD, BINARY, '$add', '$plus', '$inc', '$+'];\nconst OP_SUB = [t_ops.SUB, BINARY, '$sub', '$subtract', '$minus', '$dec', '$-'];\nconst OP_MUL = [t_ops.MUL, BINARY, '$mul', '$multiply', '$times', '$*'];\nconst OP_DIV = [t_ops.DIV, BINARY, '$div', '$divide', '$/'];\nconst OP_MOD = [t_ops.MOD, BINARY, '$mod', '$remainder', '$%'];\nconst OP_POW = [t_ops.POW, BINARY, '$pow', '$power', '$^'];\n\n//Collection operators (pure)\nconst OP_KEYS = [t_ops.KEYS, UNARY, '$keys'];\nconst OP_VALUES = [t_ops.VALUES, UNARY, '$values'];\nconst OP_ENTRIES = [t_ops.ENTRIES, UNARY, '$entries', '$pairs'];\nconst OP_FILTER_NULL = [t_ops.FILTER_NULL, UNARY, '$filterNull', '$filterNullValues'];\n\nconst OP_OBJ_TO_ARRAY = [t_ops.OBJ_TO_ARRAY, BINARY, '$toArray', '$objectToArray'];\nconst OP_PICK = [t_ops.PICK, BINARY, '$pick', '$pickBy', '$filterByKeys']; // filter by key\nconst OP_OMIT = [t_ops.OMIT, BINARY, '$omit', '$omitBy'];\nconst OP_SLICE = [t_ops.SLICE, BINARY, '$slice', '$limit'];\nconst OP_GROUP = [t_ops.GROUP, BINARY, '$group', '$groupBy'];\nconst OP_SORT = [t_ops.SORT, BINARY, '$sort', '$orderBy', '$sortBy'];\nconst OP_REVERSE = [t_ops.REVERSE, UNARY, '$reverse'];\nconst OP_JOIN = [t_ops.JOIN, BINARY, '$join', '$implode'];\nconst OP_MERGE = [t_ops.MERGE, BINARY, '$merge']; // merge a list of transform result over the value\nconst OP_FILTER = [t_ops.FILTER, BINARY, '$filter', '$select', '$filterByValue']; // filter by value\nconst OP_REMAP = [t_ops.REMAP, BINARY, '$remap', '$mapKeys']; // reverse-map, map a key to another name\nconst OP_TO_JSON = [t_ops.TO_JSON, UNARY, '$json', '$toJSON', '$stringify'];\nconst OP_TO_OBJ = [t_ops.TO_OBJ, UNARY, '$object', '$toObject', '$parseJSON'];\n\n//Value updater (pure)\nconst OP_SET = [t_ops.SET, BINARY, '$set', '$=', '$value'];\nconst OP_ADD_ITEM = [t_ops.ADD_ITEM, BINARY, '$addItem', '$addFields'];\nconst OP_ASSIGN = [t_ops.ASSIGN, BINARY, '$assign', '$override', '$replace']; // will delete undefined entries\nconst OP_APPLY = [t_ops.APPLY, BINARY, '$apply', '$eval']; // to be used in collection, e.g. |>$apply\n\nconst OP_SANITIZE = [t_ops.SANITIZE, BINARY, '$sanitize'];\n\n//String manipulate\nconst OP_SPLIT = [t_ops.SPLIT, BINARY, '$split', '$explode'];\nconst OP_INTERPOLATE = [t_ops.INTERPOLATE, BINARY, '$interpolate', '$template'];\n\n// [ <op name>, <unary> ]\n//embeded validators in processing pipeline\nconst matchOptions = { throwError: false, abortEarly: true, asPredicate: true };\n\nconfig.addTransformerToMap(OP_MATCH, (left, right, context) =>\n    test(left, v_ops.MATCH, right, matchOptions, { ...context, jsonx: transform })\n);\n\nconfig.addTransformerToMap(OP_SIZE, (left) => _size(left));\n\nconfig.addTransformerToMap(OP_SUM, (left) =>\n    _reduce(\n        left,\n        (sum, item) => {\n            sum += item;\n            return sum;\n        },\n        0\n    )\n);\n\nconfig.addTransformerToMap(OP_GET_TYPE, (left) => typeOf(left));\n\nconfig.addTransformerToMap(OP_GET_BY_INDEX, (left, right) => _nth(left, right));\nconfig.addTransformerToMap(OP_GET_BY_KEY, (left, right) => _get(left, right));\n\nconfig.addTransformerToMap(OP_FIND_INDEX, (left, right, context) => {\n    let jvs;\n    let fromIndex = 0;\n\n    if (Array.isArray(right)) {\n        if (!Array.isArray(left)) {\n            throw new Error(MSG.INVALID_OP_EXPR(t_ops.FIND_INDEX));\n        }\n\n        if (right.length !== 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(t_ops.FIND_INDEX));\n        }\n\n        jvs = right[0];\n        fromIndex = right[1];\n    } else {\n        jvs = right;\n    }\n\n    const predicate = (value, key) =>\n        validate(value, jvs, matchOptions, getChildContext(context, left, key, value, { jsonx: transform }));\n\n    return Array.isArray(left) ? _findIndex(left, predicate, fromIndex) : _findKey(left, predicate);\n});\n\nconfig.addTransformerToMap(OP_FIND, (left, right, context) => {\n    let jvs;\n    let fromIndex = 0;\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(t_ops.FIND_INDEX));\n        }\n\n        jvs = right[0];\n        fromIndex = right[1];\n    } else {\n        jvs = right;\n    }\n\n    const predicate = (value, key) =>\n        validate(value, jvs, matchOptions, getChildContext(context, left, key, value, { jsonx: transform }));\n\n    return _find(left, predicate, fromIndex);\n});\n\nconfig.addTransformerToMap(OP_IF, (left, right, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(t_ops.IF));\n    }\n\n    if (right.length < 2 || right.length > 3) {\n        throw new Error(MSG.OPERAND_NOT_TUPLE_2_OR_3(t_ops.IF));\n    }\n\n    const condition = transform(left, right[0], context);\n\n    if (condition) {\n        return transform(left, right[1], context);\n    } else if (right.length > 2) {\n        return transform(left, right[2], context);\n    }\n\n    return left;\n});\n\nconfig.addTransformerToMap(OP_CAST_ARRAY, (left) => (left == null ? null : Array.isArray(left) ? left : [left]));\n\nconfig.addTransformerToMap(OP_ADD, (left, right) => left + right);\nconfig.addTransformerToMap(OP_SUB, (left, right) => left - right);\nconfig.addTransformerToMap(OP_MUL, (left, right) => left * right);\nconfig.addTransformerToMap(OP_DIV, (left, right) => left / right);\nconfig.addTransformerToMap(OP_MOD, (left, right) => left % right);\nconfig.addTransformerToMap(OP_POW, (left, right) => left ** right);\n\nconfig.addTransformerToMap(OP_KEYS, (left) => _keys(left));\nconfig.addTransformerToMap(OP_VALUES, (left) => _values(left));\nconfig.addTransformerToMap(OP_ENTRIES, (left) => _map(left, (value, key) => [key, value]));\nconfig.addTransformerToMap(OP_OBJ_TO_ARRAY, (left, right) => {\n    if (right == null) {\n        return objectToArray(left);\n    }\n\n    return _map(left, (v, k) => transform(v, right, getChildContext(context, left, k, v), true));\n});\nconfig.addTransformerToMap(OP_FILTER_NULL, (left) => filterNull(left));\n\nconfig.addTransformerToMap(OP_PICK, (left, right, context) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof right !== 'object') {\n        right = [right];\n    }\n\n    if (Array.isArray(right)) {\n        return _pick(left, right);\n    }\n\n    return _pickBy(left, (item, key) =>\n        test(key, v_ops.MATCH, right, matchOptions, getChildContext(context, left, key, item, { jsonx: transform }))\n    );\n});\n\nconfig.addTransformerToMap(OP_OMIT, (left, right, context) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof right !== 'object') {\n        right = [right];\n    }\n\n    if (Array.isArray(right)) {\n        return _omit(left, right);\n    }\n\n    return _omitBy(left, (item, key) =>\n        test(key, v_ops.MATCH, right, matchOptions, getChildContext(context, left, key, item, { jsonx: transform }))\n    );\n});\n\nconfig.addTransformerToMap(OP_SLICE, (left, right) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (!Array.isArray(left)) {\n        return new Error(MSG.VALUE_NOT_ARRAY(t_ops.SLICE));\n    }\n\n    if (Number.isInteger(right)) {\n        return left.slice(right);\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length === 0 || right.length > 2) {\n            return new Error(MSG.INVALID_OP_EXPR(t_ops.SLICE, right, ['integer', '[integer]']));\n        }\n\n        return left.slice(...right);\n    }\n\n    return new Error(MSG.INVALID_OP_EXPR(t_ops.SLICE, right));\n});\n\nconfig.addTransformerToMap(OP_GROUP, (left, right) => _groupBy(left, right));\nconfig.addTransformerToMap(OP_SORT, (left, right) => _sortBy(left, right));\nconfig.addTransformerToMap(OP_REVERSE, (left) => _reverse(left));\n\nconfig.addTransformerToMap(OP_JOIN, (left, right) => {\n    if (left == null) {\n        return null;\n    }\n    if (!Array.isArray(left)) {\n        throw new Error(MSG.VALUE_NOT_ARRAY(t_ops.JOIN));\n    }\n\n    return left.join(right.toString());\n});\n\nconst objectMerger = (left, context) => [(result, expr) => Object.assign(result, transform(left, expr, context)), {}];\n\nconst arrayMerger = (left, context) => [(result, expr) => [...result, ...transform(left, expr, context)], []];\n\nconfig.addTransformerToMap(OP_MERGE, (left, right, context) => {\n    if (!Array.isArray(right)) {\n        throw new Error(MSG.OPERAND_NOT_ARRAY(t_ops.MERGE));\n    }\n\n    return right.reduce(...(Array.isArray(left) ? arrayMerger(left, context) : objectMerger(left, context)));\n});\n\nconfig.addTransformerToMap(OP_FILTER, (left, right, context) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof left !== 'object') {\n        throw new Error(MSG.VALUE_NOT_COLLECTION(t_ops.FILTER));\n    }\n\n    return _filter(left, (value, key) =>\n        test(value, v_ops.MATCH, right, matchOptions, getChildContext(context, left, key, value, { jsonx: transform }))\n    );\n});\nconfig.addTransformerToMap(OP_REMAP, (left, right) => {\n    if (left == null) {\n        return null;\n    }\n\n    if (typeof left !== 'object') {\n        throw new Error(MSG.VALUE_NOT_COLLECTION(t_ops.REMAP));\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(t_ops.REMAP));\n        }\n\n        if (!isPlainObject(right[0]) || (right[1] != null && typeof right[1] !== 'boolean')) {\n            throw new Error(MSG.INVALID_OP_EXPR(t_ops.REMAP, right, ['object', 'boolean']));\n        }\n\n        return remap(left, right[0], right[1]);\n    }\n\n    if (!isPlainObject(right)) {\n        throw new Error(MSG.OPERAND_NOT_OBJECT(t_ops.REMAP));\n    }\n\n    return remap(left, right);\n});\n\nconfig.addTransformerToMap(OP_TO_JSON, (left) => (left == null ? left : JSON.stringify(left)));\nconfig.addTransformerToMap(OP_TO_OBJ, (left) => (left == null ? left : JSON.parse(left)));\n\nconfig.addTransformerToMap(OP_SET, (left, right, context) => transform(undefined, right, context, true));\nconfig.addTransformerToMap(OP_ADD_ITEM, (left, right, context) => {\n    if (typeof left !== 'object') {\n        throw new Error(MSG.VALUE_NOT_COLLECTION(t_ops.ADD_ITEM));\n    }\n\n    if (Array.isArray(left)) {\n        return left.concat(transform(left, right, context));\n    }\n\n    if (!Array.isArray(right) || right.length !== 2) {\n        throw new Error(MSG.OPERAND_NOT_TUPLE(t_ops.ADD_ITEM));\n    }\n\n    if (typeof right[0] !== 'string') {\n        throw new Error(MSG.INVALID_OP_EXPR(t_ops.ADD_ITEM, right, ['string', 'any']));\n    }\n\n    return {\n        ...left,\n        [right[0]]: transform(left, right[1], context),\n    };\n});\nconfig.addTransformerToMap(OP_ASSIGN, (left, right, context) => {\n    if (!isPlainObject(left)) {\n        if (left == null) {\n            left = {};\n        } else {\n            throw new Error(MSG.VALUE_NOT_OBJECT(t_ops.ASSIGN));\n        }\n    }\n\n    if (!isPlainObject(right)) {\n        throw new Error(MSG.OPERAND_NOT_OBJECT(t_ops.ASSIGN));\n    }\n\n    const rightValue = _mapValues(right, (expr, key) =>\n        transform(\n            left[key],\n            typeof expr === 'string' && expr.startsWith('$') ? expr : typeof expr === 'object' ? expr : { $set: expr },\n            getChildContext(context, left, key, left[key])\n        )\n    );\n\n    const toRemove = [];\n    _each(rightValue, (value, key) => {\n        if (value === undefined) {\n            toRemove.push(key);\n        }\n    });\n\n    const merged = { ...left, ...rightValue };\n\n    return toRemove.length > 0 ? _omit(merged, toRemove) : merged;\n});\n\nconfig.addTransformerToMap(OP_APPLY, transform);\n\nconfig.addTransformerToMap(OP_SANITIZE, (left, right, context) => {\n    return Types.sanitize(left, transform(undefined, right, context, true));\n});\n\nconfig.addTransformerToMap(OP_SPLIT, (left, right) => {\n    if (typeof left !== 'string') {\n        throw new Error(MSG.VALUE_NOT_STRING(t_ops.SPLIT));\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(t_ops.SPLIT));\n        }\n\n        const [separator, limit] = right;\n\n        if (typeof separator !== 'string' || (limit != null && typeof limit !== 'number')) {\n            throw new Error(MSG.INVALID_OP_EXPR(t_ops.SPLIT, right, ['string', 'number']));\n        }\n\n        return left.split(separator, limit);\n    } else if (typeof right !== 'string') {\n        throw new Error(MSG.OPERAND_NOT_STRING(t_ops.SPLIT));\n    }\n\n    return left.split(right);\n});\n\nconst esTemplateSetting = {\n    interpolate: /\\$\\{([\\s\\S]+?)\\}/g,\n};\n\nconfig.addTransformerToMap(OP_INTERPOLATE, (left, right) => {\n    if (typeof left !== 'string') {\n        throw new Error(MSG.VALUE_NOT_STRING(t_ops.INTERPOLATE));\n    }\n\n    if (right != null && typeof right !== 'object') {\n        throw new Error(MSG.OPERAND_NOT_OBJECT(t_ops.INTERPOLATE));\n    }\n\n    if (Array.isArray(right)) {\n        if (right.length !== 2) {\n            throw new Error(MSG.OPERAND_NOT_TUPLE(t_ops.INTERPOLATE));\n        }\n\n        return template(left, right[0], right[1] === 'es6' ? esTemplateSetting : right[1]);\n    }\n\n    return template(left, right);\n});\n\nexport default transform;\n"],"names":["MSG","config","messages","UNARY","BINARY","OP_MATCH","t_ops","MATCH","OP_SIZE","SIZE","OP_SUM","SUM","OP_GET_TYPE","GET_TYPE","OP_GET_BY_INDEX","GET_BY_INDEX","OP_GET_BY_KEY","GET_BY_KEY","OP_FIND_INDEX","FIND_INDEX","OP_FIND","FIND","OP_IF","IF","OP_CAST_ARRAY","CAST_ARRAY","OP_ADD","ADD","OP_SUB","SUB","OP_MUL","MUL","OP_DIV","DIV","OP_MOD","MOD","OP_POW","POW","OP_KEYS","KEYS","OP_VALUES","VALUES","OP_ENTRIES","ENTRIES","OP_FILTER_NULL","FILTER_NULL","OP_OBJ_TO_ARRAY","OBJ_TO_ARRAY","OP_PICK","PICK","OP_OMIT","OMIT","OP_SLICE","SLICE","OP_GROUP","GROUP","OP_SORT","SORT","OP_REVERSE","REVERSE","OP_JOIN","JOIN","OP_MERGE","MERGE","OP_FILTER","FILTER","OP_REMAP","REMAP","OP_TO_JSON","TO_JSON","OP_TO_OBJ","TO_OBJ","OP_SET","SET","OP_ADD_ITEM","ADD_ITEM","OP_ASSIGN","ASSIGN","OP_APPLY","APPLY","OP_SANITIZE","SANITIZE","OP_SPLIT","SPLIT","OP_INTERPOLATE","INTERPOLATE","matchOptions","throwError","abortEarly","asPredicate","addTransformerToMap","left","right","context","test","v_ops","jsonx","transform","_size","_reduce","sum","item","typeOf","_nth","_get","jvs","fromIndex","Array","isArray","Error","INVALID_OP_EXPR","length","OPERAND_NOT_TUPLE","predicate","value","key","validate","getChildContext","_findIndex","_findKey","_find","OPERAND_NOT_ARRAY","OPERAND_NOT_TUPLE_2_OR_3","condition","_keys","_values","_map","objectToArray","v","k","filterNull","_pick","_pickBy","_omit","_omitBy","VALUE_NOT_ARRAY","Number","isInteger","slice","_groupBy","_sortBy","_reverse","join","toString","objectMerger","result","expr","Object","assign","arrayMerger","reduce","VALUE_NOT_COLLECTION","_filter","isPlainObject","remap","OPERAND_NOT_OBJECT","JSON","stringify","parse","undefined","concat","VALUE_NOT_OBJECT","rightValue","_mapValues","startsWith","$set","toRemove","_each","push","merged","Types","sanitize","VALUE_NOT_STRING","separator","limit","split","OPERAND_NOT_STRING","esTemplateSetting","interpolate","template"],"mappings":"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"}