{"version":3,"sources":["../../src/utils/lang.js"],"sourcesContent":["const { _ } = require('@genx/july');\n\nconst JsPrimitiveTypes = new Set([\n    'number',\n    'boolean',\n    'string',\n    'symbol',\n    'undefined',\n]);\n\n/**\n * Merge two query conditions using given operator.\n * @param {*} condition1\n * @param {*} condition2\n * @param {*} operator\n * @returns {object}\n */\nfunction mergeCondition(condition1, condition2, operator = '$and') {\n    if (_.isEmpty(condition1)) {\n        return condition2;\n    }\n\n    if (_.isEmpty(condition2)) {\n        return condition1;\n    }\n\n    return { [operator]: [condition1, condition2] };\n}\n\nexports.isNothing = (v) => _.isNil(v) || _.isNaN(v);\nexports.isPrimitive = (v) => JsPrimitiveTypes.has(typeof v);\nexports.isQuoted = (s) =>\n    (s.startsWith(\"'\") || s.startsWith('\"')) && s[0] === s[s.length - 1];\nexports.isQuotedWith = (s, q) => s.startsWith(q) && s[0] === s[s.length - 1];\nexports.makeDataSourceName = (driver, schema) => driver + '.' + schema;\nexports.extractDriverAndConnectorName = (id) => id.split('.');\nexports.mergeCondition = mergeCondition;\nexports.SupportedDrivers = Object.freeze(SupportedDrivers);\n\nconst $col = (name) => ({ $xr: 'Column', name });\nconst $expr = (left, op, right) => ({\n    $xr: 'BinaryExpression',\n    left,\n    op,\n    right,\n});\nconst $raw = (statement) => ({\n    $xr: 'Raw',\n    statement,\n});\nconst $query = (query) => ({\n    $xr: 'Query',\n    query,\n});\nconst $f = (name, ...args) => ({ $xr: 'Function', name, args });\nconst $inc = (field, increment) => $expr($col(field), '+', increment);\nconst $dec = (field, decrement) => $expr($col(field), '-', decrement);\nconst $dataSet = (model, query) => ({ $xr: 'DataSet', model, query });\nconst $sql = (sql) => ({ $xr: 'SQL', sql });\n\nexports.$col = $col;\nexports.$raw = $raw;\nexports.$query = $query;\nexports.$expr = $expr;\nexports.$f = $f;\nexports.$func = $f;\nexports.$inc = $inc;\nexports.$dec = $dec;\nexports.$increase = $inc;\nexports.$decrease = $dec;\nexports.$dataSet = $dataSet;\nexports.$select = $dataSet;\nexports.$sql = $sql;\n\nexports.hasValueIn = (arrayOfColl, key) =>\n    _.find(arrayOfColl, (coll) => coll[key] != null);\nexports.getValueFrom = (arrayOfColl, key) => {\n    const l = arrayOfColl.length;\n    for (let i = 0; i < l; i++) {\n        const coll = arrayOfColl[i];\n        const value = coll && coll[key];\n        if (value != null) return value;\n    }\n    return undefined;\n};\n\nconst mapFilterReducerArray = (predicate, mapper) => (result, value) => {\n    if (predicate(value)) {\n        result.push(mapper(value));\n    }\n    return result;\n};\n\nconst mapFilterReducerObject = (predicate, mapper) => (result, value, key) => {\n    if (predicate(value)) {\n        result[key] = mapper(value);\n    }\n    return result;\n};\n\n/**\n * @param {object} collection\n * @param {function} predicate\n * @param {function} mapper\n */\nexports.mapFilter = (collection, predicate, mapper) =>\n    Array.isArray(collection)\n        ? _.reduce(collection, mapFilterReducerArray(predicate, mapper), [])\n        : _.reduce(collection, mapFilterReducerObject(predicate, mapper), {});\n"],"names":["_","require","JsPrimitiveTypes","Set","mergeCondition","condition1","condition2","operator","isEmpty","exports","isNothing","v","isNil","isNaN","isPrimitive","has","isQuoted","s","startsWith","length","isQuotedWith","q","makeDataSourceName","driver","schema","extractDriverAndConnectorName","id","split","SupportedDrivers","Object","freeze","$col","name","$xr","$expr","left","op","right","$raw","statement","$query","query","$f","args","$inc","field","increment","$dec","decrement","$dataSet","model","$sql","sql","$func","$increase","$decrease","$select","hasValueIn","arrayOfColl","key","find","coll","getValueFrom","l","i","value","undefined","mapFilterReducerArray","predicate","mapper","result","push","mapFilterReducerObject","mapFilter","collection","Array","isArray","reduce"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}