{"version":3,"sources":["../../src/utils/Bulk.js"],"sourcesContent":["const { waitUntil_ } = require('@genx/july');\n\nclass Bulk {\n    constructor(limit, bulkAction, total) {\n        this.limit = limit;\n        this.itemsTotal = total;\n        this.bulkAction = bulkAction;\n\n        this.itemsPending = 0;\n        this.itemsDone = 0;\n        this.itemsError = 0;\n        this._buffer = [];\n        this.batch = 0;\n    }\n\n    flush() {\n        if (this._buffer.length > 0) {\n            const bulkItems = this._buffer.concat();\n            this._buffer = [];\n\n            const l = bulkItems.length;\n            this.itemsPending += l;\n\n            Promise.resolve(this.bulkAction(bulkItems, this.batch++))\n                .then(async () => {\n                    this.itemsDone += l;\n\n                    if (this.onProgress) {\n                        this.onProgress(\n                            this.itemsPending,\n                            this.itemsDone,\n                            this.itemsTotal\n                        );\n                    }\n                })\n                .catch((error) => {\n                    this.itemsDone += l;\n                    this.itemsError += l;\n\n                    if (this.onError) {\n                        this.onError(error, this.itemsError);\n                    }\n                });\n        }\n    }\n\n    add(item) {\n        this._buffer.push(item);\n\n        if (this._buffer.length >= this.limit) {\n            this.flush();\n        }\n    }\n\n    async waitToEnd_(interval, maxRounds) {\n        this.flush();\n        return waitUntil_(\n            () => this.itemsDone >= this.itemsPending,\n            interval,\n            maxRounds\n        );\n    }\n}\n\nmodule.exports = Bulk;\n"],"names":["waitUntil_","require","Bulk","flush","_buffer","length","bulkItems","concat","l","itemsPending","Promise","resolve","bulkAction","batch","then","itemsDone","onProgress","itemsTotal","catch","error","itemsError","onError","add","item","push","limit","waitToEnd_","interval","maxRounds","constructor","total","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAM,EAAEA,UAAU,EAAE,GAAGC,QAAQ;AAE/B,MAAMC;IAaFC,QAAQ;QACJ,IAAI,IAAI,CAACC,OAAO,CAACC,MAAM,GAAG,GAAG;YACzB,MAAMC,YAAY,IAAI,CAACF,OAAO,CAACG,MAAM;YACrC,IAAI,CAACH,OAAO,GAAG,EAAE;YAEjB,MAAMI,IAAIF,UAAUD,MAAM;YAC1B,IAAI,CAACI,YAAY,IAAID;YAErBE,QAAQC,OAAO,CAAC,IAAI,CAACC,UAAU,CAACN,WAAW,IAAI,CAACO,KAAK,KAChDC,IAAI,CAAC;gBACF,IAAI,CAACC,SAAS,IAAIP;gBAElB,IAAI,IAAI,CAACQ,UAAU,EAAE;oBACjB,IAAI,CAACA,UAAU,CACX,IAAI,CAACP,YAAY,EACjB,IAAI,CAACM,SAAS,EACd,IAAI,CAACE,UAAU;gBAEvB;YACJ,GACCC,KAAK,CAAC,CAACC;gBACJ,IAAI,CAACJ,SAAS,IAAIP;gBAClB,IAAI,CAACY,UAAU,IAAIZ;gBAEnB,IAAI,IAAI,CAACa,OAAO,EAAE;oBACd,IAAI,CAACA,OAAO,CAACF,OAAO,IAAI,CAACC,UAAU;gBACvC;YACJ;QACR;IACJ;IAEAE,IAAIC,IAAI,EAAE;QACN,IAAI,CAACnB,OAAO,CAACoB,IAAI,CAACD;QAElB,IAAI,IAAI,CAACnB,OAAO,CAACC,MAAM,IAAI,IAAI,CAACoB,KAAK,EAAE;YACnC,IAAI,CAACtB,KAAK;QACd;IACJ;IAEA,MAAMuB,WAAWC,QAAQ,EAAEC,SAAS,EAAE;QAClC,IAAI,CAACzB,KAAK;QACV,OAAOH,WACH,IAAM,IAAI,CAACe,SAAS,IAAI,IAAI,CAACN,YAAY,EACzCkB,UACAC;IAER;IA1DAC,YAAYJ,KAAK,EAAEb,UAAU,EAAEkB,KAAK,CAAE;QAClC,IAAI,CAACL,KAAK,GAAGA;QACb,IAAI,CAACR,UAAU,GAAGa;QAClB,IAAI,CAAClB,UAAU,GAAGA;QAElB,IAAI,CAACH,YAAY,GAAG;QACpB,IAAI,CAACM,SAAS,GAAG;QACjB,IAAI,CAACK,UAAU,GAAG;QAClB,IAAI,CAAChB,OAAO,GAAG,EAAE;QACjB,IAAI,CAACS,KAAK,GAAG;IACjB;AAiDJ;AAEAkB,OAAOC,OAAO,GAAG9B"}