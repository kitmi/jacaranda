{"version":3,"sources":["../src/EntityModel.js"],"sourcesContent":["import { DatabaseError, InvalidArgument } from \"@kitmi/types\";\nimport { _, eachAsync_, isPlainObject, isEmpty } from \"@kitmi/utils\";\nimport { Types } from '@kitmi/validators/allSync';\nimport Features from \"./entityFeatures\";\nimport Rules from \"./enum/Rules\";\n\nconst NEED_OVERRIDE = 'Should be overrided by driver-specific subclass.';\n\nfunction minifyAssocs(assocs) {\n    const sorted = _.uniq(assocs).sort().reverse();\n\n    const minified = _.take(sorted, 1);\n    const l = sorted.length - 1;\n\n    for (let i = 1; i < l; i++) {\n        const k = sorted[i] + '.';\n\n        if (!_.find(minified, (a) => a.startsWith(k))) {\n            minified.push(sorted[i]);\n        }\n    }\n\n    return minified;\n}\n\nconst $xrsToBypass = new Set([\n    'Column',\n    'Function',\n    'BinExpr',\n    'Query',\n    'Raw',\n    'DataSet',\n    'SQL',\n]);\n\n/**\n * Base entity model class.\n * @class\n */\nclass EntityModel {\n    /**\n     * @param {Object} [rawData] - Raw data object\n     */\n    constructor(db) {\n        this._db = db;\n        this._meta = this.constructor.meta;\n    }\n\n    static valueOfKey(data) {\n        return data[this._meta.keyField];\n    }\n\n    /**\n     * Get a field schema based on the metadata of the field.\n     * @param {string} name - Field name\n     * @param {object} [extra] - Extra schema options\n     * @return {object|array} Schema object\n     */\n    static fieldSchema(name, extra) {\n        const meta = this._meta.fields[name];\n        if (!meta) {\n            throw new InvalidArgument(\n                `Unknown field \"${name}\" of entity \"${this._meta.name}\".`\n            );\n        }\n\n        const schema = _.omit(meta, ['default', 'optional']);\n\n        if (extra) {\n            const { $addEnumValues, $orAsArray, ...others } = extra;\n            let arrayElem = schema;\n\n            if ($orAsArray) {\n                arrayElem = { ...schema, ...others };\n            }\n\n            if (meta.type === Types.ENUM.name && $addEnumValues) {\n                schema.values = schema.values.concat($addEnumValues);\n            }\n\n            Object.assign(schema, others);\n\n            if ($orAsArray) {\n                return [\n                    schema,\n                    {\n                        type: 'array',\n                        elementSchema: arrayElem,\n                    },\n                ];\n            }\n        }\n\n        return schema;\n    }\n\n    /**\n     * Get a map of fields schema by predefined input set.\n     * @param {string} inputSetName - Input set name, predefined in geml\n     * @param {object} [options] - Input set options\n     * @return {object} Schema object\n     */\n    static inputSchema(inputSetName, options) {\n        const key =\n            inputSetName + (options == null ? '{}' : JSON.stringify(options));\n\n        if (this._cachedSchema) {\n            const cache = this._cachedSchema[key];\n            if (cache) {\n                return cache;\n            }\n        } else {\n            this._cachedSchema = {};\n        }\n\n        const schemaGenerator = this._db.require(\n            `inputs/${this._meta.name}-${inputSetName}`\n        );\n\n        return (this._cachedSchema[key] = schemaGenerator(options));\n    }\n\n    /**\n     * Helper to combine explicit required associations and associations required by query fields or projection fields.\n     * @param {*} extraArray \n     * @param {*} fields \n     * @returns {Array}\n     */\n    static assocFrom(extraArray, fields) {\n        const result = new Set(extraArray);\n\n        if (fields) {\n            fields.forEach(keyPath => {\n                const keyNodes = keyPath.split('.');\n                if (keyNodes.length > 1) {\n                    const assoc = keyNodes.slice(0, -1).map(p => p.startsWith(\":\") ? p.substring(1) : p).join('.');\n                    result.add(assoc);\n                }\n            })\n        }\n\n        return Array.from(result);\n    }\n\n    /**\n     * Get field names array of a unique key from input data.\n     * @param {object} data - Input data.\n     */\n    static getUniqueKeyFieldsFrom(data) {\n        return _.find(this._meta.uniqueKeys, (fields) =>\n            _.every(fields, (f) => !_.isNil(data[f]))\n        );\n    }\n\n    /**\n     * Get key-value pairs of a unique key from input data.\n     * @param {object} data - Input data.\n     */\n    static getUniqueKeyValuePairsFrom(data) {\n        const ukFields = this.getUniqueKeyFieldsFrom(data);\n        return _.pick(data, ukFields);\n    }\n\n    /**\n     * Get nested object of an entity.\n     * @param {*} entityObj\n     * @param {*} keyPath\n     */\n    static getNestedObject(entityObj, keyPath, defaultValue) {\n        const nodes = (\n            Array.isArray(keyPath) ? keyPath : keyPath.split('.')\n        ).map((key) => (key[0] === ':' ? key : ':' + key));\n        return _.get(entityObj, nodes, defaultValue);\n    }\n\n    /**\n     * Ensure the entity object containing required fields, if not, it will automatically fetched from db and return.\n     * @param {*} entityObj \n     * @param {Array} fields \n     * @param {*} connOpts \n     * @returns {Object}\n     */\n    static async ensureFields_(entityObj, fields, connOpts) {\n        if (_.find(fields, field => !_.has(entityObj, field))) {\n            const uk = this.getUniqueKeyValuePairsFrom(entityObj);\n\n            if (isEmpty(uk)) {\n                throw new UnexpectedState('None of the unique keys found from the data set.');\n            }\n\n            const findOptions = { $where: uk, /* $projection: fields,*/ $association: this.assocFrom(null, fields) };\n\n            return this.findOne_(findOptions, connOpts)\n        }\n\n        return entityObj;\n    }\n\n    /**\n     * Ensure context.latest be the just created entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveCreated(context, customOptions) {\n        if (!context.options.$retrieveCreated) {\n            context.options.$retrieveCreated = customOptions || true;\n        }\n    }\n\n    /**\n     * Ensure context.latest be the just updated entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveUpdated(context, customOptions) {\n        if (!context.options.$retrieveUpdated) {\n            context.options.$retrieveUpdated = customOptions || true;\n        }\n    }\n\n    /**\n     * Ensure context.exisintg be the just deleted entity.\n     * @param {*} context\n     * @param {*} customOptions\n     */\n    static ensureRetrieveDeleted(context, customOptions) {\n        if (!context.options.$retrieveDeleted) {\n            context.options.$retrieveDeleted = customOptions || true;\n        }\n    }\n\n    /**\n     * Ensure the upcoming operations are executed in a transaction.\n     * @param {*} context\n     */\n    static async ensureTransaction_(context) {\n        if (!context.connOptions || !context.connOptions.connection) {\n            context.connOptions || (context.connOptions = {});\n\n            context.connOptions.connection =\n                await this._db.connector.beginTransaction_();\n        }\n    }\n\n    /**\n     * Get value from context, e.g. session, query ...\n     * @param {*} context\n     * @param {string} key\n     * @returns {*}\n     */\n    static getValueFromContext(context, key) {\n        return _.get(context, 'options.$variables.' + key);\n    }\n\n    /**\n     * Get a pk-indexed hashtable with all undeleted data\n     * {string} [key] - The key field to used by the hashtable.\n     * {array} [associations] - With an array of associations.\n     * {object} [connOptions] - Connection options, e.g. transaction handle\n     */\n    static async cached_(key, associations, connOptions) {\n        if (key) {\n            let combinedKey = key;\n\n            if (!isEmpty(associations)) {\n                combinedKey += '/' + minifyAssocs(associations).join('&');\n            }\n\n            let cachedData;\n\n            if (!this._cachedData) {\n                this._cachedData = {};\n            } else if (this._cachedData[combinedKey]) {\n                cachedData = this._cachedData[combinedKey];\n            }\n\n            if (!cachedData) {\n                cachedData = this._cachedData[combinedKey] =\n                    await this.findAll_(\n                        { $association: associations, $toDictionary: key },\n                        connOptions\n                    );\n            }\n\n            return cachedData;\n        }\n\n        return this.cached_(this._meta.keyField, associations, connOptions);\n    }\n\n    static toDictionary(entityCollection, key, transformer) {\n        key || (key = this._meta.keyField);\n\n        return Convertors.toKVPairs(entityCollection, key, transformer);\n    }\n\n    /**\n     * Run aggregate pipeline\n     * @param {array} pipeline\n     * @param {object} [connOptions]\n     * @returns {*}\n     */\n    static async aggregate_(pipeline, connOptions) {\n        const _pipeline = pipeline.map(q => this._prepareQueries(q));\n\n        return this._db.connector.aggregate_(\n            this._meta.name,\n            _pipeline,\n            connOptions\n        );\n    }\n\n    /**\n     * Find a record by unique keys, returns a model object containing the record or undefined if nothing found.     \n     * @param {object} [findOptions] - findOptions\n     * @property {object} [findOptions.$association] - Joinings\n     * @property {object} [findOptions.$select] - Selected fields\n     * @property {object} [findOptions.$transformer] - Transform fields before returning\n     * @property {object} [findOptions.$where] - Extra condition\n     * @property {object} [findOptions.$groupBy] - Group by fields\n     * @property {object} [findOptions.$orderBy] - Order by fields\n     * @property {number} [findOptions.$offset] - Offset\n     * @property {number} [findOptions.$limit] - Limit\n     * @property {bool} [findOptions.$includeDeleted=false] - Include those marked as logical deleted.     \n     * @property {bool} [findOptions.$skipOrm=false] - Skip ORM mapping\n     * @returns {*}\n     */\n    async findOne_(findOptions) {\n        const rawOptions = findOptions;\n\n        findOptions = this._prepareQueries(\n            findOptions,\n            true /* for single record */\n        );\n\n        const context = {\n            op: 'find',\n            options: findOptions,\n            connOptions,\n        };\n\n        await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);\n\n        const result = await this._safeExecute_(async (context) => {\n            let records = await this._db.connector.find_(\n                this._meta.name,\n                context.options,\n                context.connOptions\n            );\n            if (!records)\n                throw new DatabaseError(\n                    'connector.find_() returns undefined data record.'\n                );\n\n            if (rawOptions && rawOptions.$retrieveDbResult) {\n                rawOptions.$result = records.slice(1);\n            }\n\n            if (findOptions.$relationships && !findOptions.$skipOrm) {\n                // rows, coloumns, aliasMap\n                if (records[0].length === 0) return undefined;\n\n                records = this._mapRecordsToObjects(\n                    records,\n                    findOptions.$relationships,\n                    findOptions.$nestedKeyGetter\n                );\n            } else if (records.length === 0) {\n                return undefined;\n            }\n\n            if (records.length !== 1) {\n                this._db.connector.log(\n                    'error',\n                    `findOne() returns more than one record.`,\n                    { entity: this._meta.name, options: context.options }\n                );\n            }\n\n            const result = records[0];\n\n            return result;\n        }, context);\n\n        if (findOptions.$transformer) {\n            return JES.evaluate(result, findOptions.$transformer);\n        }\n\n        return result;\n    }\n\n    /**\n     * Find records matching the condition, returns an array of records.\n     * @param {object} [findOptions] - findOptions\n     * @property {object} [findOptions.$association] - Joinings\n     * @property {object} [findOptions.$projection] - Selected fields\n     * @property {object} [findOptions.$transformer] - Transform fields before returning\n     * @property {object} [findOptions.$where] - Extra condition\n     * @property {object} [findOptions.$groupBy] - Group by fields\n     * @property {object} [findOptions.$orderBy] - Order by fields\n     * @property {number} [findOptions.$offset] - Offset\n     * @property {number} [findOptions.$limit] - Limit\n     * @property {number} [findOptions.$totalCount] - Return totalCount\n     * @property {bool} [findOptions.$includeDeleted=false] - Include those marked as logical deleted.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {array}\n     */\n    async findMany_(findOptions, connOptions) {\n        const rawOptions = findOptions;\n\n        findOptions = this._prepareQueries(findOptions);\n\n        const context = {\n            op: 'find',\n            options: findOptions,\n            connOptions,\n        };\n\n        await Features.applyRules_(Rules.RULE_BEFORE_FIND, this, context);\n\n        let totalCount;\n        \n        let rows = await this._safeExecute_(async (context) => {\n            let records = await this._db.connector.find_(\n                this._meta.name,\n                context.options,\n                context.connOptions\n            );\n\n            if (!records)\n                throw new DatabaseError(\n                    'connector.find_() returns undefined data record.'\n                );\n\n            if (rawOptions && rawOptions.$retrieveDbResult) {\n                rawOptions.$result = records.slice(1);\n            }\n\n            if (findOptions.$relationships) {\n                if (findOptions.$totalCount) {\n                    totalCount = records[3];\n                }\n\n                if (!findOptions.$skipOrm) {\n                    records = this._mapRecordsToObjects(\n                        records,\n                        findOptions.$relationships,\n                        findOptions.$nestedKeyGetter\n                    );\n                } else {\n                    records = records[0];\n                }\n            } else {\n                if (findOptions.$totalCount) {\n                    totalCount = records[1];\n                    records = records[0];\n                } else if (findOptions.$skipOrm) {\n                    records = records[0];\n                }\n            }\n\n            return this.afterFindAll_(context, records);\n        }, context);\n\n        if (findOptions.$transformer) {\n            rows = rows.map((row) =>\n                JES.evaluate(row, findOptions.$transformer)\n            );\n        }\n\n        if (findOptions.$totalCount) {\n            const ret = { totalItems: totalCount, items: rows };\n\n            if (!isNothing(findOptions.$offset)) {\n                ret.offset = findOptions.$offset;\n            }\n\n            if (!isNothing(findOptions.$limit)) {\n                ret.limit = findOptions.$limit;\n            }\n\n            return ret;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Regenerate creation data and try again if duplicate record exists\n     * @param {Function} dataGenerator_\n     * @param {Object} connOptions\n     */\n    async retryCreateOnDuplicate_(\n        dataGenerator_,\n        maxRery,\n        createOptions,\n        connOptions\n    ) {\n        let counter = 0;\n        let errorRet;\n        maxRery || (maxRery = 10);\n\n        while (counter++ < maxRery) {\n            const data = await dataGenerator_();\n\n            try {\n                return await this.create_(data, createOptions, connOptions);\n            } catch (error) {\n                if (error.code !== 'E_DUPLICATE') {\n                    throw error;\n                }\n\n                errorRet = error;\n            }\n        }\n\n        return errorRet;\n    }\n\n    /**\n     * Create a new entity with given data.\n     * @param {object} data - Entity data\n     * @param {object} [createOptions] - Create options\n     * @property {bool} [createOptions.$retrieveCreated=false] - Retrieve the newly created record from db.\n     * @property {bool} [createOptions.$upsert=false] - If already exist, just update the record.\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {EntityModel}\n     */\n    async create_(data, createOptions, connOptions) {\n        const rawOptions = createOptions;\n\n        if (!createOptions) {\n            createOptions = {};\n        }\n\n        let [raw, associations, references] = this._extractAssociations(\n            data,\n            true\n        );\n\n        const context = {\n            op: 'create',\n            raw,\n            rawOptions,\n            options: createOptions,\n            connOptions,\n        };\n\n        if (!(await this.beforeCreate_(context))) {\n            return context.return;\n        }\n\n        const success = await this._safeExecute_(async (context) => {\n            if (!isEmpty(references)) {\n                await this.ensureTransaction_(context);\n                await this._populateReferences_(context, references);\n            }\n\n            let needCreateAssocs = !isEmpty(associations);\n            if (needCreateAssocs) {\n                await this.ensureTransaction_(context);\n\n                associations = await this._createAssocs_(\n                    context,\n                    associations,\n                    true /* before create */\n                );\n                // check any other associations left\n                needCreateAssocs = !isEmpty(associations);\n            }\n\n            await this._prepareEntityData_(context);\n\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_CREATE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (!(await this._internalBeforeCreate_(context))) {\n                return false;\n            }\n\n            if (!context.options.$dryRun) {\n                if (context.options.$upsert) {\n                    const dataForUpdating = _.pick(context.latest, Object.keys(context.raw)); // only update the raw part    \n\n                    context.result = await this._db.connector.upsertOne_(\n                        this._meta.name,\n                        dataForUpdating,\n                        this.getUniqueKeyFieldsFrom(context.latest),\n                        context.connOptions,\n                        context.latest\n                    );\n                } else {\n                    context.result = await this._db.connector.create_(\n                        this._meta.name,\n                        context.latest,\n                        context.connOptions\n                    );\n                }\n\n                this._fillResult(context);\n            } else {\n                context.return = context.latest;\n                context.result = { insertId: context.latest[this._meta.keyField], affectedRows: 1 };\n            }\n\n            if (needCreateAssocs) {\n                await this._createAssocs_(context, associations);\n            }\n\n            await this._internalAfterCreate_(context);\n\n            if (!context.queryKey) {\n                context.queryKey = this.getUniqueKeyValuePairsFrom(\n                    context.latest\n                );\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_CREATE, this, context);\n\n            return true;\n        }, context);\n\n        if (success && !context.options.$dryRun) {\n            await this.afterCreate_(context);\n        }\n\n        return context.return;\n    }\n\n    /**\n     * Update an existing entity with given data.\n     * @param {object} data - Entity data with at least one unique key (pair) given\n     * @param {object} [updateOptions] - Update options\n     * @property {object} [updateOptions.$where] - Extra condition\n     * @property {bool} [updateOptions.$retrieveUpdated=false] - Retrieve the updated entity from database\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     * @returns {object}\n     */\n    async updateOne_(data, updateOptions, connOptions) {\n        return this._update_(data, updateOptions, connOptions, true);\n    }\n\n    /**\n     * Update many existing entites with given data.\n     * @param {*} data\n     * @param {*} updateOptions\n     * @param {*} connOptions\n     */\n    async updateMany_(data, updateOptions, connOptions) {\n        return this._update_(data, updateOptions, connOptions, false);\n    }\n\n    async _update_(data, updateOptions, connOptions, forSingleRecord) {\n        const rawOptions = updateOptions;\n\n        if (!updateOptions) {\n            // if no condition given, extract from data\n            const conditionFields = this.getUniqueKeyFieldsFrom(data);\n            if (isEmpty(conditionFields)) {\n                throw new InvalidArgument(\n                    'Primary key value(s) or at least one group of unique key value(s) is required for updating an entity.',\n                    {\n                        entity: this._meta.name,\n                        data,\n                    }\n                );\n            }\n            updateOptions = { $where: _.pick(data, conditionFields) };\n            data = _.omit(data, conditionFields);\n        }\n\n        // see if there is associated entity data provided together\n        let [raw, associations, references] = this._extractAssociations(data);\n\n        const context = {\n            op: 'update',\n            raw,\n            rawOptions,\n            options: this._prepareQueries(\n                updateOptions,\n                forSingleRecord /* for single record */\n            ),\n            connOptions,\n            forSingleRecord,\n        };\n\n        // see if there is any runtime feature stopping the update\n        let toUpdate;\n\n        if (forSingleRecord) {\n            toUpdate = await this.beforeUpdate_(context);\n        } else {\n            toUpdate = await this.beforeUpdateMany_(context);\n        }\n\n        if (!toUpdate) {\n            return context.return;\n        }\n\n        const success = await this._safeExecute_(async (context) => {\n            if (!isEmpty(references)) {\n                await this.ensureTransaction_(context);\n                await this._populateReferences_(context, references);\n            }\n\n            let needUpdateAssocs = !isEmpty(associations);\n            let doneUpdateAssocs;\n\n            if (needUpdateAssocs) {\n                await this.ensureTransaction_(context);\n\n                associations = await this._updateAssocs_(\n                    context,\n                    associations,\n                    true /* before update */,\n                    forSingleRecord\n                );\n                needUpdateAssocs = !isEmpty(associations);\n                doneUpdateAssocs = true;\n            }\n\n            await this._prepareEntityData_(\n                context,\n                true /* is updating */,\n                forSingleRecord\n            );\n\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_UPDATE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (forSingleRecord) {\n                toUpdate = await this._internalBeforeUpdate_(context);\n            } else {\n                toUpdate = await this._internalBeforeUpdateMany_(context);\n            }\n\n            if (!toUpdate) {\n                return false;\n            }\n\n            const { $where, ...otherOptions } = context.options;\n\n            if (isEmpty(context.latest)) {\n                if (!doneUpdateAssocs && !needUpdateAssocs) {\n                    throw new InvalidArgument(\n                        'Cannot do the update with empty record. Entity: ' +\n                        this._meta.name\n                    );\n                }\n            } else {\n                if (\n                    needUpdateAssocs &&\n                    !hasValueIn([$where, context.latest], this._meta.keyField) &&\n                    !otherOptions.$retrieveUpdated\n                ) {\n                    // has associated data depending on this record\n                    // should ensure the latest result will contain the key of this record\n                    otherOptions.$retrieveUpdated = true;\n                }\n\n                if (forSingleRecord && !otherOptions.$limit) {\n                    otherOptions.$limit = 1;\n                }\n\n                context.result = await this._db.connector.update_(\n                    this._meta.name,\n                    context.latest,\n                    $where,\n                    otherOptions,\n                    context.connOptions\n                );\n\n                context.return = context.latest;\n            }\n\n            if (forSingleRecord) {\n                await this._internalAfterUpdate_(context);\n\n                if (!context.queryKey) {\n                    context.queryKey = this.getUniqueKeyValuePairsFrom($where);\n                }\n            } else {\n                await this._internalAfterUpdateMany_(context);\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_UPDATE, this, context);\n\n            if (needUpdateAssocs) {\n                await this._updateAssocs_(\n                    context,\n                    associations,\n                    false,\n                    forSingleRecord\n                );\n            }\n\n            return true;\n        }, context);\n\n        if (success && !context.options.$dryRun) {\n            if (forSingleRecord) {\n                await this.afterUpdate_(context);\n            } else {\n                await this.afterUpdateMany_(context);\n            }\n        }\n\n        return context.return;\n    }\n\n    /**\n     * Update an existing entity with given data, or create one if not found.\n     * @param {*} data\n     * @param {*} updateOptions\n     * @param {*} connOptions\n     */\n    async replaceOne_(data, updateOptions, connOptions) {\n        const rawOptions = updateOptions;\n\n        if (!updateOptions) {\n            const conditionFields = this.getUniqueKeyFieldsFrom(data);\n            if (isEmpty(conditionFields)) {\n                throw new InvalidArgument(\n                    'Primary key value(s) or at least one group of unique key value(s) is required for replacing an entity.',\n                    {\n                        entity: this._meta.name,\n                        data,\n                    }\n                );\n            }\n\n            updateOptions = {\n                ...updateOptions,\n                $where: _.pick(data, conditionFields),\n            };\n        } else {\n            updateOptions = this._prepareQueries(updateOptions, true);\n        }\n\n        const context = {\n            op: 'replace',\n            raw: data,\n            rawOptions,\n            options: updateOptions,\n            connOptions,\n        };\n\n        return this._safeExecute_(async (context) => {\n            return this._doReplaceOne_(context); // different dbms has different replacing strategy\n        }, context);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$where] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    async deleteOne_(deleteOptions, connOptions) {\n        return this._delete_(deleteOptions, connOptions, true);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$where] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @property {bool} [deleteOptions.$deleteAll=false] - When $deleteAll = true, the operation will proceed even empty condition is given\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    async deleteMany_(deleteOptions, connOptions) {\n        return this._delete_(deleteOptions, connOptions, false);\n    }\n\n    async deleteAll_(connOptions) {\n        return this.deleteMany_({ $deleteAll: true }, connOptions);\n    }\n\n    /**\n     * Remove an existing entity with given data.\n     * @param {object} [deleteOptions] - Update options\n     * @property {object} [deleteOptions.$where] - Extra condition\n     * @property {bool} [deleteOptions.$retrieveDeleted=false] - Retrieve the deleted entity from database\n     * @property {bool} [deleteOptions.$physicalDeletion=false] - When $physicalDeletion = true, deletetion will not take into account logicaldeletion feature\n     * @param {object} [connOptions]\n     * @property {object} [connOptions.connection]\n     */\n    async _delete_(deleteOptions, connOptions, forSingleRecord) {\n        const rawOptions = deleteOptions;\n\n        deleteOptions = this._prepareQueries(\n            deleteOptions,\n            forSingleRecord /* for single record */\n        );\n\n        if (\n            isEmpty(deleteOptions.$where) &&\n            (forSingleRecord || !deleteOptions.$deleteAll)\n        ) {\n            throw new InvalidArgument(\n                'Empty condition is not allowed for deleting or add { $deleteAll: true } to delete all records.',\n                {\n                    entity: this._meta.name,\n                    deleteOptions,\n                }\n            );\n        }\n\n        const context = {\n            op: 'delete',\n            rawOptions,\n            options: deleteOptions,\n            connOptions,\n            forSingleRecord,\n        };\n\n        let toDelete;\n\n        if (forSingleRecord) {\n            toDelete = await this.beforeDelete_(context);\n        } else {\n            toDelete = await this.beforeDeleteMany_(context);\n        }\n\n        if (!toDelete) {\n            return context.return;\n        }\n\n        const deletedCount = await this._safeExecute_(async (context) => {\n            if (\n                !(await Features.applyRules_(\n                    Rules.RULE_BEFORE_DELETE,\n                    this,\n                    context\n                ))\n            ) {\n                return false;\n            }\n\n            if (forSingleRecord) {\n                toDelete = await this._internalBeforeDelete_(context);\n            } else {\n                toDelete = await this._internalBeforeDeleteMany_(context);\n            }\n\n            if (!toDelete) {\n                return false;\n            }\n\n            const { $where, ...otherOptions } = context.options;\n\n            context.result = await this._db.connector.delete_(\n                this._meta.name,\n                $where,\n                otherOptions,\n                context.connOptions\n            );\n\n            if (forSingleRecord) {\n                await this._internalAfterDelete_(context);\n            } else {\n                await this._internalAfterDeleteMany_(context);\n            }\n\n            if (!context.queryKey) {\n                if (forSingleRecord) {\n                    context.queryKey = this.getUniqueKeyValuePairsFrom(\n                        context.options.$where\n                    );\n                } else {\n                    context.queryKey = context.options.$where;\n                }\n            }\n\n            await Features.applyRules_(Rules.RULE_AFTER_DELETE, this, context);\n\n            return this._db.connector.deletedCount(context);\n        }, context);\n\n        if (deletedCount && !context.options.$dryRun) {\n            if (forSingleRecord) {\n                await this.afterDelete_(context);\n            } else {\n                await this.afterDeleteMany_(context);\n            }\n        }\n\n        return context.return || deletedCount;\n    }\n\n    /**\n     * Check whether a data record contains primary key or at least one unique key pair.\n     * @param {object} data\n     */\n    _containsUniqueKey(data) {\n        let hasKeyName = false;\n\n        const hasNotNullKey = _.find(this._meta.uniqueKeys, (fields) => {\n            const hasKeys = _.every(fields, (f) => f in data);\n            hasKeyName = hasKeyName || hasKeys;\n\n            return _.every(fields, (f) => data[f] != null);\n        });\n\n        return [hasNotNullKey, hasKeyName];\n    }\n\n    /**\n     * Ensure the condition contains one of the unique keys.\n     * @param {*} condition\n     */\n    _ensureContainsUniqueKey(condition) {\n        const [containsUniqueKeyAndValue, containsUniqueKeyName] =\n            this._containsUniqueKey(condition);\n\n        if (!containsUniqueKeyAndValue) {\n            if (containsUniqueKeyName) {\n                throw new ValidationError(\n                    'One of the unique key field as query condition is null. Condition: ' +\n                    JSON.stringify(condition)\n                );\n            }\n\n            throw new InvalidArgument(\n                'Single record operation requires at least one unique key value pair in the query condition.',\n                {\n                    entity: this._meta.name,\n                    condition,\n                }\n            );\n        }\n    }\n\n    /**\n     * Prepare valid and sanitized entity data for sending to database.\n     * @param {object} context - Operation context.\n     * @property {object} context.raw - Raw input data.\n     * @property {object} [context.connOptions]\n     * @param {bool} isUpdating - Flag for updating existing entity.\n     */\n    async _prepareEntityData_(\n        context,\n        isUpdating = false,\n        forSingleRecord = true\n    ) {\n        const meta = this._meta;\n        const i18n = this.i18n;\n        const { name, fields } = meta;\n\n        let { raw } = context;\n        let latest = {};\n        // returned by $retrieveExisting\n        let existing = context.options.$existing;\n        context.latest = latest;\n\n        if (!context.i18n) {\n            context.i18n = i18n;\n        }\n\n        const opOptions = context.options;\n\n        if (opOptions.$upsert && typeof opOptions.$upsert === 'object') {\n            raw = { ...raw, ...opOptions.$upsert };\n        }\n\n        if (\n            isUpdating &&\n            isEmpty(existing) &&\n            (this._dependsOnExistingData(raw) || opOptions.$retrieveExisting)\n        ) {\n            await this.ensureTransaction_(context);\n\n            if (forSingleRecord) {\n                existing = await this.findOne_(\n                    { $where: opOptions.$where },\n                    context.connOptions\n                );\n            } else {\n                existing = await this.findAll_(\n                    { $where: opOptions.$where },\n                    context.connOptions\n                );\n            }\n            context.existing = existing;\n        }\n\n        if (opOptions.$retrieveExisting && !context.rawOptions.$existing) {\n            context.rawOptions.$existing = existing;\n        }\n\n        await Features.applyRules_(Rules.RULE_BEFORE_VALIDATION, this, context);\n\n        await eachAsync_(fields, async (fieldInfo, fieldName) => {\n            let value;\n            let useRaw = false;\n\n            if (fieldName in raw) {\n                value = raw[fieldName];\n                useRaw = true;\n            } else if (fieldName in latest) {\n                value = latest[fieldName];\n            }\n\n            if (typeof value !== 'undefined') {\n                // field value given in raw data\n                if (fieldInfo.readOnly && useRaw) {\n                    if (\n                        !opOptions.$migration &&\n                        (!opOptions.$bypassReadOnly ||\n                            !opOptions.$bypassReadOnly.has(fieldName))\n                    ) {\n                        // read only, not allow to set by input value\n                        throw new ValidationError(\n                            `Read-only field \"${fieldName}\" is not allowed to be set by manual input.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    }\n                }\n\n                if (isUpdating && fieldInfo.freezeAfterNonDefault) {\n                    if (!existing) {\n                        throw new Error(\n                            '\"freezeAfterNonDefault\" qualifier requires existing data.'\n                        );\n                    }\n\n                    if (existing[fieldName] !== fieldInfo.default) {\n                        // freezeAfterNonDefault, not allow to change if value is non-default\n                        throw new ValidationError(\n                            `FreezeAfterNonDefault field \"${fieldName}\" is not allowed to be changed.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    }\n                }\n\n                /**  todo: fix dependency, check writeProtect \n                if (isUpdating && fieldInfo.writeOnce) {     \n                    assert: existing, '\"writeOnce\" qualifier requires existing data.';\n                    if (!_.isNil(existing[fieldName])) {\n                        throw new ValidationError(`Write-once field \"${fieldName}\" is not allowed to be update once it was set.`, {\n                            entity: name,\n                            fieldInfo: fieldInfo \n                        });\n                    }\n                } */\n\n                // sanitize first\n                if (isNothing(value)) {\n                    if (fieldInfo.default) {\n                        // has default setting in meta data\n                        latest[fieldName] = fieldInfo.default;\n                    } else if (!fieldInfo.optional) {\n                        throw new ValidationError(\n                            `The \"${fieldName}\" value of \"${name}\" entity cannot be null.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                            }\n                        );\n                    } else {\n                        latest[fieldName] = null;\n                    }\n                } else {\n                    if (isPlainObject(value) && value.$xr) {\n                        latest[fieldName] = value;\n\n                        return;\n                    }\n\n                    try {\n                        latest[fieldName] = Types.sanitize(\n                            value,\n                            fieldInfo,\n                            i18n\n                        );\n                    } catch (error) {\n                        throw new ValidationError(\n                            `Invalid \"${fieldName}\" value of \"${name}\" entity.`,\n                            {\n                                entity: name,\n                                fieldInfo: fieldInfo,\n                                value,\n                                error: error.stack,\n                            }\n                        );\n                    }\n                }\n\n                return;\n            }\n\n            // not given in raw data\n            if (isUpdating) {\n                if (fieldInfo.forceUpdate) {\n                    // has force update policy, e.g. updateTimestamp\n                    if (fieldInfo.updateByDb || fieldInfo.hasActivator) {\n                        return;\n                    }\n\n                    // require generator to refresh auto generated value\n                    if (fieldInfo.auto) {\n                        latest[fieldName] = await Generators.default(\n                            fieldInfo,\n                            i18n\n                        );\n                        return;\n                    }\n\n                    throw new ValidationError(\n                        `Field \"${fieldName}\" of \"${name}\" entity is required for each update.`,\n                        {\n                            entity: name,\n                            fieldInfo: fieldInfo,\n                        }\n                    );\n                }\n\n                return;\n            }\n\n            // new record\n            if (!fieldInfo.createByDb) {\n                if ('default' in fieldInfo) {\n                    // has default setting in meta data\n                    latest[fieldName] = fieldInfo.default;\n                } else if (fieldInfo.optional) {\n                    // ignore\n                } else if (fieldInfo.auto) {\n                    // automatically generated\n                    latest[fieldName] = await Generators.default(\n                        fieldInfo,\n                        i18n\n                    );\n                } else if (!fieldInfo.hasActivator) {\n                    // skip those have activators\n\n                    throw new ValidationError(\n                        `Field \"${fieldName}\" of \"${name}\" entity is required.`,\n                        {\n                            entity: name,\n                            fieldInfo: fieldInfo,\n                            raw,\n                        }\n                    );\n                }\n            } // else default value set by database or by rules\n        });\n\n        latest = context.latest = this._translateValue(\n            latest,\n            opOptions.$variables,\n            true\n        );\n\n        await Features.applyRules_(Rules.RULE_AFTER_VALIDATION, this, context);\n\n        if (!opOptions.$skipModifiers) {\n            await this.applyModifiers_(context, isUpdating);\n        }\n\n        // final round process before entering database\n        context.latest = _.mapValues(latest, (value, key) => {\n            if (value == null) return value;\n\n            if (isPlainObject(value) && value.$xr) {\n                // there is special input column which maybe a function or an expression\n                opOptions.$requireSplitColumns = true;\n                return value;\n            }\n\n            const fieldInfo = fields[key];\n\n            return this._serializeByTypeInfo(value, fieldInfo);\n        });\n\n        return context;\n    }\n\n    /**\n     * Ensure commit or rollback is called if transaction is created within the executor.\n     * @param {*} executor\n     * @param {*} context\n     */\n    async _safeExecute_(executor, context) {\n        executor = executor.bind(this);\n\n        if (context.connOptions && context.connOptions.connection) {\n            return executor(context);\n        }\n\n        try {\n            const result = await executor(context);\n\n            // if the executor have initiated a transaction\n            if (context.connOptions && context.connOptions.connection) {\n                await this._db.connector.commit_(context.connOptions.connection);\n                delete context.connOptions.connection;\n            }\n\n            return result;\n        } catch (error) {\n            // we have to rollback if error occurred in a transaction\n            if (context.connOptions && context.connOptions.connection) {\n                this._db.connector.log(\n                    'error',\n                    `Rollbacked, reason: ${error.message}`,\n                    {\n                        entity: this._meta.name,\n                        context: context.options,\n                        rawData: context.raw,\n                        latestData: context.latest,\n                    }\n                );\n                await this._db.connector.rollback_(\n                    context.connOptions.connection\n                );\n                delete context.connOptions.connection;\n            }\n\n            throw error;\n        }\n    }\n\n    _dependencyChanged(fieldName, context) {\n        if (this._meta.fieldDependencies) {\n            const deps = this._meta.fieldDependencies[fieldName];\n\n            return _.find(deps, (d) =>\n                isPlainObject(d)\n                    ? (d.reference !== fieldName && _.hasIn(context, d.reference))\n                    : _.hasIn(context, d)\n            );\n        }\n\n        return false;\n    }\n\n    _referenceExist(input, ref) {\n        const pos = ref.indexOf('.');\n\n        if (pos > 0) {\n            return ref.substr(pos + 1) in input;\n        }\n\n        return ref in input;\n    }\n\n    _dependsOnExistingData(input) {\n        // check modifier dependencies\n        const deps = this._meta.fieldDependencies;\n        let hasDepends = false;\n\n        if (deps) {\n            const nullDepends = new Set();\n\n            hasDepends = _.find(deps, (dep, fieldName) =>\n                _.find(dep, (d) => {\n                    if (isPlainObject(d)) {\n                        if (d.whenNull) {\n                            if (_.isNil(input[fieldName])) {\n                                nullDepends.add(dep);\n                            }\n\n                            return false;\n                        }\n\n                        if (d.reference === fieldName) return false;\n\n                        d = d.reference;\n                    }\n\n                    return (\n                        fieldName in input && !this._referenceExist(input, d)\n                    ) || (this._referenceExist(input, d) && !(fieldName in input));\n                })\n            );\n\n            if (hasDepends) {\n                return true;\n            }\n\n            for (const dep of nullDepends) {\n                if (\n                    _.find(\n                        dep,\n                        (d) => !this._referenceExist(input, d.reference)\n                    )\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        // check by special rules\n        const atLeastOneNotNull = this._meta.features.atLeastOneNotNull;\n        if (atLeastOneNotNull) {\n            hasDepends = _.find(atLeastOneNotNull, (fields) =>\n                _.find(\n                    fields,\n                    (field) => field in input && _.isNil(input[field])\n                )\n            );\n            if (hasDepends) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _hasReservedKeys(obj) {\n        return _.find(obj, (v, k) => k[0] === '$');\n    }\n\n    /**\n     * Normalize options including moving entries with key not starting with '$' into $where, interpolating variables and building relationship structure.\n     * @param {object} options \n     * @param {boolean} [forSingleRecord=false]\n     * @returns {object}\n     */\n    _prepareQueries(options, forSingleRecord = false) {\n        if (!isPlainObject(options)) {\n            if (forSingleRecord && options == null) {\n                throw new InvalidArgument(\n                    'Primary key value or at least one unique key value pair is required for single record operation.',\n                    {\n                        entity: this._meta.name,\n                    }\n                );                \n            }\n\n            // in this case, options is the value of primary key, check for combined primary key\n            if (Array.isArray(this._meta.keyField)) {\n                throw new InvalidArgument(\n                    'Cannot use a singular value as condition to query against an entity with combined primary key.',\n                    {\n                        entity: this._meta.name,\n                        keyFields: this._meta.keyField,\n                    }\n                );\n            }            \n\n            // single key\n\n            return options != null\n                ? {\n                    $where: {\n                        [this._meta.keyField]: this._translateValue(options),\n                    },\n                }\n                : {};\n        }\n\n        const normalizedOptions = { $key: this._meta.keyField };\n        const query = {};\n\n        // move non-reserved keys to $where\n        _.forOwn(options, (v, k) => {\n            if (k[0] === '$') {\n                normalizedOptions[k] = v;\n            } else {\n                query[k] = v;\n            }\n        });\n\n        normalizedOptions.$where = { ...query, ...normalizedOptions.$where };\n\n        if (forSingleRecord && !options.$skipUniqueCheck) {\n            this._ensureContainsUniqueKey(normalizedOptions.$where);\n        }\n\n        normalizedOptions.$where = this._translateValue(\n            normalizedOptions.$where,\n            normalizedOptions.$variables,\n            null,\n            true\n        );\n\n        if (normalizedOptions.$groupBy) {\n            if (isPlainObject(normalizedOptions.$groupBy)) {\n                if (normalizedOptions.$groupBy.having) {\n                    normalizedOptions.$groupBy.having = this._translateValue(\n                        normalizedOptions.$groupBy.having,\n                        normalizedOptions.$variables,\n                        null,\n                        true\n                    );\n                }\n            }\n        }\n\n        if (normalizedOptions.$select) {\n            normalizedOptions.$select = this._translateValue(\n                normalizedOptions.$select,\n                normalizedOptions.$variables\n            );\n        }\n\n        if (\n            normalizedOptions.$relation &&\n            !normalizedOptions.$relationships\n        ) {\n            normalizedOptions.$relationships =\n                this._prepareAssociations(normalizedOptions);\n        }\n\n        return normalizedOptions;\n    }\n\n    /**\n     * Pre create processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeCreate_(context) {\n        return true;\n    }\n\n    /**\n     * Pre update processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeUpdate_(context) {\n        return true;\n    }\n\n    /**\n     * Pre update processing, multiple records, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeUpdateMany_(context) {\n        return true;\n    }\n\n    /**\n     * Pre delete processing, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeDelete_(context) {\n        return true;\n    }\n\n    /**\n     * Pre delete processing, multiple records, return false to stop upcoming operation.\n     * @param {*} context\n     */\n    static async beforeDeleteMany_(context) {\n        return true;\n    }\n\n    /**\n     * Post create processing.\n     * @param {*} context\n     */\n    static async afterCreate_(context) {}\n\n    /**\n     * Post update processing.\n     * @param {*} context\n     */\n    static async afterUpdate_(context) {}\n\n    /**\n     * Post update processing, multiple records\n     * @param {*} context\n     */\n    static async afterUpdateMany_(context) {}\n\n    /**\n     * Post delete processing.\n     * @param {*} context\n     */\n    static async afterDelete_(context) {}\n\n    /**\n     * Post delete processing, multiple records\n     * @param {*} context\n     */\n    static async afterDeleteMany_(context) {}\n\n    /**\n     * Post findAll processing\n     * @param {*} context\n     * @param {*} records\n     */\n    static async afterFindAll_(context, records) {\n        if (context.options.$toDictionary) {\n            let keyField = this._meta.keyField;\n\n            if (typeof context.options.$toDictionary === 'string') {\n                keyField = context.options.$toDictionary;\n\n                if (!(keyField in this._meta.fields)) {\n                    throw new InvalidArgument(\n                        `The key field \"${keyField}\" provided to index the cached dictionary is not a field of entity \"${this._meta.name}\".`,\n                        {\n                            entity: this._meta.name,\n                            inputKeyField: keyField,\n                        }\n                    );\n                }\n            }\n\n            return this.toDictionary(records, keyField);\n        }\n\n        return records;\n    }\n\n    _prepareAssociations() {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    _mapRecordsToObjects() {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    _extractAssociations(data) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    // will update context.raw if applicable\n    async _populateReferences_(context, references) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    // will update context.raw if applicable\n    async _createAssocs_(context, assocs) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    async _updateAssocs_(context, assocs) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    _translateSymbolToken(name) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    _serializeByTypeInfo(value, info) {\n        throw new Error(NEED_OVERRIDE);\n    }\n\n    /**\n     * Automatically fetch variables by $xr\n     * @param {*} value \n     * @param {*} variables \n     * @param {*} skipTypeCast \n     * @param {*} arrayToInOperator - Convert an array value to { $in: array }\n     * @returns \n     */\n    _translateValue(value, variables, skipTypeCast, arrayToInOperator) {\n        if (isPlainObject(value)) {\n            if (value.$xr) {\n                if ($xrsToBypass.has(value.$xr)) return value;\n\n                if (value.$xr === 'SessionVariable') {\n                    if (!variables) {\n                        throw new InvalidArgument(\n                            'Variables context missing.',\n                            {\n                                entity: this._meta.name,\n                            }\n                        );\n                    }\n\n                    if (\n                        (!variables.session ||\n                            !(value.name in variables.session)) &&\n                        !value.optional\n                    ) {\n                        const errArgs = [];\n                        if (value.missingMessage) {\n                            errArgs.push(value.missingMessage);\n                        }\n                        if (value.missingStatus) {\n                            errArgs.push(\n                                value.missingStatus || HttpCode.BAD_REQUEST\n                            );\n                        }\n\n                        throw new ValidationError(...errArgs);\n                    }\n\n                    return variables.session[value.name];\n                } else if (value.$xr === 'QueryVariable') {\n                    if (!variables) {\n                        throw new InvalidArgument(\n                            'Variables context missing.',\n                            {\n                                entity: this._meta.name,\n                            }\n                        );\n                    }\n\n                    if (!variables.query || !(value.name in variables.query)) {\n                        throw new InvalidArgument(\n                            `Query parameter \"${value.name}\" in configuration not found.`,\n                            {\n                                entity: this._meta.name,\n                            }\n                        );\n                    }\n\n                    return variables.query[value.name];\n                } else if (value.$xr === 'SymbolToken') {\n                    return this._translateSymbolToken(value.name);\n                }\n\n                throw new Error('Not implemented yet. ' + value.$xr);\n            }\n\n            return _.mapValues(value, (v, k) =>\n                this._translateValue(\n                    v,\n                    variables,\n                    skipTypeCast,\n                    arrayToInOperator && k[0] !== '$'\n                )\n            );\n        }\n\n        if (Array.isArray(value)) {\n            const ret = value.map((v) =>\n                this._translateValue(\n                    v,\n                    variables,\n                    skipTypeCast,\n                    arrayToInOperator\n                )\n            );\n\n            return arrayToInOperator ? { $in: ret } : ret;\n        }\n\n        if (skipTypeCast) return value;\n\n        return this._db.connector.typeCast(value);\n    }\n}\n\nexport default EntityModel;\n"],"names":["NEED_OVERRIDE","minifyAssocs","assocs","sorted","_","uniq","sort","reverse","minified","take","l","length","i","k","find","a","startsWith","push","$xrsToBypass","Set","EntityModel","valueOfKey","data","_meta","keyField","fieldSchema","name","extra","meta","fields","InvalidArgument","schema","omit","$addEnumValues","$orAsArray","others","arrayElem","type","Types","ENUM","values","concat","Object","assign","elementSchema","inputSchema","inputSetName","options","key","JSON","stringify","_cachedSchema","cache","schemaGenerator","_db","require","assocFrom","extraArray","result","forEach","keyPath","keyNodes","split","assoc","slice","map","p","substring","join","add","Array","from","getUniqueKeyFieldsFrom","uniqueKeys","every","f","isNil","getUniqueKeyValuePairsFrom","ukFields","pick","getNestedObject","entityObj","defaultValue","nodes","isArray","get","ensureFields_","connOpts","field","has","uk","isEmpty","UnexpectedState","findOptions","$where","$association","findOne_","ensureRetrieveCreated","context","customOptions","$retrieveCreated","ensureRetrieveUpdated","$retrieveUpdated","ensureRetrieveDeleted","$retrieveDeleted","ensureTransaction_","connOptions","connection","connector","beginTransaction_","getValueFromContext","cached_","associations","combinedKey","cachedData","_cachedData","findAll_","$toDictionary","toDictionary","entityCollection","transformer","Convertors","toKVPairs","aggregate_","pipeline","_pipeline","q","_prepareQueries","rawOptions","op","Features","applyRules_","Rules","RULE_BEFORE_FIND","_safeExecute_","records","find_","DatabaseError","$retrieveDbResult","$result","$relationships","$skipOrm","undefined","_mapRecordsToObjects","$nestedKeyGetter","log","entity","$transformer","JES","evaluate","findMany_","totalCount","rows","$totalCount","afterFindAll_","row","ret","totalItems","items","isNothing","$offset","offset","$limit","limit","retryCreateOnDuplicate_","dataGenerator_","maxRery","createOptions","counter","errorRet","create_","error","code","raw","references","_extractAssociations","beforeCreate_","return","success","_populateReferences_","needCreateAssocs","_createAssocs_","_prepareEntityData_","RULE_BEFORE_CREATE","_internalBeforeCreate_","$dryRun","$upsert","dataForUpdating","latest","keys","upsertOne_","_fillResult","insertId","affectedRows","_internalAfterCreate_","queryKey","RULE_AFTER_CREATE","afterCreate_","updateOne_","updateOptions","_update_","updateMany_","forSingleRecord","conditionFields","toUpdate","beforeUpdate_","beforeUpdateMany_","needUpdateAssocs","doneUpdateAssocs","_updateAssocs_","RULE_BEFORE_UPDATE","_internalBeforeUpdate_","_internalBeforeUpdateMany_","otherOptions","hasValueIn","update_","_internalAfterUpdate_","_internalAfterUpdateMany_","RULE_AFTER_UPDATE","afterUpdate_","afterUpdateMany_","replaceOne_","_doReplaceOne_","deleteOne_","deleteOptions","_delete_","deleteMany_","deleteAll_","$deleteAll","toDelete","beforeDelete_","beforeDeleteMany_","deletedCount","RULE_BEFORE_DELETE","_internalBeforeDelete_","_internalBeforeDeleteMany_","delete_","_internalAfterDelete_","_internalAfterDeleteMany_","RULE_AFTER_DELETE","afterDelete_","afterDeleteMany_","_containsUniqueKey","hasKeyName","hasNotNullKey","hasKeys","_ensureContainsUniqueKey","condition","containsUniqueKeyAndValue","containsUniqueKeyName","ValidationError","isUpdating","i18n","existing","$existing","opOptions","_dependsOnExistingData","$retrieveExisting","RULE_BEFORE_VALIDATION","eachAsync_","fieldInfo","fieldName","value","useRaw","readOnly","$migration","$bypassReadOnly","freezeAfterNonDefault","Error","default","optional","isPlainObject","$xr","sanitize","stack","forceUpdate","updateByDb","hasActivator","auto","Generators","createByDb","_translateValue","$variables","RULE_AFTER_VALIDATION","$skipModifiers","applyModifiers_","mapValues","$requireSplitColumns","_serializeByTypeInfo","executor","bind","commit_","message","rawData","latestData","rollback_","_dependencyChanged","fieldDependencies","deps","d","reference","hasIn","_referenceExist","input","ref","pos","indexOf","substr","hasDepends","nullDepends","dep","whenNull","atLeastOneNotNull","features","_hasReservedKeys","obj","v","keyFields","normalizedOptions","$key","query","forOwn","$skipUniqueCheck","$groupBy","having","$select","$relation","_prepareAssociations","inputKeyField","_translateSymbolToken","info","variables","skipTypeCast","arrayToInOperator","session","errArgs","missingMessage","missingStatus","HttpCode","BAD_REQUEST","$in","typeCast","constructor","db"],"rangeMappingsmappings":"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"}