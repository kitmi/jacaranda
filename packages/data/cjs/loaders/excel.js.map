{"version":3,"sources":["../../src/loaders/excel.js"],"sourcesContent":["const { unflattenObject, _, eachAsync_ } = require('@genx/july');\n\nmodule.exports = {\n    writeTemplate_: async (templateFile, columnsMeta, config) => {\n        const keys = Object.keys(columnsMeta);\n\n        const Excel = require('exceljs');\n        let workbook = new Excel.Workbook();\n\n        const sheet = workbook.addWorksheet('Template');\n\n        // add header\n        sheet.addRow(keys);\n        const rowPlaceHolders = new Array(keys.length);\n\n        const templatedRows = config.rows || 50;\n\n        for (let j = 0; j < templatedRows; j++) {\n            // add en empty rows\n            sheet.addRow(rowPlaceHolders);\n\n            for (let i = 1; i <= keys.length; i++) {\n                const colKey = keys[i - 1];\n                const metadata = columnsMeta[colKey];\n                const cell = sheet.getCell(j + 2, i);\n\n                if (metadata) {\n                    if (metadata.type === 'enum') {\n                        cell.dataValidation = {\n                            type: 'list',\n                            allowBlank: true,\n                            formulae: [`\"${metadata.values.join(',')}\"`],\n                        };\n                    } else if (metadata.type === 'currency') {\n                        cell.alignment = { horizontal: 'right' };\n                        if (metadata.format && config[metadata.format]) {\n                            cell.numFmt = config[metadata.format];\n                        }\n                    } else if (metadata.type === 'percentage') {\n                        if (metadata.format && config[metadata.format]) {\n                            cell.numFmt = config[metadata.format];\n                        } else {\n                            cell.numFmt = '0.00%';\n                        }\n                    } else if (metadata.type === 'datetime') {\n                        cell.dataValidation = {\n                            type: 'date',\n                            showErrorMessage: true,\n                            formulae: [new Date()]\n                        };\n\n                        if (metadata.format && config[metadata.format]) {\n                            cell.numFmt = config[metadata.format];\n                        } else {\n                            cell.numFmt = 'yyyy/mm/dd';\n                        }                        \n                    } else if (metadata.type === 'text') {\n                        if (metadata.format && config[metadata.format]) {\n                            cell.numFmt = config[metadata.format];\n                        } else {\n                            cell.numFmt = '@';\n                        }\n                    }\n                }\n            }\n        }\n\n        sheet.addRow(rowPlaceHolders);\n\n        for (let i = 1; i <= keys.length; i++) {\n            const cell = sheet.getCell(templatedRows + 2, i);\n            cell.border = { top: { style: 'thin' } };\n        }\n\n        await workbook.xlsx.writeFile(templateFile);\n    },\n\n    load_: async (\n        db,\n        mainEntity,\n        dataFile,\n        reverseMapping,\n        payloadFunctor,\n        needConfirm\n    ) => {\n        const Excel = require('exceljs');\n        let workbook = new Excel.Workbook();\n        await workbook.xlsx.readFile(dataFile);\n\n        const data = [];\n\n        workbook.eachSheet((worksheet) => {\n            let colKeys;\n\n            worksheet.eachRow(function (row, rowNumber) {\n                if (!colKeys) {\n                    colKeys = _.drop(row.values).map(\n                        (key) => reverseMapping[key]\n                    );\n                } else {\n                    const rowValues = _.drop(row.values);\n                    const isNonEmpty = _.find(\n                        rowValues,\n                        (val) => val != null && val.toString().trim() !== ''\n                    );\n\n                    if (!isNonEmpty) {\n                        return;\n                    }\n\n                    const record = _.fromPairs(_.zip(colKeys, rowValues));\n\n                    if (!_.isEmpty(record)) {\n                        const _record = unflattenObject(record);\n\n                        data.push({\n                            rowNumber,\n                            record: _record,\n                            primaryValue: rowValues[0],\n                        });\n                    }\n                }\n            });\n        });\n\n        const errors = [];\n        const confirmations = [];\n        const rowsResult = [];\n\n        const Entity = db.model(mainEntity);\n        const processed = [];\n        await eachAsync_(data, async ({ rowNumber, record, primaryValue }) => {\n            try {\n                const _confirm = [];\n                record = await payloadFunctor(\n                    Entity,\n                    record,\n                    rowNumber,\n                    _confirm\n                );\n                //console.dir(record, { depth: 10 });\n\n                if (_confirm.length > 0) {\n                    _confirm.forEach((c) =>\n                        confirmations.push({ rowNumber, ...c })\n                    );\n                }\n\n                processed.push({ rowNumber, record, primaryValue });\n                await Entity.create_(record, { $dryRun: true });\n            } catch (error) {\n                errors.push({\n                    rowNumber,\n                    error: error.message,\n                    ...(error.info ? { info: error.info } : null),\n                });\n            }\n        });\n\n        if (errors.length > 0) {\n            return { errors };\n        }\n\n        if (needConfirm && confirmations.length > 0) {\n            return { confirmations };\n        }\n\n        await eachAsync_(\n            processed,\n            async ({ rowNumber, record, primaryValue }) => {\n                try {\n                    const result = await Entity.create_(record);\n                    rowsResult.push({\n                        rowNumber,\n                        [Entity.meta.keyField]: result[Entity.meta.keyField],\n                        primaryValue,\n                    });\n                } catch (error) {\n                    errors.push({\n                        rowNumber,\n                        error: error.message,\n                    });\n                }\n            }\n        );\n\n        return { result: rowsResult, errors };\n    },\n};\n"],"names":["unflattenObject","_","eachAsync_","require","module","exports","writeTemplate_","templateFile","columnsMeta","config","keys","Object","Excel","workbook","Workbook","sheet","addWorksheet","addRow","rowPlaceHolders","Array","length","templatedRows","rows","j","i","colKey","metadata","cell","getCell","type","dataValidation","allowBlank","formulae","values","join","alignment","horizontal","format","numFmt","showErrorMessage","Date","border","top","style","xlsx","writeFile","load_","db","mainEntity","dataFile","reverseMapping","payloadFunctor","needConfirm","readFile","data","eachSheet","worksheet","colKeys","eachRow","row","rowNumber","drop","map","key","rowValues","isNonEmpty","find","val","toString","trim","record","fromPairs","zip","isEmpty","_record","push","primaryValue","errors","confirmations","rowsResult","Entity","model","processed","_confirm","forEach","c","create_","$dryRun","error","message","info","result","meta","keyField"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}