{"version":3,"sources":["../src/DbModel.js"],"sourcesContent":["import { naming } from '@kitmi/utils';\n\nclass DbModel {\n    constructor(app, connector, transaction = false) {\n        this.app = app;\n        this.connector = connector;\n        this.transaction = transaction;\n\n        this._meta = this.constructor.meta;\n        this._entities = {};\n    }\n\n    /**\n     * Fork the model with transaction flag.\n     * @param {bool} transaction \n     * @returns {DbModel}\n     */\n    fork(transaction) {\n        return new this.constructor(this.app, this.connector, transaction ?? true);\n    }\n\n    /**\n     * Get the driver.\n     * @returns {string}\n     */\n    get driver() {\n        return this.connector.driver;\n    }\n\n    /**\n     * Get an entity instance by entity name.\n     * @param {string} entityName\n     * @returns {EntityModel}\n     */\n    entity(entityName) {\n        if (this._entities[entityName]) return this._entities[entityName];\n\n        const modelClassName = naming.pascalCase(entityName);\n        if (this._entities[modelClassName]) return this._entities[modelClassName];\n\n        return (this._entities[modelClassName] = new this.constructor.meta.Entities[modelClassName](this));\n    }\n\n    /**\n     * Run a transaction.\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async transaction_(transactionFunc) {\n        const db = this.fork(true);\n\n        try {\n            await db.connector.beginTransaction_();\n            await transactionFunc(db);\n            await db.connector.commit_();\n        } catch (error) {\n            await db.connector.rollback_();\n            throw error;\n        } finally {\n            db.end();\n        }\n    }\n\n    /**\n     * End the model.\n     */\n    end() {\n        delete this._entities;\n        delete this.connector;\n        delete this.app;\n    }\n}\n\nexport default DbModel;\n"],"names":["DbModel","fork","transaction","constructor","app","connector","driver","entity","entityName","_entities","modelClassName","naming","pascalCase","meta","Entities","transaction_","transactionFunc","db","beginTransaction_","commit_","error","rollback_","end","_meta"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA4EA;;;eAAA;;;uBA5EuB;AAEvB,MAAMA;IAUF;;;;KAIC,GACDC,KAAKC,WAAW,EAAE;QACd,OAAO,IAAI,IAAI,CAACC,WAAW,CAAC,IAAI,CAACC,GAAG,EAAE,IAAI,CAACC,SAAS,EAAEH,eAAe;IACzE;IAEA;;;KAGC,GACD,IAAII,SAAS;QACT,OAAO,IAAI,CAACD,SAAS,CAACC,MAAM;IAChC;IAEA;;;;KAIC,GACDC,OAAOC,UAAU,EAAE;QACf,IAAI,IAAI,CAACC,SAAS,CAACD,WAAW,EAAE,OAAO,IAAI,CAACC,SAAS,CAACD,WAAW;QAEjE,MAAME,iBAAiBC,aAAM,CAACC,UAAU,CAACJ;QACzC,IAAI,IAAI,CAACC,SAAS,CAACC,eAAe,EAAE,OAAO,IAAI,CAACD,SAAS,CAACC,eAAe;QAEzE,OAAQ,IAAI,CAACD,SAAS,CAACC,eAAe,GAAG,IAAI,IAAI,CAACP,WAAW,CAACU,IAAI,CAACC,QAAQ,CAACJ,eAAe,CAAC,IAAI;IACpG;IAEA;;;;;;;KAOC,GACD,MAAMK,aAAaC,eAAe,EAAE;QAChC,MAAMC,KAAK,IAAI,CAAChB,IAAI,CAAC;QAErB,IAAI;YACA,MAAMgB,GAAGZ,SAAS,CAACa,iBAAiB;YACpC,MAAMF,gBAAgBC;YACtB,MAAMA,GAAGZ,SAAS,CAACc,OAAO;QAC9B,EAAE,OAAOC,OAAO;YACZ,MAAMH,GAAGZ,SAAS,CAACgB,SAAS;YAC5B,MAAMD;QACV,SAAU;YACNH,GAAGK,GAAG;QACV;IACJ;IAEA;;KAEC,GACDA,MAAM;QACF,OAAO,IAAI,CAACb,SAAS;QACrB,OAAO,IAAI,CAACJ,SAAS;QACrB,OAAO,IAAI,CAACD,GAAG;IACnB;IAtEAD,YAAYC,GAAG,EAAEC,SAAS,EAAEH,cAAc,KAAK,CAAE;QAC7C,IAAI,CAACE,GAAG,GAAGA;QACX,IAAI,CAACC,SAAS,GAAGA;QACjB,IAAI,CAACH,WAAW,GAAGA;QAEnB,IAAI,CAACqB,KAAK,GAAG,IAAI,CAACpB,WAAW,CAACU,IAAI;QAClC,IAAI,CAACJ,SAAS,GAAG,CAAC;IACtB;AAgEJ;MAEA,WAAeT"}