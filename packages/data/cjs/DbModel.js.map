{"version":3,"sources":["../src/DbModel.js"],"sourcesContent":["const path = require('node:path');\nconst { createRequire } = require('node:module')\nconst { _, naming, sleep_, text } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst { InvalidArgument } = require('@genx/error');\n\nconst retryFailed = (error) => [false, error];\nconst retryOK = (result) => [true, result];\n\nconst directReturn = (a) => a;\n\nconst tryRequire = (ownerApp, modulePath) => {\n    try {\n        const requireLocal = createRequire(text.ensureEndsWith(ownerApp.workingPath, path.sep));\n        return requireLocal(modulePath);\n    } catch (error) {\n        if (error.code === 'MODULE_NOT_FOUND') {\n            return undefined;\n        }\n\n        throw error;\n    }\n}\n\nclass DbModel {\n    constructor(app, connector, i18n) {\n        this.ownerApp = app;\n        this.app = app;\n        this.connector = connector;\n        this.i18n = i18n;\n\n        this._modelCache = {};\n    }\n\n    get driver() {\n        return this.connector.driver;\n    }\n\n    /**\n     * Get entity model class by entity name.\n     * @param {*} entityName\n     */\n    model(entityName) {\n        if (!entityName) {\n            throw new InvalidArgument('Entity name is required.')\n        }\n\n        if (this._modelCache[entityName]) return this._modelCache[entityName];\n\n        const modelClassName = naming.pascalCase(entityName);\n        if (this._modelCache[modelClassName])\n            return this._modelCache[modelClassName];\n\n        const entityCustomClassFactory = this.loadCustomModel(modelClassName);\n        const entityClassFactory = this.loadModel(modelClassName);\n\n        let modelClass = require(`./drivers/${this.driver}/EntityModel`);\n        modelClass = entityClassFactory(modelClass);\n\n        if (modelClass.meta.packagePath) {\n            const entityClassFromPackage = this.loadPackageModel(modelClass.meta.packagePath, modelClassName);\n            if (entityClassFromPackage) {\n                modelClass = entityClassFromPackage(modelClass);\n            }\n        }\n\n        if (entityCustomClassFactory) {\n            modelClass = entityCustomClassFactory(modelClass);\n        }\n\n        modelClass.db = this;\n\n        if (modelClass.__init) {\n            modelClass.__init();\n        }\n\n        this._modelCache[entityName] = modelClass;\n        if (modelClassName !== entityName) {\n            this._modelCache[modelClassName] = modelClass;\n        }\n\n        return modelClass;\n    }\n\n    loadPackageModel(packagePath, modelClassName) { \n        const packageModelPath = path.join(packagePath,  (process.env.NODE_RT && process.env.NODE_RT === 'babel') ? 'src' : 'lib', 'models', `${modelClassName}.js`);\n        const customModelPath = this.ownerApp.toAbsolutePath(packageModelPath);           \n        return fs.existsSync(customModelPath) ? require(customModelPath) : tryRequire(this.ownerApp, packageModelPath);\n    }\n\n    entitiesOfType(baseEntityName) {\n        return _.filter(this.entities, (entityName) => {\n            const Model = this.model(entityName);\n            return (\n                Model.baseClasses &&\n                Model.baseClasses.indexOf(baseEntityName) > -1\n            );\n        });\n    }\n\n    /**\n     * Run an action and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async retry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        // retry will be ignored, if the transaction is a part of another transaction\n        if (connOptions && connOptions.connection) {\n            return action_(directReturn, directReturn);\n        }\n\n        let i = 0;\n        if (maxRetry == null) maxRetry = 2;\n\n        while (i++ < maxRetry) {\n            const [finished, result] = await action_(retryOK, retryFailed);\n\n            if (finished) {\n                return result;\n            }\n\n            if (i === maxRetry) {\n                throw result;\n            }\n\n            this.app.logException(\n                'warn',\n                result,\n                `Unable to complete \"${transactionName}\" and will try ${\n                    maxRetry - i\n                } more times after ${interval || 0} ms.`\n            );\n\n            if (interval != null) {\n                await sleep_(interval);\n            }\n\n            if (onRetry_) {\n                await onRetry_();\n            }\n        }\n    }\n\n    /**\n     * Run an action as transaction and automatically retry when failed.\n     * @param {*} transactionName\n     * @param {*} action_\n     * @param {*} connOptions\n     * @param {*} maxRetry\n     * @param {*} interval\n     * @param {*} onRetry_\n     */\n    async safeRetry_(\n        transactionName,\n        action_,\n        connOptions,\n        maxRetry,\n        interval,\n        onRetry_\n    ) {\n        return this.retry_(\n            transactionName,\n            (ok, failed) =>\n                this.doTransaction_(\n                    async (connOpts) => ok(await action_(connOpts)),\n                    failed,\n                    connOptions\n                ),\n            connOptions,\n            maxRetry,\n            interval,\n            onRetry_\n        );\n    }\n\n    async close_() {\n        delete this._modelCache;\n        delete this.connector;\n        delete this.app;\n        delete this.ownerApp;\n    }\n}\n\nmodule.exports = DbModel;\n"],"names":["path","require","createRequire","_","naming","sleep_","text","fs","InvalidArgument","retryFailed","error","retryOK","result","directReturn","a","tryRequire","ownerApp","modulePath","requireLocal","ensureEndsWith","workingPath","sep","code","undefined","DbModel","driver","connector","model","entityName","_modelCache","modelClassName","pascalCase","entityCustomClassFactory","loadCustomModel","entityClassFactory","loadModel","modelClass","meta","packagePath","entityClassFromPackage","loadPackageModel","db","__init","packageModelPath","join","process","env","NODE_RT","customModelPath","toAbsolutePath","existsSync","entitiesOfType","baseEntityName","filter","entities","Model","baseClasses","indexOf","retry_","transactionName","action_","connOptions","maxRetry","interval","onRetry_","connection","i","finished","app","logException","safeRetry_","ok","failed","doTransaction_","connOpts","close_","constructor","i18n","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}