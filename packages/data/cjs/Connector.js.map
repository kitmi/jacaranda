{"version":3,"sources":["../src/Connector.js"],"sourcesContent":["import { URL } from 'node:url';\nimport { _, isEmpty } from '@kitmi/utils';\nimport { Types } from '@kitmi/validators/allSync';\nimport drivers from './drivers';\n\nexport function connectionObjectToString(obj, withoutCredential = false) {\n    const { driver, user, password, host, database, ...options } = obj;\n\n    let base = withoutCredential\n        ? `${driver}://${host}/${database}`\n        : `${driver}://${user}:${password}@${host}/${database}`;\n\n    if (!isEmpty(options)) {\n        base += '?' + new URLSearchParams(options).toString();\n    }\n\n    return base;\n}\n\nexport function connectionStringToObject(str, driver) {\n    const url = new URL(str);\n    const obj = {\n        driver: driver ?? url.protocol.replace(':', ''),\n        user: url.username,\n        password: url.password,\n        host: url.hostname,\n        database: url.pathname.substring(1),\n    };\n\n    url.searchParams.forEach((value, key) => {\n        obj[key] = value;\n    });\n\n    return obj;\n}\n\n/**\n * A database storage connector object.\n * @class\n */\nclass Connector {\n    /**\n     * Create a connector.\n     * @param {App} app - The Jacaranda app object\n     * @param {*} driver\n     * @param {*} connectionString\n     * @param {*} options\n     */\n    static createConnector(app, driver, connectionString, options) {\n        if (!(driver in drivers)) {\n            throw new Error(`Unsupported connector driver: \"${driver}\"!`);\n        }\n\n        if (!connectionString) {\n            throw new Error(`Missing required connection string`);\n        }\n\n        const ConnectorClass = drivers[driver].Connector;\n\n        return new ConnectorClass(app, connectionString, options);\n    }\n\n    /**\n     * Create a connector.\n     * @param {App} app - The Jacaranda app object\n     * @param {string} driver - Data storage type\n     * @param {string} connectionString - The connection string or object\n     * @param {object} [options] - Connector options\n     */\n    constructor(app, driver, _connectionString, options) {\n        const { connection: connectionString } = Types.OBJECT.sanitize(\n            { connection: _connectionString },\n            {\n                schema: [\n                    {\n                        connection: [\n                            { type: 'text' },\n                            {\n                                type: 'object',\n                                schema: {\n                                    driver: { type: 'text', optional: true },\n                                    user: { type: 'text' },\n                                    password: { type: 'text' },\n                                    host: { type: 'text' },\n                                    database: { type: 'text', optional: true },\n                                    port: { type: 'integer', optional: true },\n                                },\n                            },\n                        ],\n                    },\n                    ,\n                ],\n            }\n        );\n\n        /**\n         * The Jacaranda app object\n         * @member {App}\n         */\n        this.app = app;\n\n        /**\n         * The database storage type, e.g. mysql, mongodb\n         * @member {string}\n         */\n        this.driver = driver;\n\n        /**\n         * The default URL style connection string, e.g. mysql://username:password@host:port/dbname\n         * @member {string}\n         */\n        this.connectionString = connectionString;\n\n        /**\n         * Connector options\n         * @member {object}\n         */\n        this.options = options || {};\n\n        /**\n         * Is the database a relational database\n         * @member {boolean}\n         */\n        this.relational = false;\n    }\n\n    /**\n     * Make a new connection components from current connection string and given components.\n     * @param {object} components\n     * @property {string} [components.user]\n     * @property {string} [components.password]\n     * @property {string} [components.database]\n     * @property {object} [components.options]\n     */\n    makeNewConnectionString(components) {\n        const url = new URL(\n            typeof this.connectionString === 'string'\n                ? this.connectionString\n                : connectionObjectToString(this.connectionString)\n        );\n\n        if ('user' in components) {\n            url.username = components.user;\n        } else if ('username' in components) {\n            url.username = components.username;\n        }\n\n        if ('password' in components) {\n            url.password = components.password;\n        }\n\n        if ('database' in components) {\n            url.pathname = '/' + components.database;\n        } else {\n            url.pathname = '/' + this.database;\n        }\n\n        if ('options' in components) {\n            const options = components.options;\n\n            _.forOwn(options, (value, key) => {\n                url.searchParams.set(key, typeof value === 'boolean' ? (value ? 1 : 0) : value);\n            });\n        }\n\n        return url.href;\n    }\n\n    /**\n     * Get the connection without credential information, usually used for displaying.\n     * @returns {string}\n     */\n    getConnectionStringWithoutCredential(connStr) {\n        const strOrObj = connStr || this.connectionString;\n        if (typeof strOrObj === 'string') {\n            const url = new URL(strOrObj);\n\n            url.username = '';\n            url.password = '';\n\n            return url.href;\n        }\n\n        return connectionObjectToString(strOrObj, true);\n    }\n\n    /**\n     * Database name.\n     * @member {string}\n     */\n    get database() {\n        if (!this._database) {\n            this._database = new URL(this.connectionString).pathname.substring(1);\n        }\n\n        return this._database;\n    }\n\n    /**\n     * Client library.\n     * @member {object}\n     */\n    get driverLib() {\n        return this.constructor.driverLib;\n    }\n\n    /**\n     * Log query.\n     */\n\n    /*\n    async connect_() {}\n\n    async disconnect_() {}\n\n    async ping_() {}\n\n    async execute_() {}\n\n    async end_() {}\n    */\n}\n\nmodule.exports = Connector;\n"],"names":["connectionObjectToString","connectionStringToObject","obj","withoutCredential","driver","user","password","host","database","options","base","isEmpty","URLSearchParams","toString","str","url","URL","protocol","replace","username","hostname","pathname","substring","searchParams","forEach","value","key","Connector","createConnector","app","connectionString","drivers","Error","ConnectorClass","makeNewConnectionString","components","_","forOwn","set","href","getConnectionStringWithoutCredential","connStr","strOrObj","_database","driverLib","constructor","_connectionString","connection","Types","OBJECT","sanitize","schema","type","optional","port","relational","module","exports"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}