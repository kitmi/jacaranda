{"version":3,"sources":["../../../src/drivers/postgres/Connector.js"],"sourcesContent":["import { _ } from '@kitmi/utils';\nimport { connectionStringToObject } from '../../Connector';\nimport RelationalConnector from '../relational/Connector';\nimport { ApplicationError, InvalidArgument } from '../../utils/Errors';\nimport { isQuoted } from '../../utils/lang';\n\nimport { runtime, NS_MODULE } from '@kitmi/jacaranda';\n\nimport validator from '../../Validators';\n\nconst pg = runtime.get(NS_MODULE, 'pg');\nconst { Pool, Client, escapeLiteral, escapeIdentifier } = pg;\n\nconst connSym = Symbol.for('conn');\nconst tranSym = Symbol.for('tran');\n\n/**\n * SQL execution sequence\n * FROM clause\n * WHERE clause\n * GROUP BY clause\n * HAVING clause\n * SELECT clause\n * ORDER BY clause\n */\n\n/**\n * Postgres data storage connector.\n * @class\n * @extends Connector\n */\nclass PostgresConnector extends RelationalConnector {\n    static windowFunctions = new Set([\n        'CUME_DIST',\n        'DENSE_RANK',\n        'FIRST_VALUE',\n        'LAG',\n        'LAST_VALUE',\n        'LEAD',\n        'NTH_VALUE',\n        'NTILE',\n        'PERCENT_RANK',\n        'RANK',\n        'ROW_NUMBER',\n    ]);\n\n    static windowableFunctions = new Set([\n        'AVG',\n        'BIT_AND',\n        'BIT_OR',\n        'BIT_XOR',\n        'COUNT',\n        'JSON_ARRAYAGG',\n        'JSON_OBJECTAGG',\n        'MAX',\n        'MIN',\n        'STDDEV_POP',\n        'STDDEV',\n        'STD',\n        'STDDEV_SAMP',\n        'SUM',\n        'VAR_POP',\n        'VARIANCE',\n        'VAR_SAMP',\n    ]);\n\n    escapeValue = escapeLiteral;\n    escapeId = escapeIdentifier;\n    \n    queryCount = (alias, fieldName) => ({\n        type: 'function',\n        name: 'COUNT',\n        args: [fieldName || '*'],\n        alias: alias || 'count',\n    });\n\n    $call = (name, alias, args, extra) => ({\n        ...extra,\n        type: 'function',\n        name,\n        alias,\n        args,\n    });\n    $as = (name, alias) => ({ type: 'column', name, alias });\n\n    // in mysql, null value comparison will never return true, even null != 1\n    nullOrIs = (fieldName, value) => [{ [fieldName]: { $exists: false } }, { [fieldName]: { $eq: value } }];\n\n    typeCast(value) {\n        const t = typeof value;\n\n        if (t === 'boolean') return value ? 1 : 0;\n\n        if (t === 'object') {\n            if (value != null && value.isLuxonDateTime) {\n                return value.toISO({ includeOffset: false });\n            }\n        }\n\n        return value;\n    }\n\n    /**\n     * Create a new instance of the connector.\n     * @param {App} app\n     * @param {string} connectionString\n     * @param {object} options\n     */\n    constructor(app, connectionString, options) {\n        super(app, 'postgres', connectionString, options);\n\n        this.acitveClients = new WeakSet();\n        this.executedCount = 0;\n        this.transactionId = 0;\n    }\n\n    specParamToken(index) {\n        return `$${index}`;\n    }\n\n    specInClause(index) {\n        /*\n         * @see https://github.com/brianc/node-postgres/wiki/FAQ#11-how-do-i-build-a-where-foo-in--query-to-find-rows-matching-an-array-of-values\n         */\n        return ` = ANY ($${index})`; // mysql ' IN (?)'\n    }\n\n    specNotInClause(index) {        \n        return ` <> ALL ($${index})`; // mysql ' NOT IN (?)'\n    }\n\n    specCsvSetHas(fieldName, value) {\n        // mysql 'FIND_IN_SET(?, ?) > 0'\n        return `(${fieldName} @> ARRAY[${value}])`;\n    }\n\n    /**\n     * Close all connection initiated by this connector.\n     */\n    async end_() {\n        if (this.acitveClients.size > 0) {\n            for (const client of this.acitveClients) {\n                await this.disconnect_(client);\n            }\n        }\n\n        if (this.pool) {\n            await this.pool.end();\n            if (this.options.logConnection) {\n                this.app.log('info', `Close connection pool \"${this.pool[connSym]}\".`);\n            }\n            delete this.pool[connSym];\n            delete this.pool;\n        }\n    }\n\n    /**\n     * Create a database connection based on the default connection string of the connector and given options.\n     * @param {Object} [options] - Extra options for the connection, optional.\n     * @property {bool} [options.createDatabase=false] - Flag to used when creating a database.\n     * @returns {Promise.<Client>}\n     */\n    async connect_(options) {\n        if (options) {\n            const connProps = {};\n\n            if (options.createDatabase) {\n                // remove the database from connection\n                connProps.database = '';\n            }\n\n            const csKey = _.isEmpty(connProps) ? null : this.makeNewConnectionString(connProps);\n\n            if (csKey && csKey !== this.connectionString) {\n                // create standalone connection\n                const client = new Client(connectionStringToObject(csKey, this.driver));\n                await client.connect();\n\n                if (this.options.logConnection) {\n                    const connStrForDisplay = this.getConnectionStringWithoutCredential(csKey);\n                    client[connSym] = connStrForDisplay;\n\n                    this.app.log('info', `Create non-pool connection to \"${connStrForDisplay}\".`);\n                }\n\n                return client;\n            }\n        }\n\n        if (!this.pool) {\n            this.pool = new Pool(connectionStringToObject(this.connectionString));\n\n            this.pool.on('error', (err) => {\n                this.app.logError(err, 'Unexpected error on idle postgres client');\n            });\n\n            if (this.options.logConnection) {\n                const connStrForDisplay = this.getConnectionStringWithoutCredential();\n                this.pool[connSym] = connStrForDisplay;\n\n                this.pool.on('connect', () => {\n                    this.app.log('info', 'info', `Create connection pool to \"${connStrForDisplay}\".`, {\n                        connections: this.pool.totalCount,\n                    });\n                });\n            }\n        }\n\n        const client = await this.pool.connect();\n        this.acitveClients.add(client);\n\n        if (this.options.logConnection) {\n            this.app.log('info', `Get connection from pool \"${this.pool[connSym]}\".`);\n        }\n\n        return client;\n    }\n\n    /**\n     * Close a database connection.\n     * @param {Client} client - Postgres client connection.\n     */\n    async disconnect_(client) {\n        delete client[tranSym];\n\n        if (this.acitveClients.has(client)) {\n            if (this.options.logConnection) {\n                this.app.log('info', `Release connection to pool \"${this.pool[connSym]}\".`);\n            }\n            this.acitveClients.delete(client);\n\n            return client.release();\n        } else {\n            if (this.options.logConnection) {\n                this.app.log('info', `Disconnect non-pool connection to \"${client[connSym]}\".`);\n            }\n\n            delete client[connSym];\n\n            // not created by pool\n            return client.end();\n        }\n    }\n\n    /**\n     * Start a transaction. Must catch error and rollback if failed!\n     * @returns {Promise.<Client>}\n     */\n    async beginTransaction_() {\n        const client = await this.connect_();\n        const tid = (client[tranSym] = ++this.transactionId);\n        this.app.log('verbose', `Begins a new transaction [id: ${tid}].`);\n        await client.query('BEGIN');\n        return client;\n    }\n\n    /**\n     * Commit a transaction.\n     * @param {Client} client - Postgres client connection.\n     */\n    async commit_(client) {\n        try {\n            await client.query('COMMIT');\n            const tid = client[tranSym];\n            this.app.log('verbose', `Commits a transaction [id: ${tid}].`);\n        } finally {\n            this.disconnect_(client);\n        }\n    }\n\n    /**\n     * Rollback a transaction.\n     * @param {Client} client - Postgres client connection.\n     */\n    async rollback_(client) {\n        try {\n            await client.query('ROLLBACK;');\n            const tid = client[tranSym];\n            this.app.log('verbose', `Rollbacks a transaction [id: ${tid}].`);\n        } finally {\n            this.disconnect_(client);\n        }\n    }\n\n    /**\n     * Execute the sql statement.\n     *\n     * @param {String} sql - The SQL statement to execute.\n     * @param {object} params - Parameters to be placed into the SQL statement.\n     * @param {object} [options] - Execution options.\n     * @property {string} [options.usePrepared] - Whether to use prepared statement which is cached and re-used by connection.\n     * @property {boolean} [options.rowsAsArray] - To receive rows as array of columns instead of hash with column name as key.\n     * @param {Client} [connection] - Existing connection.\n     * @returns {Promise.<object>}\n     */\n    async execute_(sql, params, options, connection) {\n        let conn;\n        const { usePrepared, rowsAsArray } = options || {};\n\n        try {\n            conn = connection ?? (await this.connect_());\n\n            const query = {\n                text: sql,\n                values: params,\n            };\n\n            if (this.options.logStatement) {\n                const meta = { ...options, params };\n                if (connection) {\n                    meta.transaction = connection[tranSym];\n                }\n\n                this.app.log('verbose', sql, meta);\n            }\n\n            if (usePrepared) {\n                if (typeof usePrepared !== 'string') {\n                    throw new InvalidArgument(\n                        'The `postgres` connector requires `usePrepared` to be a string as a unique name of the query.'\n                    );\n                }\n\n                query.name = usePrepared;                \n\n                if (rowsAsArray) {\n                    query.rowMode = 'array';                  \n                }\n            }  \n\n            const res = await conn.query(query);\n            this.executedCount++;\n\n            return res;\n        } catch (err) {\n            err.info || (err.info = {});\n            Object.assign(err.info, options);\n            err.info.sql = sql;\n            err.info.params = params;\n\n            throw err;\n        } finally {\n            if (conn && !connection) {\n                await this.disconnect_(conn);\n            }\n        }\n    }\n\n    /**\n     * Ping the database to check if it is alive.\n     * @returns {Promise.<boolean>}\n     */\n    async ping_() {\n        const res = await this.execute_('SELECT 1 AS result');\n        return res && res.rows[0] === 1;\n    }\n  \n    /**\n     * Run aggregate pipeline\n     * @param {string} model\n     * @param {array} pipeline\n     * @param {object} [connOptions]\n     * @returns {*}\n     */\n    async aggregate_(model, pipeline, connOptions) {\n        if (!Array.isArray(pipeline) || pipeline.length === 0) {\n            throw new InvalidArgument('\"pipeline\" should be an unempty array.');\n        }\n\n        const [startingQuery, ..._pipeline] = pipeline;\n\n        let query = this.buildQuery(model, startingQuery);\n\n        _pipeline.forEach((stage, i) => {\n            let _params = query.params;\n\n            query = this.buildQuery(\n                {\n                    sql: query.sql,\n                    alias: `_STAGE_${i}`,\n                },\n                stage\n            );\n\n            query.params = _params.concat(query.params);\n        });\n\n        return this._executeQuery_(query, null, connOptions);\n    }\n\n    async _executeQuery_(query, queryOptions, connOptions) {\n        let result, totalCount;\n\n        if (query.countSql) {\n            const [countResult] = await this.execute_(query.countSql, query.countParams, connOptions);\n            totalCount = countResult.count;\n        }\n\n        if (query.hasJoining) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n            result = await this.execute_(query.sql, query.params, connOptions);\n\n            const reverseAliasMap = _.reduce(\n                query.aliasMap,\n                (result, alias, nodePath) => {\n                    result[alias] = nodePath\n                        .split('.')\n                        .slice(\n                            1\n                        ) /* .map(n => ':' + n) changed to be padding by orm and can be customized with other key getter */;\n                    return result;\n                },\n                {}\n            );\n\n            if (query.countSql) {\n                return result.concat([reverseAliasMap, totalCount]);\n            }\n\n            return result.concat([reverseAliasMap]);\n        } else if (queryOptions?.$skipOrm) {\n            connOptions = { ...connOptions, rowsAsArray: true };\n        }\n\n        result = await this.execute_(query.sql, query.params, connOptions);\n\n        if (query.countSql) {\n            return [result, totalCount];\n        }\n\n        return result;\n    }\n}\n\nPostgresConnector.driverLib = pg;\n\nexport default PostgresConnector;\n"],"names":["pg","runtime","get","NS_MODULE","Pool","Client","escapeLiteral","escapeIdentifier","connSym","Symbol","for","tranSym","PostgresConnector","RelationalConnector","typeCast","value","t","isLuxonDateTime","toISO","includeOffset","specParamToken","index","specInClause","specNotInClause","specCsvSetHas","fieldName","end_","acitveClients","size","client","disconnect_","pool","end","options","logConnection","app","log","connect_","connProps","createDatabase","database","csKey","_","isEmpty","makeNewConnectionString","connectionString","connectionStringToObject","driver","connect","connStrForDisplay","getConnectionStringWithoutCredential","on","err","logError","connections","totalCount","add","has","delete","release","beginTransaction_","tid","transactionId","query","commit_","rollback_","execute_","sql","params","connection","conn","usePrepared","rowsAsArray","text","values","logStatement","meta","transaction","InvalidArgument","name","rowMode","res","executedCount","info","Object","assign","ping_","rows","aggregate_","model","pipeline","connOptions","Array","isArray","length","startingQuery","_pipeline","buildQuery","forEach","stage","i","_params","alias","concat","_executeQuery_","queryOptions","result","countSql","countResult","countParams","count","hasJoining","reverseAliasMap","reduce","aliasMap","nodePath","split","slice","$skipOrm","constructor","escapeValue","escapeId","queryCount","type","args","$call","extra","$as","nullOrIs","$exists","$eq","WeakSet","windowFunctions","Set","windowableFunctions","driverLib"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BAobA;;;eAAA;;;uBApbkB;2BACuB;mEACT;wBACkB;sBACzB;2BAEU;mEAEb;;;;;;;;;;;;;;;;;;;AAEtB,MAAMA,KAAKC,kBAAO,CAACC,GAAG,CAACC,oBAAS,EAAE;AAClC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,aAAa,EAAEC,gBAAgB,EAAE,GAAGP;AAE1D,MAAMQ,UAAUC,OAAOC,GAAG,CAAC;AAC3B,MAAMC,UAAUF,OAAOC,GAAG,CAAC;AAE3B;;;;;;;;CAQC,GAED;;;;CAIC,GACD,MAAME,0BAA0BC,mBAAmB;IAyD/CC,SAASC,KAAK,EAAE;QACZ,MAAMC,IAAI,OAAOD;QAEjB,IAAIC,MAAM,WAAW,OAAOD,QAAQ,IAAI;QAExC,IAAIC,MAAM,UAAU;YAChB,IAAID,SAAS,QAAQA,MAAME,eAAe,EAAE;gBACxC,OAAOF,MAAMG,KAAK,CAAC;oBAAEC,eAAe;gBAAM;YAC9C;QACJ;QAEA,OAAOJ;IACX;IAgBAK,eAAeC,KAAK,EAAE;QAClB,OAAO,CAAC,CAAC,EAAEA,MAAM,CAAC;IACtB;IAEAC,aAAaD,KAAK,EAAE;QAChB;;SAEC,GACD,OAAO,CAAC,SAAS,EAAEA,MAAM,CAAC,CAAC,EAAE,kBAAkB;IACnD;IAEAE,gBAAgBF,KAAK,EAAE;QACnB,OAAO,CAAC,UAAU,EAAEA,MAAM,CAAC,CAAC,EAAE,sBAAsB;IACxD;IAEAG,cAAcC,SAAS,EAAEV,KAAK,EAAE;QAC5B,gCAAgC;QAChC,OAAO,CAAC,CAAC,EAAEU,UAAU,UAAU,EAAEV,MAAM,EAAE,CAAC;IAC9C;IAEA;;KAEC,GACD,MAAMW,OAAO;QACT,IAAI,IAAI,CAACC,aAAa,CAACC,IAAI,GAAG,GAAG;YAC7B,KAAK,MAAMC,UAAU,IAAI,CAACF,aAAa,CAAE;gBACrC,MAAM,IAAI,CAACG,WAAW,CAACD;YAC3B;QACJ;QAEA,IAAI,IAAI,CAACE,IAAI,EAAE;YACX,MAAM,IAAI,CAACA,IAAI,CAACC,GAAG;YACnB,IAAI,IAAI,CAACC,OAAO,CAACC,aAAa,EAAE;gBAC5B,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,QAAQ,CAAC,uBAAuB,EAAE,IAAI,CAACL,IAAI,CAACvB,QAAQ,CAAC,EAAE,CAAC;YACzE;YACA,OAAO,IAAI,CAACuB,IAAI,CAACvB,QAAQ;YACzB,OAAO,IAAI,CAACuB,IAAI;QACpB;IACJ;IAEA;;;;;KAKC,GACD,MAAMM,SAASJ,OAAO,EAAE;QACpB,IAAIA,SAAS;YACT,MAAMK,YAAY,CAAC;YAEnB,IAAIL,QAAQM,cAAc,EAAE;gBACxB,sCAAsC;gBACtCD,UAAUE,QAAQ,GAAG;YACzB;YAEA,MAAMC,QAAQC,QAAC,CAACC,OAAO,CAACL,aAAa,OAAO,IAAI,CAACM,uBAAuB,CAACN;YAEzE,IAAIG,SAASA,UAAU,IAAI,CAACI,gBAAgB,EAAE;gBAC1C,+BAA+B;gBAC/B,MAAMhB,SAAS,IAAIxB,OAAOyC,IAAAA,mCAAwB,EAACL,OAAO,IAAI,CAACM,MAAM;gBACrE,MAAMlB,OAAOmB,OAAO;gBAEpB,IAAI,IAAI,CAACf,OAAO,CAACC,aAAa,EAAE;oBAC5B,MAAMe,oBAAoB,IAAI,CAACC,oCAAoC,CAACT;oBACpEZ,MAAM,CAACrB,QAAQ,GAAGyC;oBAElB,IAAI,CAACd,GAAG,CAACC,GAAG,CAAC,QAAQ,CAAC,+BAA+B,EAAEa,kBAAkB,EAAE,CAAC;gBAChF;gBAEA,OAAOpB;YACX;QACJ;QAEA,IAAI,CAAC,IAAI,CAACE,IAAI,EAAE;YACZ,IAAI,CAACA,IAAI,GAAG,IAAI3B,KAAK0C,IAAAA,mCAAwB,EAAC,IAAI,CAACD,gBAAgB;YAEnE,IAAI,CAACd,IAAI,CAACoB,EAAE,CAAC,SAAS,CAACC;gBACnB,IAAI,CAACjB,GAAG,CAACkB,QAAQ,CAACD,KAAK;YAC3B;YAEA,IAAI,IAAI,CAACnB,OAAO,CAACC,aAAa,EAAE;gBAC5B,MAAMe,oBAAoB,IAAI,CAACC,oCAAoC;gBACnE,IAAI,CAACnB,IAAI,CAACvB,QAAQ,GAAGyC;gBAErB,IAAI,CAAClB,IAAI,CAACoB,EAAE,CAAC,WAAW;oBACpB,IAAI,CAAChB,GAAG,CAACC,GAAG,CAAC,QAAQ,QAAQ,CAAC,2BAA2B,EAAEa,kBAAkB,EAAE,CAAC,EAAE;wBAC9EK,aAAa,IAAI,CAACvB,IAAI,CAACwB,UAAU;oBACrC;gBACJ;YACJ;QACJ;QAEA,MAAM1B,SAAS,MAAM,IAAI,CAACE,IAAI,CAACiB,OAAO;QACtC,IAAI,CAACrB,aAAa,CAAC6B,GAAG,CAAC3B;QAEvB,IAAI,IAAI,CAACI,OAAO,CAACC,aAAa,EAAE;YAC5B,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,QAAQ,CAAC,0BAA0B,EAAE,IAAI,CAACL,IAAI,CAACvB,QAAQ,CAAC,EAAE,CAAC;QAC5E;QAEA,OAAOqB;IACX;IAEA;;;KAGC,GACD,MAAMC,YAAYD,MAAM,EAAE;QACtB,OAAOA,MAAM,CAAClB,QAAQ;QAEtB,IAAI,IAAI,CAACgB,aAAa,CAAC8B,GAAG,CAAC5B,SAAS;YAChC,IAAI,IAAI,CAACI,OAAO,CAACC,aAAa,EAAE;gBAC5B,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,QAAQ,CAAC,4BAA4B,EAAE,IAAI,CAACL,IAAI,CAACvB,QAAQ,CAAC,EAAE,CAAC;YAC9E;YACA,IAAI,CAACmB,aAAa,CAAC+B,MAAM,CAAC7B;YAE1B,OAAOA,OAAO8B,OAAO;QACzB,OAAO;YACH,IAAI,IAAI,CAAC1B,OAAO,CAACC,aAAa,EAAE;gBAC5B,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,QAAQ,CAAC,mCAAmC,EAAEP,MAAM,CAACrB,QAAQ,CAAC,EAAE,CAAC;YAClF;YAEA,OAAOqB,MAAM,CAACrB,QAAQ;YAEtB,sBAAsB;YACtB,OAAOqB,OAAOG,GAAG;QACrB;IACJ;IAEA;;;KAGC,GACD,MAAM4B,oBAAoB;QACtB,MAAM/B,SAAS,MAAM,IAAI,CAACQ,QAAQ;QAClC,MAAMwB,MAAOhC,MAAM,CAAClB,QAAQ,GAAG,EAAE,IAAI,CAACmD,aAAa;QACnD,IAAI,CAAC3B,GAAG,CAACC,GAAG,CAAC,WAAW,CAAC,8BAA8B,EAAEyB,IAAI,EAAE,CAAC;QAChE,MAAMhC,OAAOkC,KAAK,CAAC;QACnB,OAAOlC;IACX;IAEA;;;KAGC,GACD,MAAMmC,QAAQnC,MAAM,EAAE;QAClB,IAAI;YACA,MAAMA,OAAOkC,KAAK,CAAC;YACnB,MAAMF,MAAMhC,MAAM,CAAClB,QAAQ;YAC3B,IAAI,CAACwB,GAAG,CAACC,GAAG,CAAC,WAAW,CAAC,2BAA2B,EAAEyB,IAAI,EAAE,CAAC;QACjE,SAAU;YACN,IAAI,CAAC/B,WAAW,CAACD;QACrB;IACJ;IAEA;;;KAGC,GACD,MAAMoC,UAAUpC,MAAM,EAAE;QACpB,IAAI;YACA,MAAMA,OAAOkC,KAAK,CAAC;YACnB,MAAMF,MAAMhC,MAAM,CAAClB,QAAQ;YAC3B,IAAI,CAACwB,GAAG,CAACC,GAAG,CAAC,WAAW,CAAC,6BAA6B,EAAEyB,IAAI,EAAE,CAAC;QACnE,SAAU;YACN,IAAI,CAAC/B,WAAW,CAACD;QACrB;IACJ;IAEA;;;;;;;;;;KAUC,GACD,MAAMqC,SAASC,GAAG,EAAEC,MAAM,EAAEnC,OAAO,EAAEoC,UAAU,EAAE;QAC7C,IAAIC;QACJ,MAAM,EAAEC,WAAW,EAAEC,WAAW,EAAE,GAAGvC,WAAW,CAAC;QAEjD,IAAI;YACAqC,OAAOD,cAAe,MAAM,IAAI,CAAChC,QAAQ;YAEzC,MAAM0B,QAAQ;gBACVU,MAAMN;gBACNO,QAAQN;YACZ;YAEA,IAAI,IAAI,CAACnC,OAAO,CAAC0C,YAAY,EAAE;gBAC3B,MAAMC,OAAO;oBAAE,GAAG3C,OAAO;oBAAEmC;gBAAO;gBAClC,IAAIC,YAAY;oBACZO,KAAKC,WAAW,GAAGR,UAAU,CAAC1D,QAAQ;gBAC1C;gBAEA,IAAI,CAACwB,GAAG,CAACC,GAAG,CAAC,WAAW+B,KAAKS;YACjC;YAEA,IAAIL,aAAa;gBACb,IAAI,OAAOA,gBAAgB,UAAU;oBACjC,MAAM,IAAIO,uBAAe,CACrB;gBAER;gBAEAf,MAAMgB,IAAI,GAAGR;gBAEb,IAAIC,aAAa;oBACbT,MAAMiB,OAAO,GAAG;gBACpB;YACJ;YAEA,MAAMC,MAAM,MAAMX,KAAKP,KAAK,CAACA;YAC7B,IAAI,CAACmB,aAAa;YAElB,OAAOD;QACX,EAAE,OAAO7B,KAAK;YACVA,IAAI+B,IAAI,IAAK/B,CAAAA,IAAI+B,IAAI,GAAG,CAAC,CAAA;YACzBC,OAAOC,MAAM,CAACjC,IAAI+B,IAAI,EAAElD;YACxBmB,IAAI+B,IAAI,CAAChB,GAAG,GAAGA;YACff,IAAI+B,IAAI,CAACf,MAAM,GAAGA;YAElB,MAAMhB;QACV,SAAU;YACN,IAAIkB,QAAQ,CAACD,YAAY;gBACrB,MAAM,IAAI,CAACvC,WAAW,CAACwC;YAC3B;QACJ;IACJ;IAEA;;;KAGC,GACD,MAAMgB,QAAQ;QACV,MAAML,MAAM,MAAM,IAAI,CAACf,QAAQ,CAAC;QAChC,OAAOe,OAAOA,IAAIM,IAAI,CAAC,EAAE,KAAK;IAClC;IAEA;;;;;;KAMC,GACD,MAAMC,WAAWC,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAE;QAC3C,IAAI,CAACC,MAAMC,OAAO,CAACH,aAAaA,SAASI,MAAM,KAAK,GAAG;YACnD,MAAM,IAAIhB,uBAAe,CAAC;QAC9B;QAEA,MAAM,CAACiB,eAAe,GAAGC,UAAU,GAAGN;QAEtC,IAAI3B,QAAQ,IAAI,CAACkC,UAAU,CAACR,OAAOM;QAEnCC,UAAUE,OAAO,CAAC,CAACC,OAAOC;YACtB,IAAIC,UAAUtC,MAAMK,MAAM;YAE1BL,QAAQ,IAAI,CAACkC,UAAU,CACnB;gBACI9B,KAAKJ,MAAMI,GAAG;gBACdmC,OAAO,CAAC,OAAO,EAAEF,EAAE,CAAC;YACxB,GACAD;YAGJpC,MAAMK,MAAM,GAAGiC,QAAQE,MAAM,CAACxC,MAAMK,MAAM;QAC9C;QAEA,OAAO,IAAI,CAACoC,cAAc,CAACzC,OAAO,MAAM4B;IAC5C;IAEA,MAAMa,eAAezC,KAAK,EAAE0C,YAAY,EAAEd,WAAW,EAAE;QACnD,IAAIe,QAAQnD;QAEZ,IAAIQ,MAAM4C,QAAQ,EAAE;YAChB,MAAM,CAACC,YAAY,GAAG,MAAM,IAAI,CAAC1C,QAAQ,CAACH,MAAM4C,QAAQ,EAAE5C,MAAM8C,WAAW,EAAElB;YAC7EpC,aAAaqD,YAAYE,KAAK;QAClC;QAEA,IAAI/C,MAAMgD,UAAU,EAAE;YAClBpB,cAAc;gBAAE,GAAGA,WAAW;gBAAEnB,aAAa;YAAK;YAClDkC,SAAS,MAAM,IAAI,CAACxC,QAAQ,CAACH,MAAMI,GAAG,EAAEJ,MAAMK,MAAM,EAAEuB;YAEtD,MAAMqB,kBAAkBtE,QAAC,CAACuE,MAAM,CAC5BlD,MAAMmD,QAAQ,EACd,CAACR,QAAQJ,OAAOa;gBACZT,MAAM,CAACJ,MAAM,GAAGa,SACXC,KAAK,CAAC,KACNC,KAAK,CACF,GACF,+FAA+F;gBACrG,OAAOX;YACX,GACA,CAAC;YAGL,IAAI3C,MAAM4C,QAAQ,EAAE;gBAChB,OAAOD,OAAOH,MAAM,CAAC;oBAACS;oBAAiBzD;iBAAW;YACtD;YAEA,OAAOmD,OAAOH,MAAM,CAAC;gBAACS;aAAgB;QAC1C,OAAO,IAAIP,cAAca,UAAU;YAC/B3B,cAAc;gBAAE,GAAGA,WAAW;gBAAEnB,aAAa;YAAK;QACtD;QAEAkC,SAAS,MAAM,IAAI,CAACxC,QAAQ,CAACH,MAAMI,GAAG,EAAEJ,MAAMK,MAAM,EAAEuB;QAEtD,IAAI5B,MAAM4C,QAAQ,EAAE;YAChB,OAAO;gBAACD;gBAAQnD;aAAW;QAC/B;QAEA,OAAOmD;IACX;IAzUA;;;;;KAKC,GACDa,YAAYpF,GAAG,EAAEU,gBAAgB,EAAEZ,OAAO,CAAE;QACxC,KAAK,CAACE,KAAK,YAAYU,kBAAkBZ;QA3C7CuF,uBAAAA,eAAclH;QACdmH,uBAAAA,YAAWlH;QAEXmH,uBAAAA,cAAa,CAACpB,OAAO7E,YAAe,CAAA;gBAChCkG,MAAM;gBACN5C,MAAM;gBACN6C,MAAM;oBAACnG,aAAa;iBAAI;gBACxB6E,OAAOA,SAAS;YACpB,CAAA;QAEAuB,uBAAAA,SAAQ,CAAC9C,MAAMuB,OAAOsB,MAAME,QAAW,CAAA;gBACnC,GAAGA,KAAK;gBACRH,MAAM;gBACN5C;gBACAuB;gBACAsB;YACJ,CAAA;QACAG,uBAAAA,OAAM,CAAChD,MAAMuB,QAAW,CAAA;gBAAEqB,MAAM;gBAAU5C;gBAAMuB;YAAM,CAAA;QAEtD,yEAAyE;QACzE0B,uBAAAA,YAAW,CAACvG,WAAWV,QAAU;gBAAC;oBAAE,CAACU,UAAU,EAAE;wBAAEwG,SAAS;oBAAM;gBAAE;gBAAG;oBAAE,CAACxG,UAAU,EAAE;wBAAEyG,KAAKnH;oBAAM;gBAAE;aAAE;QAyBnG,IAAI,CAACY,aAAa,GAAG,IAAIwG;QACzB,IAAI,CAACjD,aAAa,GAAG;QACrB,IAAI,CAACpB,aAAa,GAAG;IACzB;AA8TJ;AAhZI,iBADElD,mBACKwH,mBAAkB,IAAIC,IAAI;IAC7B;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH;AAED,iBAfEzH,mBAeK0H,uBAAsB,IAAID,IAAI;IACjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH;AAkXLzH,kBAAkB2H,SAAS,GAAGvI;MAE9B,WAAeY"}