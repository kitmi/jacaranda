{"version":3,"sources":["../../src/entityFeatures/index.js"],"sourcesContent":["const path = require('path');\nconst { _ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\nconst basePath = path.resolve(__dirname);\nconst features = fs.readdirSync(basePath);\n\nconst featureRules = {};\n\nfeatures.forEach((file) => {\n    const f = path.join(basePath, file);\n    if (fs.statSync(f).isFile() && _.endsWith(file, '.js')) {\n        const featureName = path.basename(file, '.js');\n        if (featureName === 'index') return;\n\n        const feature = require(f);\n\n        _.forOwn(feature, (action, ruleName) => {\n            const key = featureName + '.' + ruleName;\n\n            if (key in featureRules) {\n                throw new Error(`Duplicate feature rule: ${key}`);\n            }\n            featureRules[key] = action;\n        });\n    }\n});\n\nmodule.exports = {\n    applyRules_: async (ruleName, entityModel, context) => {\n        for (const featureName in entityModel.meta.features) {\n            const key = featureName + '.' + ruleName;\n            const action = featureRules[key];\n\n            if (action) {\n                let featureInfo = entityModel.meta.features[featureName];\n\n                if (\n                    context.options.$features &&\n                    featureName in context.options.$features\n                ) {\n                    const customFeatureInfo =\n                        context.options.$features[featureName];\n                    if (!customFeatureInfo) {\n                        continue;\n                    }\n\n                    featureInfo = { ...featureInfo, ...customFeatureInfo };\n                }\n\n                const asExpected = await action(\n                    featureInfo,\n                    entityModel,\n                    context\n                );\n                if (!asExpected) return false;\n            }\n        }\n\n        return true;\n    },\n};\n"],"names":["path","require","_","fs","basePath","resolve","__dirname","features","readdirSync","featureRules","forEach","file","f","join","statSync","isFile","endsWith","featureName","basename","feature","forOwn","action","ruleName","key","Error","module","exports","applyRules_","entityModel","context","meta","featureInfo","options","$features","customFeatureInfo","asExpected"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAMA,OAAOC,QAAQ;AACrB,MAAM,EAAEC,CAAC,EAAE,GAAGD,QAAQ;AACtB,MAAM,EAAEE,EAAE,EAAE,GAAGF,QAAQ;AAEvB,MAAMG,WAAWJ,KAAKK,OAAO,CAACC;AAC9B,MAAMC,WAAWJ,GAAGK,WAAW,CAACJ;AAEhC,MAAMK,eAAe,CAAC;AAEtBF,SAASG,OAAO,CAAC,CAACC;IACd,MAAMC,IAAIZ,KAAKa,IAAI,CAACT,UAAUO;IAC9B,IAAIR,GAAGW,QAAQ,CAACF,GAAGG,MAAM,MAAMb,EAAEc,QAAQ,CAACL,MAAM,QAAQ;QACpD,MAAMM,cAAcjB,KAAKkB,QAAQ,CAACP,MAAM;QACxC,IAAIM,gBAAgB,SAAS;QAE7B,MAAME,UAAUlB,QAAQW;QAExBV,EAAEkB,MAAM,CAACD,SAAS,CAACE,QAAQC;YACvB,MAAMC,MAAMN,cAAc,MAAMK;YAEhC,IAAIC,OAAOd,cAAc;gBACrB,MAAM,IAAIe,MAAM,CAAC,wBAAwB,EAAED,IAAI,CAAC;YACpD;YACAd,YAAY,CAACc,IAAI,GAAGF;QACxB;IACJ;AACJ;AAEAI,OAAOC,OAAO,GAAG;IACbC,aAAa,OAAOL,UAAUM,aAAaC;QACvC,IAAK,MAAMZ,eAAeW,YAAYE,IAAI,CAACvB,QAAQ,CAAE;YACjD,MAAMgB,MAAMN,cAAc,MAAMK;YAChC,MAAMD,SAASZ,YAAY,CAACc,IAAI;YAEhC,IAAIF,QAAQ;gBACR,IAAIU,cAAcH,YAAYE,IAAI,CAACvB,QAAQ,CAACU,YAAY;gBAExD,IACIY,QAAQG,OAAO,CAACC,SAAS,IACzBhB,eAAeY,QAAQG,OAAO,CAACC,SAAS,EAC1C;oBACE,MAAMC,oBACFL,QAAQG,OAAO,CAACC,SAAS,CAAChB,YAAY;oBAC1C,IAAI,CAACiB,mBAAmB;wBACpB;oBACJ;oBAEAH,cAAc;wBAAE,GAAGA,WAAW;wBAAE,GAAGG,iBAAiB;oBAAC;gBACzD;gBAEA,MAAMC,aAAa,MAAMd,OACrBU,aACAH,aACAC;gBAEJ,IAAI,CAACM,YAAY,OAAO;YAC5B;QACJ;QAEA,OAAO;IACX;AACJ"}