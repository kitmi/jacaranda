{"version":3,"sources":["../../src/entityFeatures/logicalDeletion.js"],"sourcesContent":["const Rules = require('../enum/Rules');\nconst { mergeCondition } = require('../utils/lang');\nconst Generators = require('../Generators');\nconst { _ } = require('@genx/july');\n\n/**\n * A rule specifies the entity will not be deleted physically.\n * @module EntityFeatureRuntime_LogicalDeletion\n */\n\nmodule.exports = {\n    [Rules.RULE_BEFORE_FIND]: (feature, entityModel, context) => {\n        const findOptions = context.options;\n        if (!findOptions.$includeDeleted) {\n            findOptions.$query = mergeCondition(findOptions.$query, {\n                [feature.field]: { $ne: feature.value },\n            });\n        }\n\n        return true;\n    },\n    [Rules.RULE_BEFORE_DELETE]: async (feature, entityModel, context) => {\n        const options = context.options;\n        if (!options.$physicalDeletion) {\n            const { field, value, timestampField } = feature;\n            const updateTo = {\n                [field]: value,\n            };\n\n            if (timestampField) {\n                updateTo[timestampField] = Generators.default(\n                    entityModel.meta.fields[timestampField],\n                    context.i18n\n                );\n            }\n\n            const updateOpts = {\n                $query: options.$query,\n                $retrieveUpdated: options.$retrieveDeleted,\n                $bypassReadOnly: new Set([field, timestampField]),\n                ..._.pick(options, ['$retrieveDeleted', '$retrieveDbResult']),\n            };\n\n            context.return = await entityModel._update_(\n                updateTo,\n                updateOpts,\n                context.connOptions,\n                context.forSingleRecord\n            );\n\n            if (options.$retrieveDbResult) {\n                context.rawOptions.$result = updateOpts.$result;\n            }\n\n            return false;\n        }\n\n        return true;\n    },\n};\n"],"names":["Rules","require","mergeCondition","Generators","_","module","exports","RULE_BEFORE_FIND","feature","entityModel","context","findOptions","options","$includeDeleted","$query","field","$ne","value","RULE_BEFORE_DELETE","$physicalDeletion","timestampField","updateTo","default","meta","fields","i18n","updateOpts","$retrieveUpdated","$retrieveDeleted","$bypassReadOnly","Set","pick","return","_update_","connOptions","forSingleRecord","$retrieveDbResult","rawOptions","$result"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAMA,QAAQC,QAAQ;AACtB,MAAM,EAAEC,cAAc,EAAE,GAAGD,QAAQ;AACnC,MAAME,aAAaF,QAAQ;AAC3B,MAAM,EAAEG,CAAC,EAAE,GAAGH,QAAQ;AAEtB;;;CAGC,GAEDI,OAAOC,OAAO,GAAG;IACb,CAACN,MAAMO,gBAAgB,CAAC,EAAE,CAACC,SAASC,aAAaC;QAC7C,MAAMC,cAAcD,QAAQE,OAAO;QACnC,IAAI,CAACD,YAAYE,eAAe,EAAE;YAC9BF,YAAYG,MAAM,GAAGZ,eAAeS,YAAYG,MAAM,EAAE;gBACpD,CAACN,QAAQO,KAAK,CAAC,EAAE;oBAAEC,KAAKR,QAAQS,KAAK;gBAAC;YAC1C;QACJ;QAEA,OAAO;IACX;IACA,CAACjB,MAAMkB,kBAAkB,CAAC,EAAE,OAAOV,SAASC,aAAaC;QACrD,MAAME,UAAUF,QAAQE,OAAO;QAC/B,IAAI,CAACA,QAAQO,iBAAiB,EAAE;YAC5B,MAAM,EAAEJ,KAAK,EAAEE,KAAK,EAAEG,cAAc,EAAE,GAAGZ;YACzC,MAAMa,WAAW;gBACb,CAACN,MAAM,EAAEE;YACb;YAEA,IAAIG,gBAAgB;gBAChBC,QAAQ,CAACD,eAAe,GAAGjB,WAAWmB,OAAO,CACzCb,YAAYc,IAAI,CAACC,MAAM,CAACJ,eAAe,EACvCV,QAAQe,IAAI;YAEpB;YAEA,MAAMC,aAAa;gBACfZ,QAAQF,QAAQE,MAAM;gBACtBa,kBAAkBf,QAAQgB,gBAAgB;gBAC1CC,iBAAiB,IAAIC,IAAI;oBAACf;oBAAOK;iBAAe;gBAChD,GAAGhB,EAAE2B,IAAI,CAACnB,SAAS;oBAAC;oBAAoB;iBAAoB,CAAC;YACjE;YAEAF,QAAQsB,MAAM,GAAG,MAAMvB,YAAYwB,QAAQ,CACvCZ,UACAK,YACAhB,QAAQwB,WAAW,EACnBxB,QAAQyB,eAAe;YAG3B,IAAIvB,QAAQwB,iBAAiB,EAAE;gBAC3B1B,QAAQ2B,UAAU,CAACC,OAAO,GAAGZ,WAAWY,OAAO;YACnD;YAEA,OAAO;QACX;QAEA,OAAO;IACX;AACJ"}