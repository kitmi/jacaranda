{"version":3,"sources":["../../src/entityFeatures/changeLog.js"],"sourcesContent":["const { _ } = require('@genx/july');\nconst Rules = require('../enum/Rules');\nconst { DATETIME } = require('../types');\nconst { ApplicationError } = require('../utils/Errors');\n\nfunction getConnector(entityModel, feature) {\n    const app = entityModel.db.app;\n\n    if (!app) {\n        entityModel.db.connector.log(\n            'warn',\n            `\"changeLog\" feature does not work when used without a service container app.`\n        );\n        return true;\n    }\n\n    return app.getService(feature.dataSource);\n}\n\nasync function createLogEntry_(entityModel, feature, context, operation) {\n    const logEntry = {\n        entity: entityModel.meta.name,\n        operation,\n        which: context.queryKey,\n        changedAt: DATETIME.typeObject.local(),\n    };\n\n    if (operation !== 'delete') {\n        logEntry.data = context.latest;\n    } else {\n        logEntry.data = context.existing;\n    }\n\n    if (feature.withUser) {\n        const user = entityModel.getValueFromContext(context, feature.withUser);\n        if (_.isNil(user)) {\n            throw new ApplicationError(\n                `Cannot get value of [${feature.withUser}] from context. Entity: ${entityModel.meta.name}, operation: ${operation}`\n            );\n        }\n\n        logEntry.changedBy = user;\n    }\n\n    // dry-run mode only checks validaty of data\n    if (context.options.$dryRun) {\n        return;\n    }\n\n    const clConnector = getConnector(entityModel, feature);\n    await clConnector.insertOne_(\n        feature.storeEntity,\n        logEntry,\n        context.connOptions\n    );\n}\n\n/**\n * A rule specifies the change of state will be tracked automatically.\n * @module EntityFeatureRuntime_ChangeLog\n */\n\nmodule.exports = {\n    [Rules.RULE_AFTER_CREATE]: (feature, entityModel, context) =>\n        createLogEntry_(entityModel, feature, context, 'create'),\n    [Rules.RULE_AFTER_UPDATE]: (feature, entityModel, context) =>\n        createLogEntry_(entityModel, feature, context, 'update'),\n    [Rules.RULE_AFTER_DELETE]: (feature, entityModel, context) =>\n        createLogEntry_(entityModel, feature, context, 'delete'),\n};\n"],"names":["_","require","Rules","DATETIME","ApplicationError","getConnector","entityModel","feature","app","db","connector","log","getService","dataSource","createLogEntry_","context","operation","logEntry","entity","meta","name","which","queryKey","changedAt","typeObject","local","data","latest","existing","withUser","user","getValueFromContext","isNil","changedBy","options","$dryRun","clConnector","insertOne_","storeEntity","connOptions","module","exports","RULE_AFTER_CREATE","RULE_AFTER_UPDATE","RULE_AFTER_DELETE"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAM,EAAEA,CAAC,EAAE,GAAGC,QAAQ;AACtB,MAAMC,QAAQD,QAAQ;AACtB,MAAM,EAAEE,QAAQ,EAAE,GAAGF,QAAQ;AAC7B,MAAM,EAAEG,gBAAgB,EAAE,GAAGH,QAAQ;AAErC,SAASI,aAAaC,WAAW,EAAEC,OAAO;IACtC,MAAMC,MAAMF,YAAYG,EAAE,CAACD,GAAG;IAE9B,IAAI,CAACA,KAAK;QACNF,YAAYG,EAAE,CAACC,SAAS,CAACC,GAAG,CACxB,QACA,CAAC,4EAA4E,CAAC;QAElF,OAAO;IACX;IAEA,OAAOH,IAAII,UAAU,CAACL,QAAQM,UAAU;AAC5C;AAEA,eAAeC,gBAAgBR,WAAW,EAAEC,OAAO,EAAEQ,OAAO,EAAEC,SAAS;IACnE,MAAMC,WAAW;QACbC,QAAQZ,YAAYa,IAAI,CAACC,IAAI;QAC7BJ;QACAK,OAAON,QAAQO,QAAQ;QACvBC,WAAWpB,SAASqB,UAAU,CAACC,KAAK;IACxC;IAEA,IAAIT,cAAc,UAAU;QACxBC,SAASS,IAAI,GAAGX,QAAQY,MAAM;IAClC,OAAO;QACHV,SAASS,IAAI,GAAGX,QAAQa,QAAQ;IACpC;IAEA,IAAIrB,QAAQsB,QAAQ,EAAE;QAClB,MAAMC,OAAOxB,YAAYyB,mBAAmB,CAAChB,SAASR,QAAQsB,QAAQ;QACtE,IAAI7B,EAAEgC,KAAK,CAACF,OAAO;YACf,MAAM,IAAI1B,iBACN,CAAC,qBAAqB,EAAEG,QAAQsB,QAAQ,CAAC,wBAAwB,EAAEvB,YAAYa,IAAI,CAACC,IAAI,CAAC,aAAa,EAAEJ,UAAU,CAAC;QAE3H;QAEAC,SAASgB,SAAS,GAAGH;IACzB;IAEA,4CAA4C;IAC5C,IAAIf,QAAQmB,OAAO,CAACC,OAAO,EAAE;QACzB;IACJ;IAEA,MAAMC,cAAc/B,aAAaC,aAAaC;IAC9C,MAAM6B,YAAYC,UAAU,CACxB9B,QAAQ+B,WAAW,EACnBrB,UACAF,QAAQwB,WAAW;AAE3B;AAEA;;;CAGC,GAEDC,OAAOC,OAAO,GAAG;IACb,CAACvC,MAAMwC,iBAAiB,CAAC,EAAE,CAACnC,SAASD,aAAaS,UAC9CD,gBAAgBR,aAAaC,SAASQ,SAAS;IACnD,CAACb,MAAMyC,iBAAiB,CAAC,EAAE,CAACpC,SAASD,aAAaS,UAC9CD,gBAAgBR,aAAaC,SAASQ,SAAS;IACnD,CAACb,MAAM0C,iBAAiB,CAAC,EAAE,CAACrC,SAASD,aAAaS,UAC9CD,gBAAgBR,aAAaC,SAASQ,SAAS;AACvD"}