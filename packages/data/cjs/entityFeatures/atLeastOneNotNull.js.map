{"version":3,"sources":["../../src/entityFeatures/atLeastOneNotNull.js"],"sourcesContent":["const { _, quote } = require('@genx/july');\nconst { ValidationError } = require('../utils/Errors');\nconst Rules = require('../enum/Rules');\n\n/**\n * A rule specifies at least one field not null, e.g. email or mobile.\n * @module EntityFeatureRuntime_AtLeastOneNotNull\n */\n\nmodule.exports = {\n    [Rules.RULE_BEFORE_CREATE]: (feature, entityModel, context) => {\n        _.each(feature, (item) => {\n            if (\n                _.every(item, (fieldName) => _.isNil(context.latest[fieldName]))\n            ) {\n                throw new ValidationError(\n                    `At least one of these fields ${item\n                        .map((f) => quote(f))\n                        .join(', ')} should not be null.`,\n                    {\n                        entity: entityModel.meta.name,\n                        fields: feature,\n                    }\n                );\n            }\n        });\n\n        return true;\n    },\n\n    [Rules.RULE_BEFORE_UPDATE]: (feature, entityModel, context) => {\n        _.each(feature, (item) => {\n            if (\n                _.every(item, (fieldName) =>\n                    fieldName in context.latest\n                        ? _.isNil(context.latest[fieldName])\n                        : context.existing &&\n                          _.isNil(context.existing[fieldName])\n                )\n            ) {\n                throw new ValidationError(\n                    `At least one of these fields ${item\n                        .map((f) => quote(f))\n                        .join(', ')} should not be null.`,\n                    {\n                        entity: entityModel.meta.name,\n                        fields: feature,\n                    }\n                );\n            }\n        });\n\n        return true;\n    },\n};\n"],"names":["_","quote","require","ValidationError","Rules","module","exports","RULE_BEFORE_CREATE","feature","entityModel","context","each","item","every","fieldName","isNil","latest","map","f","join","entity","meta","name","fields","RULE_BEFORE_UPDATE","existing"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";AAAA,MAAM,EAAEA,CAAC,EAAEC,KAAK,EAAE,GAAGC,QAAQ;AAC7B,MAAM,EAAEC,eAAe,EAAE,GAAGD,QAAQ;AACpC,MAAME,QAAQF,QAAQ;AAEtB;;;CAGC,GAEDG,OAAOC,OAAO,GAAG;IACb,CAACF,MAAMG,kBAAkB,CAAC,EAAE,CAACC,SAASC,aAAaC;QAC/CV,EAAEW,IAAI,CAACH,SAAS,CAACI;YACb,IACIZ,EAAEa,KAAK,CAACD,MAAM,CAACE,YAAcd,EAAEe,KAAK,CAACL,QAAQM,MAAM,CAACF,UAAU,IAChE;gBACE,MAAM,IAAIX,gBACN,CAAC,6BAA6B,EAAES,KAC3BK,GAAG,CAAC,CAACC,IAAMjB,MAAMiB,IACjBC,IAAI,CAAC,MAAM,oBAAoB,CAAC,EACrC;oBACIC,QAAQX,YAAYY,IAAI,CAACC,IAAI;oBAC7BC,QAAQf;gBACZ;YAER;QACJ;QAEA,OAAO;IACX;IAEA,CAACJ,MAAMoB,kBAAkB,CAAC,EAAE,CAAChB,SAASC,aAAaC;QAC/CV,EAAEW,IAAI,CAACH,SAAS,CAACI;YACb,IACIZ,EAAEa,KAAK,CAACD,MAAM,CAACE,YACXA,aAAaJ,QAAQM,MAAM,GACrBhB,EAAEe,KAAK,CAACL,QAAQM,MAAM,CAACF,UAAU,IACjCJ,QAAQe,QAAQ,IAChBzB,EAAEe,KAAK,CAACL,QAAQe,QAAQ,CAACX,UAAU,IAE/C;gBACE,MAAM,IAAIX,gBACN,CAAC,6BAA6B,EAAES,KAC3BK,GAAG,CAAC,CAACC,IAAMjB,MAAMiB,IACjBC,IAAI,CAAC,MAAM,oBAAoB,CAAC,EACrC;oBACIC,QAAQX,YAAYY,IAAI,CAACC,IAAI;oBAC7BC,QAAQf;gBACZ;YAER;QACJ;QAEA,OAAO;IACX;AACJ"}